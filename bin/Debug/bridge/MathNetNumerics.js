/**
 * @version 1.0.0.0
 * @copyright Copyright Â©  2019
 * @compiler Bridge.NET 17.10.1
 */
Bridge.assembly("MathNetNumerics", function ($asm, globals) {
    "use strict";

    /** @namespace MathNet.Numerics */

    /**
     * Integer number theory functions.
     *
     * @static
     * @abstract
     * @public
     * @class MathNet.Numerics.Euclid
     */
    Bridge.define("MathNet.Numerics.Euclid", {
        statics: {
            fields: {
                MultiplyDeBruijnBitPosition: null
            },
            ctors: {
                init: function () {
                    this.MultiplyDeBruijnBitPosition = System.Array.init([0, 9, 1, 10, 13, 21, 2, 29, 11, 14, 16, 18, 22, 25, 3, 30, 8, 12, 20, 28, 15, 17, 24, 7, 19, 27, 23, 6, 26, 5, 4, 31], System.Int32);
                }
            },
            methods: {
                /**
                 * Canonical Modulus. The result has the sign of the divisor.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @param   {number}    dividend    
                 * @param   {number}    divisor
                 * @return  {number}
                 */
                Modulus: function (dividend, divisor) {
                    return ((dividend % divisor) + divisor) % divisor;
                },
                /**
                 * Canonical Modulus. The result has the sign of the divisor.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @param   {number}    dividend    
                 * @param   {number}    divisor
                 * @return  {number}
                 */
                Modulus$3: function (dividend, divisor) {
                    return ((dividend % divisor) + divisor) % divisor;
                },
                /**
                 * Canonical Modulus. The result has the sign of the divisor.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @param   {number}    dividend    
                 * @param   {number}    divisor
                 * @return  {number}
                 */
                Modulus$1: function (dividend, divisor) {
                    return ((((dividend % divisor) + divisor) | 0)) % divisor;
                },
                /**
                 * Canonical Modulus. The result has the sign of the divisor.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @param   {System.Int64}    dividend    
                 * @param   {System.Int64}    divisor
                 * @return  {System.Int64}
                 */
                Modulus$2: function (dividend, divisor) {
                    return ((dividend.mod(divisor)).add(divisor)).mod(divisor);
                },
                /**
                 * Canonical Modulus. The result has the sign of the divisor.
                 * Remainder (% operator). The result has the sign of the dividend.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @param   {number}    dividend    
                 * @param   {number}    divisor
                 * @return  {number}
                 */
                Remainder: function (dividend, divisor) {
                    return dividend % divisor;
                },
                /**
                 * Remainder (% operator). The result has the sign of the dividend.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @param   {number}    dividend    
                 * @param   {number}    divisor
                 * @return  {number}
                 */
                Remainder$3: function (dividend, divisor) {
                    return dividend % divisor;
                },
                /**
                 * Remainder (% operator). The result has the sign of the dividend.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @param   {number}    dividend    
                 * @param   {number}    divisor
                 * @return  {number}
                 */
                Remainder$1: function (dividend, divisor) {
                    return dividend % divisor;
                },
                /**
                 * Remainder (% operator). The result has the sign of the dividend.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @param   {System.Int64}    dividend    
                 * @param   {System.Int64}    divisor
                 * @return  {System.Int64}
                 */
                Remainder$2: function (dividend, divisor) {
                    return dividend.mod(divisor);
                },
                /**
                 * Remainder (% operator). The result has the sign of the dividend.
                 * Find out whether the provided 32 bit integer is an even number.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @param   {number}     number    The number to very whether it's even.
                 * @return  {boolean}              True if and only if it is an even number.
                 */
                IsEven: function (number) {
                    return (number & 1) === 0;
                },
                /**
                 * Find out whether the provided 64 bit integer is an even number.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @param   {System.Int64}    number    The number to very whether it's even.
                 * @return  {boolean}                   True if and only if it is an even number.
                 */
                IsEven$1: function (number) {
                    return (number.and(System.Int64(1))).equals(System.Int64(0));
                },
                /**
                 * Find out whether the provided 32 bit integer is an odd number.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @param   {number}     number    The number to very whether it's odd.
                 * @return  {boolean}              True if and only if it is an odd number.
                 */
                IsOdd: function (number) {
                    return (number & 1) === 1;
                },
                /**
                 * Find out whether the provided 64 bit integer is an odd number.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @param   {System.Int64}    number    The number to very whether it's odd.
                 * @return  {boolean}                   True if and only if it is an odd number.
                 */
                IsOdd$1: function (number) {
                    return (number.and(System.Int64(1))).equals(System.Int64(1));
                },
                /**
                 * Find out whether the provided 32 bit integer is a perfect power of two.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @param   {number}     number    The number to very whether it's a power of two.
                 * @return  {boolean}              True if and only if it is a power of two.
                 */
                IsPowerOfTwo: function (number) {
                    return number > 0 && (number & (((number - 1) | 0))) === 0;
                },
                /**
                 * Find out whether the provided 64 bit integer is a perfect power of two.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @param   {System.Int64}    number    The number to very whether it's a power of two.
                 * @return  {boolean}                   True if and only if it is a power of two.
                 */
                IsPowerOfTwo$1: function (number) {
                    return number.gt(System.Int64(0)) && (number.and((number.sub(System.Int64(1))))).equals(System.Int64(0));
                },
                /**
                 * Find out whether the provided 32 bit integer is a perfect square, i.e. a square of an integer.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @param   {number}     number    The number to very whether it's a perfect square.
                 * @return  {boolean}              True if and only if it is a perfect square.
                 */
                IsPerfectSquare: function (number) {
                    if (number < 0) {
                        return false;
                    }

                    var lastHexDigit = number & 15;
                    if (lastHexDigit > 9) {
                        return false;
                    }

                    if (lastHexDigit === 0 || lastHexDigit === 1 || lastHexDigit === 4 || lastHexDigit === 9) {
                        var t = Bridge.Int.clip32(Math.floor(Math.sqrt(number) + 0.5));
                        return (Bridge.Int.mul(t, t)) === number;
                    }

                    return false;
                },
                /**
                 * Find out whether the provided 64 bit integer is a perfect square, i.e. a square of an integer.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @param   {System.Int64}    number    The number to very whether it's a perfect square.
                 * @return  {boolean}                   True if and only if it is a perfect square.
                 */
                IsPerfectSquare$1: function (number) {
                    if (number.lt(System.Int64(0))) {
                        return false;
                    }

                    var lastHexDigit = System.Int64.clip32(number.and(System.Int64(15)));
                    if (lastHexDigit > 9) {
                        return false;
                    }

                    if (lastHexDigit === 0 || lastHexDigit === 1 || lastHexDigit === 4 || lastHexDigit === 9) {
                        var t = Bridge.Int.clip64(Math.floor(Math.sqrt(System.Int64.toNumber(number)) + 0.5));
                        return (t.mul(t)).equals(number);
                    }

                    return false;
                },
                /**
                 * Raises 2 to the provided integer exponent (0 &lt;= exponent &lt; 31).
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @throws 
                 * @param   {number}    exponent    The exponent to raise 2 up to.
                 * @return  {number}                2 ^ exponent.
                 */
                PowerOfTwo: function (exponent) {
                    if (exponent < 0 || exponent >= 31) {
                        throw new System.ArgumentOutOfRangeException.$ctor1("exponent");
                    }

                    return 1 << exponent;
                },
                /**
                 * Raises 2 to the provided integer exponent (0 &lt;= exponent &lt; 63).
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @throws 
                 * @param   {System.Int64}    exponent    The exponent to raise 2 up to.
                 * @return  {System.Int64}                2 ^ exponent.
                 */
                PowerOfTwo$1: function (exponent) {
                    if (exponent.lt(System.Int64(0)) || exponent.gte(System.Int64(63))) {
                        throw new System.ArgumentOutOfRangeException.$ctor1("exponent");
                    }

                    return (System.Int64(1)).shl(System.Int64.clip32(exponent));
                },
                /**
                 * Evaluate the binary logarithm of an integer number.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @param   {number}    number
                 * @return  {number}
                 */
                Log2: function (number) {
                    number = number | (number >> 1);
                    number = number | (number >> 2);
                    number = number | (number >> 4);
                    number = number | (number >> 8);
                    number = number | (number >> 16);

                    return MathNet.Numerics.Euclid.MultiplyDeBruijnBitPosition[System.Array.index(System.Int64.clipu32((System.Int64(number).mul(System.Int64(130329821)))) >>> 27, MathNet.Numerics.Euclid.MultiplyDeBruijnBitPosition)];
                },
                /**
                 * Find the closest perfect power of two that is larger or equal to the provided
                 32 bit integer.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @throws 
                 * @param   {number}    number    The number of which to find the closest upper power of two.
                 * @return  {number}              A power of two.
                 */
                CeilingToPowerOfTwo: function (number) {
                    if (number === -2147483648) {
                        return 0;
                    }

                    var maxPowerOfTwo = 1073741824;
                    if (number > maxPowerOfTwo) {
                        throw new System.ArgumentOutOfRangeException.$ctor1("number");
                    }

                    number = (number - 1) | 0;
                    number = number | (number >> 1);
                    number = number | (number >> 2);
                    number = number | (number >> 4);
                    number = number | (number >> 8);
                    number = number | (number >> 16);
                    return ((number + 1) | 0);
                },
                /**
                 * Find the closest perfect power of two that is larger or equal to the provided
                 64 bit integer.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @throws 
                 * @param   {System.Int64}    number    The number of which to find the closest upper power of two.
                 * @return  {System.Int64}              A power of two.
                 */
                CeilingToPowerOfTwo$1: function (number) {
                    if (number.equals(System.Int64.MinValue)) {
                        return System.Int64(0);
                    }

                    var maxPowerOfTwo = System.Int64([0,1073741824]);
                    if (number.gt(maxPowerOfTwo)) {
                        throw new System.ArgumentOutOfRangeException.$ctor1("number");
                    }

                    number = number.dec();
                    number = number.or((number.shr(1)));
                    number = number.or((number.shr(2)));
                    number = number.or((number.shr(4)));
                    number = number.or((number.shr(8)));
                    number = number.or((number.shr(16)));
                    number = number.or((number.shr(32)));
                    return number.add(System.Int64(1));
                },
                /**
                 * Returns the greatest common divisor (<pre><code>gcd</code></pre>) of two integers using Euclid's algorithm.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @param   {System.Int64}    a    First Integer: a.
                 * @param   {System.Int64}    b    Second Integer: b.
                 * @return  {System.Int64}         Greatest common divisor <pre><code>gcd</code></pre>(a,b)
                 */
                GreatestCommonDivisor$4: function (a, b) {
                    while (b.ne(System.Int64(0))) {
                        var remainder = a.mod(b);
                        a = b;
                        b = remainder;
                    }

                    return a.abs();
                },
                /**
                 * Returns the greatest common divisor (<pre><code>gcd</code></pre>) of a set of integers using Euclid's
                 algorithm.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @param   {System.Collections.Generic.IList$1}    integers    List of Integers.
                 * @return  {System.Int64}                                      Greatest common divisor <pre><code>gcd</code></pre>(list of integers)
                 */
                GreatestCommonDivisor$3: function (integers) {
                    if (null == integers) {
                        throw new System.ArgumentNullException.$ctor1("integers");
                    }

                    if (System.Array.getCount(integers, System.Int64) === 0) {
                        return System.Int64(0);
                    }

                    var gcd = System.Array.getItem(integers, 0, System.Int64).abs();

                    for (var i = 1; (i < System.Array.getCount(integers, System.Int64)) && (gcd.gt(System.Int64(1))); i = (i + 1) | 0) {
                        gcd = MathNet.Numerics.Euclid.GreatestCommonDivisor$4(gcd, System.Array.getItem(integers, i, System.Int64));
                    }

                    return gcd;
                },
                /**
                 * Returns the greatest common divisor (<pre><code>gcd</code></pre>) of a set of integers using Euclid's algorithm.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @param   {Array.<System.Int64>}    integers    List of Integers.
                 * @return  {System.Int64}                        Greatest common divisor <pre><code>gcd</code></pre>(list of integers)
                 */
                GreatestCommonDivisor$5: function (integers) {
                    if (integers === void 0) { integers = []; }
                    return MathNet.Numerics.Euclid.GreatestCommonDivisor$3(Bridge.cast(integers, System.Collections.Generic.IList$1(System.Int64)));
                },
                /**
                 * Returns the greatest common divisor (<pre><code>gcd</code></pre>) of two big integers.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @param   {number}    a    First Integer: a.
                 * @param   {number}    b    Second Integer: b.
                 * @return  {number}         Greatest common divisor <pre><code>gcd</code></pre>(a,b)
                 */
                GreatestCommonDivisor$1: function (a, b) {
                    if (b === 0) {
                        return a;
                    }

                    var r = a % b;

                    return MathNet.Numerics.Euclid.GreatestCommonDivisor$1(b, r);
                },
                /**
                 * Returns the greatest common divisor (<pre><code>gcd</code></pre>) of a set of big integers.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @param   {System.Collections.Generic.IList$1}    integers    List of Integers.
                 * @return  {number}                                            Greatest common divisor <pre><code>gcd</code></pre>(list of integers)
                 */
                GreatestCommonDivisor: function (integers) {
                    if (null == integers) {
                        throw new System.ArgumentNullException.$ctor1("integers");
                    }

                    if (System.Array.getCount(integers, System.Double) === 0) {
                        return 0;
                    }

                    var gcd = Math.abs(System.Array.getItem(integers, 0, System.Double));

                    for (var i = 1; (i < System.Array.getCount(integers, System.Double)) && (gcd > 1.0); i = (i + 1) | 0) {
                        gcd = MathNet.Numerics.Euclid.GreatestCommonDivisor$1(gcd, System.Array.getItem(integers, i, System.Double));
                    }

                    return gcd;
                },
                /**
                 * Returns the greatest common divisor (<pre><code>gcd</code></pre>) of a set of big integers.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @param   {Array.<number>}    integers    List of Integers.
                 * @return  {number}                        Greatest common divisor <pre><code>gcd</code></pre>(list of integers)
                 */
                GreatestCommonDivisor$2: function (integers) {
                    if (integers === void 0) { integers = []; }
                    return MathNet.Numerics.Euclid.GreatestCommonDivisor(Bridge.cast(integers, System.Collections.Generic.IList$1(System.Double)));
                },
                /**
                 * Computes the extended greatest common divisor, such that a*x + b*y = <pre><code>gcd</code></pre>(a,b).
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @example The <pre><code>gcd</code></pre> of 45 and 18 is 9: 18 = 2*9, 45 = 5*9. 9 = 1*45 -2*18, therefore x=1 and y=-2.
                 *
                 * long x,y,d;
                 * d = Fn.GreatestCommonDivisor(45,18,out x, out y);
                 * -> d == 9 && x == 1 && y == -2
                 * 
                 *
                 *
                 * @param   {System.Int64}    a    First Integer: a.
                 * @param   {System.Int64}    b    Second Integer: b.
                 * @param   {System.Int64}    x    Resulting x, such that a*x + b*y = <pre><code>gcd</code></pre>(a,b).
                 * @param   {System.Int64}    y    Resulting y, such that a*x + b*y = <pre><code>gcd</code></pre>(a,b)
                 * @return  {System.Int64}         Greatest common divisor <pre><code>gcd</code></pre>(a,b)
                 */
                ExtendedGreatestCommonDivisor$1: function (a, b, x, y) {
                    var mp = System.Int64(1), np = System.Int64(0), m = System.Int64(0), n = System.Int64(1);

                    while (b.ne(System.Int64(0))) {
                        var rem = { };
                        var quot = System.Int64.divRem(a, b, rem);
                        a = b;
                        b = rem.v;

                        var tmp = m;
                        m = mp.sub((quot.mul(m)));
                        mp = tmp;

                        tmp = n;
                        n = np.sub((quot.mul(n)));
                        np = tmp;
                    }

                    if (a.gte(System.Int64(0))) {
                        x.v = mp;
                        y.v = np;
                        return a;
                    }

                    x.v = mp.neg();
                    y.v = np.neg();
                    return a.neg();
                },
                /**
                 * Computes the extended greatest common divisor, such that a*x + b*y = <pre><code>gcd</code></pre>(a,b).
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @example The <pre><code>gcd</code></pre> of 45 and 18 is 9: 18 = 2*9, 45 = 5*9. 9 = 1*45 -2*18, therefore x=1 and y=-2.
                 *
                 * long x,y,d;
                 * d = Fn.GreatestCommonDivisor(45,18,out x, out y);
                 * -> d == 9 && x == 1 && y == -2
                 * 
                 *
                 *
                 * @param   {number}           a    First Integer: a.
                 * @param   {number}           b    Second Integer: b.
                 * @param   {System.Double}    x    Resulting x, such that a*x + b*y = <pre><code>gcd</code></pre>(a,b).
                 * @param   {System.Double}    y    Resulting y, such that a*x + b*y = <pre><code>gcd</code></pre>(a,b)
                 * @return  {number}                Greatest common divisor <pre><code>gcd</code></pre>(a,b)
                 */
                ExtendedGreatestCommonDivisor: function (a, b, x, y) {
                    var mp = 1.0, np = 0.0, m = 0.0, n = 1.0;

                    while (b !== 0) {
                        var rem = a % b;


                        var quot = a / b;
                        a = b;
                        b = rem;

                        var tmp = m;
                        m = mp - (quot * m);
                        mp = tmp;

                        tmp = n;
                        n = np - (quot * n);
                        np = tmp;
                    }

                    if (a >= 0.0) {
                        x.v = mp;
                        y.v = np;
                        return a;
                    }

                    x.v = -mp;
                    y.v = -np;
                    return -a;
                },
                /**
                 * Returns the least common multiple (<pre><code>lcm</code></pre>) of two integers using Euclid's algorithm.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @param   {System.Int64}    a    First Integer: a.
                 * @param   {System.Int64}    b    Second Integer: b.
                 * @return  {System.Int64}         Least common multiple <pre><code>lcm</code></pre>(a,b)
                 */
                LeastCommonMultiple$4: function (a, b) {
                    if ((a.equals(System.Int64(0))) || (b.equals(System.Int64(0)))) {
                        return System.Int64(0);
                    }

                    return (a.div(MathNet.Numerics.Euclid.GreatestCommonDivisor$4(a, b))).mul(b).abs();
                },
                /**
                 * Returns the least common multiple (<pre><code>lcm</code></pre>) of a set of integers using Euclid's algorithm.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @param   {System.Collections.Generic.IList$1}    integers    List of Integers.
                 * @return  {System.Int64}                                      Least common multiple <pre><code>lcm</code></pre>(list of integers)
                 */
                LeastCommonMultiple$3: function (integers) {
                    if (null == integers) {
                        throw new System.ArgumentNullException.$ctor1("integers");
                    }

                    if (System.Array.getCount(integers, System.Int64) === 0) {
                        return System.Int64(1);
                    }

                    var lcm = System.Array.getItem(integers, 0, System.Int64).abs();

                    for (var i = 1; i < System.Array.getCount(integers, System.Int64); i = (i + 1) | 0) {
                        lcm = MathNet.Numerics.Euclid.LeastCommonMultiple$4(lcm, System.Array.getItem(integers, i, System.Int64));
                    }

                    return lcm;
                },
                /**
                 * Returns the least common multiple (<pre><code>lcm</code></pre>) of a set of integers using Euclid's algorithm.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @param   {Array.<System.Int64>}    integers    List of Integers.
                 * @return  {System.Int64}                        Least common multiple <pre><code>lcm</code></pre>(list of integers)
                 */
                LeastCommonMultiple$5: function (integers) {
                    if (integers === void 0) { integers = []; }
                    return MathNet.Numerics.Euclid.LeastCommonMultiple$3(Bridge.cast(integers, System.Collections.Generic.IList$1(System.Int64)));
                },
                /**
                 * Returns the least common multiple (<pre><code>lcm</code></pre>) of two big integers.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @param   {number}    a    First Integer: a.
                 * @param   {number}    b    Second Integer: b.
                 * @return  {number}         Least common multiple <pre><code>lcm</code></pre>(a,b)
                 */
                LeastCommonMultiple$1: function (a, b) {
                    if (a === 0.0 || b === 0.0) {
                        return 0.0;
                    }

                    return Math.abs((a / MathNet.Numerics.Euclid.GreatestCommonDivisor$1(a, b) * b));
                },
                /**
                 * Returns the least common multiple (<pre><code>lcm</code></pre>) of a set of big integers.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @param   {System.Collections.Generic.IList$1}    integers    List of Integers.
                 * @return  {number}                                            Least common multiple <pre><code>lcm</code></pre>(list of integers)
                 */
                LeastCommonMultiple: function (integers) {
                    if (null == integers) {
                        throw new System.ArgumentNullException.$ctor1("integers");
                    }

                    if (System.Array.getCount(integers, System.Double) === 0) {
                        return 1;
                    }

                    var lcm = Math.abs(System.Array.getItem(integers, 0, System.Double));

                    for (var i = 1; i < System.Array.getCount(integers, System.Double); i = (i + 1) | 0) {
                        lcm = MathNet.Numerics.Euclid.LeastCommonMultiple$1(lcm, System.Array.getItem(integers, i, System.Double));
                    }

                    return lcm;
                },
                /**
                 * Returns the least common multiple (<pre><code>lcm</code></pre>) of a set of big integers.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Euclid
                 * @memberof MathNet.Numerics.Euclid
                 * @param   {Array.<number>}    integers    List of Integers.
                 * @return  {number}                        Least common multiple <pre><code>lcm</code></pre>(list of integers)
                 */
                LeastCommonMultiple$2: function (integers) {
                    if (integers === void 0) { integers = []; }
                    return MathNet.Numerics.Euclid.LeastCommonMultiple(Bridge.cast(integers, System.Collections.Generic.IList$1(System.Double)));
                }
            }
        }
    });

    /** @namespace System */

    /**
     * @memberof System
     * @callback System.Func
     * @param   {number}    arg1    
     * @param   {number}    arg2
     * @return  {T}
     */

    Bridge.define("MathNet.Numerics.LinearAlgebra.CreateMatrix", {
        statics: {
            methods: {
                /**
                 * Create a new matrix straight from an initialized matrix storage instance.
                 If you have an instance of a discrete storage type instead, use their direct methods instead.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                                  T          
                 * @param   {MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1}    storage
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                WithStorage: function (T, storage) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.OfStorage(storage);
                },
                /**
                 * Create a new matrix with the same kind of the provided example.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T               
                 * @param   {Function}                                   TU              
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    example         
                 * @param   {number}                                     rows            
                 * @param   {number}                                     columns         
                 * @param   {boolean}                                    fullyMutable
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                SameAs$4: function (T, TU, example, rows, columns, fullyMutable) {
                    if (fullyMutable === void 0) { fullyMutable = false; }
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.SameAs$4(TU, example, rows, columns, fullyMutable);
                },
                /**
                 * Create a new matrix with the same kind and dimensions of the provided example.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T          
                 * @param   {Function}                                   TU         
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    example
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                SameAs$3: function (T, TU, example) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.SameAs$3(TU, example);
                },
                /**
                 * Create a new matrix with the same kind of the provided example.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T          
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    example    
                 * @param   {number}                                     rows       
                 * @param   {number}                                     columns
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                SameAs$2: function (T, example, rows, columns) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.SameAs$2(example, rows, columns);
                },
                /**
                 * Create a new matrix with a type that can represent and is closest to both provided samples.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T               
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    example         
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    otherExample    
                 * @param   {number}                                     rows            
                 * @param   {number}                                     columns         
                 * @param   {boolean}                                    fullyMutable
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                SameAs$1: function (T, example, otherExample, rows, columns, fullyMutable) {
                    if (fullyMutable === void 0) { fullyMutable = false; }
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.SameAs$1(example, otherExample, rows, columns, fullyMutable);
                },
                /**
                 * Create a new matrix with a type that can represent and is closest to both provided samples and the dimensions of example.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T               
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    example         
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    otherExample
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                SameAs: function (T, example, otherExample) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.SameAs(example, otherExample);
                },
                /**
                 * Create a new dense matrix with values sampled from the provided random distribution.
                 * Create a new dense matrix with values sampled from the standard distribution with a system random source.
                 * Create a new positive definite dense matrix where each value is the product
                 of two samples from the standard distribution.
                 * Create a new dense matrix straight from an initialized matrix storage instance.
                 The storage is used directly without copying.
                 Intended for advanced scenarios where you're working directly with
                 storage for performance or interop reasons.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                                                  T          
                 * @param   {MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1}    storage
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Dense: function (T, storage) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.Dense(storage);
                },
                /**
                 * Create a new dense matrix with the given number of rows and columns.
                 All cells of the matrix will be initialized to zero.
                 Zero-length matrices are not supported.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T          
                 * @param   {number}                                     rows       
                 * @param   {number}                                     columns
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Dense$1: function (T, rows, columns) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.Dense$1(rows, columns);
                },
                /**
                 * Create a new dense matrix with the given number of rows and columns directly binding to a raw array.
                 The array is assumed to be in column-major order (column by column) and is used directly without copying.
                 Very efficient, but changes to the array and the matrix will affect each other.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T          
                 * @param   {number}                                     rows       
                 * @param   {number}                                     columns    
                 * @param   {Array.<T>}                                  storage
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 * @see {@link }
                 */
                Dense$3: function (T, rows, columns, storage) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.Dense$3(rows, columns, storage);
                },
                /**
                 * Create a new dense matrix and initialize each value to the same provided value.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T          
                 * @param   {number}                                     rows       
                 * @param   {number}                                     columns    
                 * @param   {T}                                          value
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Dense$2: function (T, rows, columns, value) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.Dense$2(rows, columns, value);
                },
                /**
                 * Create a new dense matrix and initialize each value using the provided init function.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T          
                 * @param   {number}                                     rows       
                 * @param   {number}                                     columns    
                 * @param   {System.Func}                                init
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Dense$4: function (T, rows, columns, init) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.Dense$4(rows, columns, init);
                },
                /**
                 * Create a new diagonal dense matrix and initialize each diagonal value to the same provided value.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T          
                 * @param   {number}                                     rows       
                 * @param   {number}                                     columns    
                 * @param   {T}                                          value
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                DenseDiagonal$1: function (T, rows, columns, value) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.DenseDiagonal$1(rows, columns, value);
                },
                /**
                 * Create a new diagonal dense matrix and initialize each diagonal value to the same provided value.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T        
                 * @param   {number}                                     order    
                 * @param   {T}                                          value
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                DenseDiagonal: function (T, order, value) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.DenseDiagonal(order, value);
                },
                /**
                 * Create a new diagonal dense matrix and initialize each diagonal value using the provided init function.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T          
                 * @param   {number}                                     rows       
                 * @param   {number}                                     columns    
                 * @param   {System.Func}                                init
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                DenseDiagonal$2: function (T, rows, columns, init) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.DenseDiagonal$2(rows, columns, init);
                },
                /**
                 * Create a new diagonal dense identity matrix with a one-diagonal.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T          
                 * @param   {number}                                     rows       
                 * @param   {number}                                     columns
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                DenseIdentity$1: function (T, rows, columns) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.DenseIdentity$1(rows, columns);
                },
                /**
                 * Create a new diagonal dense identity matrix with a one-diagonal.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T        
                 * @param   {number}                                     order
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                DenseIdentity: function (T, order) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.DenseIdentity(order);
                },
                /**
                 * Create a new dense matrix as a copy of the given other matrix.
                 This new matrix will be independent from the other matrix.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T         
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    matrix
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                DenseOfMatrix: function (T, matrix) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.DenseOfMatrix(matrix);
                },
                /**
                 * Create a new dense matrix as a copy of the given two-dimensional array.
                 This new matrix will be independent from the provided array.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T        
                 * @param   {Array.<T>}                                  array
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                DenseOfArray: function (T, array) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.DenseOfArray(array);
                },
                /**
                 * Create a new dense matrix as a copy of the given indexed enumerable.
                 Keys must be provided at most once, zero is assumed if a key is omitted.
                 This new matrix will be independent from the enumerable.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                    T             
                 * @param   {number}                                      rows          
                 * @param   {number}                                      columns       
                 * @param   {System.Collections.Generic.IEnumerable$1}    enumerable
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                DenseOfIndexed: function (T, rows, columns, enumerable) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.DenseOfIndexed(rows, columns, enumerable);
                },
                /**
                 * Create a new dense matrix as a copy of the given enumerable.
                 The enumerable is assumed to be in column-major order (column by column).
                 This new matrix will be independent from the enumerable.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                    T              
                 * @param   {number}                                      rows           
                 * @param   {number}                                      columns        
                 * @param   {System.Collections.Generic.IEnumerable$1}    columnMajor
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                DenseOfColumnMajor: function (T, rows, columns, columnMajor) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.DenseOfColumnMajor(rows, columns, columnMajor);
                },
                /**
                 * Create a new dense matrix as a copy of the given enumerable of enumerable columns.
                 Each enumerable in the master enumerable specifies a column.
                 This new matrix will be independent from the enumerables.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                    T       
                 * @param   {System.Collections.Generic.IEnumerable$1}    data
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                DenseOfColumns: function (T, data) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.DenseOfColumns(data);
                },
                /**
                 * Create a new dense matrix as a copy of the given enumerable of enumerable columns.
                 Each enumerable in the master enumerable specifies a column.
                 This new matrix will be independent from the enumerables.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                    T          
                 * @param   {number}                                      rows       
                 * @param   {number}                                      columns    
                 * @param   {System.Collections.Generic.IEnumerable$1}    data
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                DenseOfColumns$1: function (T, rows, columns, data) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.DenseOfColumns$1(rows, columns, data);
                },
                /**
                 * Create a new dense matrix of T as a copy of the given column arrays.
                 This new matrix will be independent from the arrays.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T          
                 * @param   {Array.<Array.<T>>}                          columns
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                DenseOfColumnArrays: function (T, columns) {
                    if (columns === void 0) { columns = []; }
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.DenseOfColumnArrays(columns);
                },
                /**
                 * Create a new dense matrix of T as a copy of the given column arrays.
                 This new matrix will be independent from the arrays.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                    T          
                 * @param   {System.Collections.Generic.IEnumerable$1}    columns
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                DenseOfColumnArrays$1: function (T, columns) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.DenseOfColumnArrays$1(columns);
                },
                /**
                 * Create a new dense matrix as a copy of the given column vectors.
                 This new matrix will be independent from the vectors.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                           T          
                 * @param   {Array.<MathNet.Numerics.LinearAlgebra.Vector$1>}    columns
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                DenseOfColumnVectors: function (T, columns) {
                    if (columns === void 0) { columns = []; }
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.DenseOfColumnVectors(columns);
                },
                /**
                 * Create a new dense matrix as a copy of the given column vectors.
                 This new matrix will be independent from the vectors.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                    T          
                 * @param   {System.Collections.Generic.IEnumerable$1}    columns
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                DenseOfColumnVectors$1: function (T, columns) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.DenseOfColumnVectors$1(columns);
                },
                /**
                 * Create a new dense matrix as a copy of the given enumerable of enumerable rows.
                 Each enumerable in the master enumerable specifies a row.
                 This new matrix will be independent from the enumerables.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                    T       
                 * @param   {System.Collections.Generic.IEnumerable$1}    data
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                DenseOfRows: function (T, data) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.DenseOfRows(data);
                },
                /**
                 * Create a new dense matrix as a copy of the given enumerable of enumerable rows.
                 Each enumerable in the master enumerable specifies a row.
                 This new matrix will be independent from the enumerables.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                    T          
                 * @param   {number}                                      rows       
                 * @param   {number}                                      columns    
                 * @param   {System.Collections.Generic.IEnumerable$1}    data
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                DenseOfRows$1: function (T, rows, columns, data) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.DenseOfRows$1(rows, columns, data);
                },
                /**
                 * Create a new dense matrix of T as a copy of the given row arrays.
                 This new matrix will be independent from the arrays.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T       
                 * @param   {Array.<Array.<T>>}                          rows
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                DenseOfRowArrays: function (T, rows) {
                    if (rows === void 0) { rows = []; }
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.DenseOfRowArrays(rows);
                },
                /**
                 * Create a new dense matrix of T as a copy of the given row arrays.
                 This new matrix will be independent from the arrays.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                    T       
                 * @param   {System.Collections.Generic.IEnumerable$1}    rows
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                DenseOfRowArrays$1: function (T, rows) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.DenseOfRowArrays$1(rows);
                },
                /**
                 * Create a new dense matrix as a copy of the given row vectors.
                 This new matrix will be independent from the vectors.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                           T       
                 * @param   {Array.<MathNet.Numerics.LinearAlgebra.Vector$1>}    rows
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                DenseOfRowVectors: function (T, rows) {
                    if (rows === void 0) { rows = []; }
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.DenseOfRowVectors(rows);
                },
                /**
                 * Create a new dense matrix as a copy of the given row vectors.
                 This new matrix will be independent from the vectors.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                    T       
                 * @param   {System.Collections.Generic.IEnumerable$1}    rows
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                DenseOfRowVectors$1: function (T, rows) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.DenseOfRowVectors$1(rows);
                },
                /**
                 * Create a new dense matrix with the diagonal as a copy of the given vector.
                 This new matrix will be independent from the vector.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T           
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    diagonal
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                DenseOfDiagonalVector: function (T, diagonal) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.DenseOfDiagonalVector(diagonal);
                },
                /**
                 * Create a new dense matrix with the diagonal as a copy of the given vector.
                 This new matrix will be independent from the vector.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T           
                 * @param   {number}                                     rows        
                 * @param   {number}                                     columns     
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    diagonal
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                DenseOfDiagonalVector$1: function (T, rows, columns, diagonal) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.DenseOfDiagonalVector$1(rows, columns, diagonal);
                },
                /**
                 * Create a new dense matrix with the diagonal as a copy of the given array.
                 This new matrix will be independent from the array.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T           
                 * @param   {Array.<T>}                                  diagonal
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                DenseOfDiagonalArray: function (T, diagonal) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.DenseOfDiagonalArray(diagonal);
                },
                /**
                 * Create a new dense matrix with the diagonal as a copy of the given array.
                 This new matrix will be independent from the array.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T           
                 * @param   {number}                                     rows        
                 * @param   {number}                                     columns     
                 * @param   {Array.<T>}                                  diagonal
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                DenseOfDiagonalArray$1: function (T, rows, columns, diagonal) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.DenseOfDiagonalArray$1(rows, columns, diagonal);
                },
                /**
                 * Create a new dense matrix from a 2D array of existing matrices.
                 The matrices in the array are not required to be dense already.
                 If the matrices do not align properly, they are placed on the top left
                 corner of their cell with the remaining fields left zero.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                           T           
                 * @param   {Array.<MathNet.Numerics.LinearAlgebra.Matrix$1>}    matrices
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                DenseOfMatrixArray: function (T, matrices) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.DenseOfMatrixArray(matrices);
                },
                /**
                 * Create a new sparse matrix straight from an initialized matrix storage instance.
                 The storage is used directly without copying.
                 Intended for advanced scenarios where you're working directly with
                 storage for performance or interop reasons.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                                                     T          
                 * @param   {MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1}    storage
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Sparse: function (T, storage) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.Sparse(storage);
                },
                /**
                 * Create a sparse matrix of T with the given number of rows and columns.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T          
                 * @param   {number}                                     rows       The number of rows.
                 * @param   {number}                                     columns    The number of columns.
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Sparse$1: function (T, rows, columns) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.Sparse$1(rows, columns);
                },
                /**
                 * Create a new sparse matrix and initialize each value to the same provided value.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T          
                 * @param   {number}                                     rows       
                 * @param   {number}                                     columns    
                 * @param   {T}                                          value
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Sparse$2: function (T, rows, columns, value) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.Sparse$2(rows, columns, value);
                },
                /**
                 * Create a new sparse matrix and initialize each value using the provided init function.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T          
                 * @param   {number}                                     rows       
                 * @param   {number}                                     columns    
                 * @param   {System.Func}                                init
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Sparse$3: function (T, rows, columns, init) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.Sparse$3(rows, columns, init);
                },
                /**
                 * Create a new diagonal sparse matrix and initialize each diagonal value to the same provided value.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T          
                 * @param   {number}                                     rows       
                 * @param   {number}                                     columns    
                 * @param   {T}                                          value
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                SparseDiagonal$1: function (T, rows, columns, value) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.SparseDiagonal$1(rows, columns, value);
                },
                /**
                 * Create a new diagonal sparse matrix and initialize each diagonal value to the same provided value.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T        
                 * @param   {number}                                     order    
                 * @param   {T}                                          value
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                SparseDiagonal: function (T, order, value) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.SparseDiagonal(order, value);
                },
                /**
                 * Create a new diagonal sparse matrix and initialize each diagonal value using the provided init function.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T          
                 * @param   {number}                                     rows       
                 * @param   {number}                                     columns    
                 * @param   {System.Func}                                init
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                SparseDiagonal$2: function (T, rows, columns, init) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.SparseDiagonal$2(rows, columns, init);
                },
                /**
                 * Create a new diagonal dense identity matrix with a one-diagonal.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T          
                 * @param   {number}                                     rows       
                 * @param   {number}                                     columns
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                SparseIdentity$1: function (T, rows, columns) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.SparseIdentity$1(rows, columns);
                },
                /**
                 * Create a new diagonal dense identity matrix with a one-diagonal.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T        
                 * @param   {number}                                     order
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                SparseIdentity: function (T, order) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.SparseIdentity(order);
                },
                /**
                 * Create a new sparse matrix as a copy of the given other matrix.
                 This new matrix will be independent from the other matrix.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T         
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    matrix
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                SparseOfMatrix: function (T, matrix) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.SparseOfMatrix(matrix);
                },
                /**
                 * Create a new sparse matrix as a copy of the given two-dimensional array.
                 This new matrix will be independent from the provided array.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T        
                 * @param   {Array.<T>}                                  array
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                SparseOfArray: function (T, array) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.SparseOfArray(array);
                },
                /**
                 * Create a new sparse matrix as a copy of the given indexed enumerable.
                 Keys must be provided at most once, zero is assumed if a key is omitted.
                 This new matrix will be independent from the enumerable.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                    T             
                 * @param   {number}                                      rows          
                 * @param   {number}                                      columns       
                 * @param   {System.Collections.Generic.IEnumerable$1}    enumerable
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                SparseOfIndexed: function (T, rows, columns, enumerable) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.SparseOfIndexed(rows, columns, enumerable);
                },
                /**
                 * Create a new sparse matrix as a copy of the given enumerable.
                 The enumerable is assumed to be in row-major order (row by row).
                 This new matrix will be independent from the enumerable.
                 A new memory block will be allocated for storing the vector.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                    T           
                 * @param   {number}                                      rows        
                 * @param   {number}                                      columns     
                 * @param   {System.Collections.Generic.IEnumerable$1}    rowMajor
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 * @see {@link }
                 */
                SparseOfRowMajor: function (T, rows, columns, rowMajor) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.SparseOfRowMajor(rows, columns, rowMajor);
                },
                /**
                 * Create a new sparse matrix with the given number of rows and columns as a copy of the given array.
                 The array is assumed to be in column-major order (column by column).
                 This new matrix will be independent from the provided array.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T              
                 * @param   {number}                                     rows           
                 * @param   {number}                                     columns        
                 * @param   {System.Collections.Generic.IList$1}         columnMajor
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 * @see {@link }
                 */
                SparseOfColumnMajor: function (T, rows, columns, columnMajor) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.SparseOfColumnMajor(rows, columns, columnMajor);
                },
                /**
                 * Create a new sparse matrix as a copy of the given enumerable of enumerable columns.
                 Each enumerable in the master enumerable specifies a column.
                 This new matrix will be independent from the enumerables.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                    T       
                 * @param   {System.Collections.Generic.IEnumerable$1}    data
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                SparseOfColumns: function (T, data) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.SparseOfColumns(data);
                },
                /**
                 * Create a new sparse matrix as a copy of the given enumerable of enumerable columns.
                 Each enumerable in the master enumerable specifies a column.
                 This new matrix will be independent from the enumerables.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                    T          
                 * @param   {number}                                      rows       
                 * @param   {number}                                      columns    
                 * @param   {System.Collections.Generic.IEnumerable$1}    data
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                SparseOfColumns$1: function (T, rows, columns, data) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.SparseOfColumns$1(rows, columns, data);
                },
                /**
                 * Create a new sparse matrix as a copy of the given column arrays.
                 This new matrix will be independent from the arrays.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T          
                 * @param   {Array.<Array.<T>>}                          columns
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                SparseOfColumnArrays: function (T, columns) {
                    if (columns === void 0) { columns = []; }
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.SparseOfColumnArrays(columns);
                },
                /**
                 * Create a new sparse matrix as a copy of the given column arrays.
                 This new matrix will be independent from the arrays.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                    T          
                 * @param   {System.Collections.Generic.IEnumerable$1}    columns
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                SparseOfColumnArrays$1: function (T, columns) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.SparseOfColumnArrays$1(columns);
                },
                /**
                 * Create a new sparse matrix as a copy of the given column vectors.
                 This new matrix will be independent from the vectors.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                           T          
                 * @param   {Array.<MathNet.Numerics.LinearAlgebra.Vector$1>}    columns
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                SparseOfColumnVectors: function (T, columns) {
                    if (columns === void 0) { columns = []; }
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.SparseOfColumnVectors(columns);
                },
                /**
                 * Create a new sparse matrix as a copy of the given column vectors.
                 This new matrix will be independent from the vectors.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                    T          
                 * @param   {System.Collections.Generic.IEnumerable$1}    columns
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                SparseOfColumnVectors$1: function (T, columns) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.SparseOfColumnVectors$1(columns);
                },
                /**
                 * Create a new sparse matrix as a copy of the given enumerable of enumerable rows.
                 Each enumerable in the master enumerable specifies a row.
                 This new matrix will be independent from the enumerables.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                    T       
                 * @param   {System.Collections.Generic.IEnumerable$1}    data
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                SparseOfRows: function (T, data) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.SparseOfRows(data);
                },
                /**
                 * Create a new sparse matrix as a copy of the given enumerable of enumerable rows.
                 Each enumerable in the master enumerable specifies a row.
                 This new matrix will be independent from the enumerables.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                    T          
                 * @param   {number}                                      rows       
                 * @param   {number}                                      columns    
                 * @param   {System.Collections.Generic.IEnumerable$1}    data
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                SparseOfRows$1: function (T, rows, columns, data) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.SparseOfRows$1(rows, columns, data);
                },
                /**
                 * Create a new sparse matrix as a copy of the given row arrays.
                 This new matrix will be independent from the arrays.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T       
                 * @param   {Array.<Array.<T>>}                          rows
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                SparseOfRowArrays: function (T, rows) {
                    if (rows === void 0) { rows = []; }
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.SparseOfRowArrays(rows);
                },
                /**
                 * Create a new sparse matrix as a copy of the given row arrays.
                 This new matrix will be independent from the arrays.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                    T       
                 * @param   {System.Collections.Generic.IEnumerable$1}    rows
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                SparseOfRowArrays$1: function (T, rows) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.SparseOfRowArrays$1(rows);
                },
                /**
                 * Create a new sparse matrix as a copy of the given row vectors.
                 This new matrix will be independent from the vectors.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                           T       
                 * @param   {Array.<MathNet.Numerics.LinearAlgebra.Vector$1>}    rows
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                SparseOfRowVectors: function (T, rows) {
                    if (rows === void 0) { rows = []; }
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.SparseOfRowVectors(rows);
                },
                /**
                 * Create a new sparse matrix as a copy of the given row vectors.
                 This new matrix will be independent from the vectors.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                    T       
                 * @param   {System.Collections.Generic.IEnumerable$1}    rows
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                SparseOfRowVectors$1: function (T, rows) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.SparseOfRowVectors$1(rows);
                },
                /**
                 * Create a new sparse matrix with the diagonal as a copy of the given vector.
                 This new matrix will be independent from the vector.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T           
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    diagonal
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                SparseOfDiagonalVector: function (T, diagonal) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.SparseOfDiagonalVector(diagonal);
                },
                /**
                 * Create a new sparse matrix with the diagonal as a copy of the given vector.
                 This new matrix will be independent from the vector.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T           
                 * @param   {number}                                     rows        
                 * @param   {number}                                     columns     
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    diagonal
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                SparseOfDiagonalVector$1: function (T, rows, columns, diagonal) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.SparseOfDiagonalVector$1(rows, columns, diagonal);
                },
                /**
                 * Create a new sparse matrix with the diagonal as a copy of the given array.
                 This new matrix will be independent from the array.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T           
                 * @param   {Array.<T>}                                  diagonal
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                SparseOfDiagonalArray: function (T, diagonal) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.SparseOfDiagonalArray(diagonal);
                },
                /**
                 * Create a new sparse matrix with the diagonal as a copy of the given array.
                 This new matrix will be independent from the array.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T           
                 * @param   {number}                                     rows        
                 * @param   {number}                                     columns     
                 * @param   {Array.<T>}                                  diagonal
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                SparseOfDiagonalArray$1: function (T, rows, columns, diagonal) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.SparseOfDiagonalArray$1(rows, columns, diagonal);
                },
                /**
                 * Create a new sparse matrix from a 2D array of existing matrices.
                 The matrices in the array are not required to be sparse already.
                 If the matrices do not align properly, they are placed on the top left
                 corner of their cell with the remaining fields left zero.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                           T           
                 * @param   {Array.<MathNet.Numerics.LinearAlgebra.Matrix$1>}    matrices
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                SparseOfMatrixArray: function (T, matrices) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.SparseOfMatrixArray(matrices);
                },
                /**
                 * Create a new diagonal matrix straight from an initialized matrix storage instance.
                 The storage is used directly without copying.
                 Intended for advanced scenarios where you're working directly with
                 storage for performance or interop reasons.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                                          T          
                 * @param   {MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1}    storage
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Diagonal$1: function (T, storage) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.Diagonal$1(storage);
                },
                /**
                 * Create a new diagonal matrix with the given number of rows and columns.
                 All cells of the matrix will be initialized to zero.
                 Zero-length matrices are not supported.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T          
                 * @param   {number}                                     rows       
                 * @param   {number}                                     columns
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Diagonal$2: function (T, rows, columns) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.Diagonal$2(rows, columns);
                },
                /**
                 * Create a new diagonal matrix with the given number of rows and columns directly binding to a raw array.
                 The array is assumed to represent the diagonal values and is used directly without copying.
                 Very efficient, but changes to the array and the matrix will affect each other.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T          
                 * @param   {number}                                     rows       
                 * @param   {number}                                     columns    
                 * @param   {Array.<T>}                                  storage
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Diagonal$4: function (T, rows, columns, storage) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.Diagonal$4(rows, columns, storage);
                },
                /**
                 * Create a new square diagonal matrix directly binding to a raw array.
                 The array is assumed to represent the diagonal values and is used directly without copying.
                 Very efficient, but changes to the array and the matrix will affect each other.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T          
                 * @param   {Array.<T>}                                  storage
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Diagonal: function (T, storage) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.Diagonal(storage);
                },
                /**
                 * Create a new diagonal matrix and initialize each diagonal value to the same provided value.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T          
                 * @param   {number}                                     rows       
                 * @param   {number}                                     columns    
                 * @param   {T}                                          value
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Diagonal$3: function (T, rows, columns, value) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.Diagonal$3(rows, columns, value);
                },
                /**
                 * Create a new diagonal matrix and initialize each diagonal value using the provided init function.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T          
                 * @param   {number}                                     rows       
                 * @param   {number}                                     columns    
                 * @param   {System.Func}                                init
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Diagonal$5: function (T, rows, columns, init) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.Diagonal$5(rows, columns, init);
                },
                /**
                 * Create a new diagonal identity matrix with a one-diagonal.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T          
                 * @param   {number}                                     rows       
                 * @param   {number}                                     columns
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                DiagonalIdentity$1: function (T, rows, columns) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.DiagonalIdentity$1(rows, columns);
                },
                /**
                 * Create a new diagonal identity matrix with a one-diagonal.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T        
                 * @param   {number}                                     order
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                DiagonalIdentity: function (T, order) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.DiagonalIdentity(order);
                },
                /**
                 * Create a new diagonal matrix with the diagonal as a copy of the given vector.
                 This new matrix will be independent from the vector.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T           
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    diagonal
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                DiagonalOfDiagonalVector: function (T, diagonal) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.DiagonalOfDiagonalVector(diagonal);
                },
                /**
                 * Create a new diagonal matrix with the diagonal as a copy of the given vector.
                 This new matrix will be independent from the vector.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T           
                 * @param   {number}                                     rows        
                 * @param   {number}                                     columns     
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    diagonal
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                DiagonalOfDiagonalVector$1: function (T, rows, columns, diagonal) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.DiagonalOfDiagonalVector$1(rows, columns, diagonal);
                },
                /**
                 * Create a new diagonal matrix with the diagonal as a copy of the given array.
                 This new matrix will be independent from the array.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T           
                 * @param   {Array.<T>}                                  diagonal
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                DiagonalOfDiagonalArray: function (T, diagonal) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.DiagonalOfDiagonalArray(diagonal);
                },
                /**
                 * Create a new diagonal matrix with the diagonal as a copy of the given array.
                 This new matrix will be independent from the array.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateMatrix
                 * @param   {Function}                                   T           
                 * @param   {number}                                     rows        
                 * @param   {number}                                     columns     
                 * @param   {Array.<T>}                                  diagonal
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                DiagonalOfDiagonalArray$1: function (T, rows, columns, diagonal) {
                    var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
                    return m_builder.DiagonalOfDiagonalArray$1(rows, columns, diagonal);
                }
            }
        }
    });

    Bridge.define("MathNet.Numerics.LinearAlgebra.CreateVector", {
        statics: {
            methods: {
                /**
                 * Create a new vector straight from an initialized matrix storage instance.
                 If you have an instance of a discrete storage type instead, use their direct methods instead.
                 * Create a new vector with the same kind of the provided example.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateVector
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateVector
                 * @param   {Function}                                   T          
                 * @param   {Function}                                   TU         
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    example    
                 * @param   {number}                                     length
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                SameAs$5: function (T, TU, example, length) {
                    var v_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Vector;
                    return v_builder.SameAs$5(TU, example, length);
                },
                /**
                 * Create a new vector with the same kind and dimension of the provided example.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateVector
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateVector
                 * @param   {Function}                                   T          
                 * @param   {Function}                                   TU         
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    example
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                SameAs$4: function (T, TU, example) {
                    var v_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Vector;
                    return v_builder.SameAs$4(TU, example);
                },
                /**
                 * Create a new vector with the same kind of the provided example.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateVector
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateVector
                 * @param   {Function}                                   T          
                 * @param   {Function}                                   TU         
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    example    
                 * @param   {number}                                     length
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                SameAs$3: function (T, TU, example, length) {
                    var v_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Vector;

                    return v_builder.SameAs$3(TU, example, length);
                },
                /**
                 * Create a new vector with a type that can represent and is closest to both provided samples.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateVector
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateVector
                 * @param   {Function}                                   T               
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    example         
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    otherExample    
                 * @param   {number}                                     length
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                SameAs$2: function (T, example, otherExample, length) {
                    var v_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Vector;

                    return v_builder.SameAs$2(example, otherExample, length);
                },
                /**
                 * Create a new vector with a type that can represent and is closest to both provided samples and the dimensions of example.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateVector
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateVector
                 * @param   {Function}                                   T               
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    example         
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    otherExample
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                SameAs$1: function (T, example, otherExample) {
                    var v_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Vector;

                    return v_builder.SameAs$1(example, otherExample);
                },
                /**
                 * Create a new vector with a type that can represent and is closest to both provided samples.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateVector
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateVector
                 * @param   {Function}                                   T         
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    matrix    
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    vector    
                 * @param   {number}                                     length
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                SameAs: function (T, matrix, vector, length) {
                    var v_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Vector;

                    return v_builder.SameAs(matrix, vector, length);
                },
                /**
                 * Create a new dense vector with values sampled from the provided random distribution.
                 * Create a new dense vector with values sampled from the standard distribution with a system random source.
                 * Create a new dense vector with values sampled from the standard distribution with a system random source.
                 * Create a new dense vector straight from an initialized vector storage instance.
                 The storage is used directly without copying.
                 Intended for advanced scenarios where you're working directly with
                 storage for performance or interop reasons.
                 * Create a dense vector of T with the given size.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateVector
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateVector
                 * @param   {Function}                                   T       
                 * @param   {number}                                     size    The size of the vector.
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                Dense$1: function (T, size) {
                    var v_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Vector;

                    return v_builder.Dense$2(size);
                },
                /**
                 * Create a dense vector of T that is directly bound to the specified array.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateVector
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateVector
                 * @param   {Function}                                   T        
                 * @param   {Array.<T>}                                  array
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                Dense: function (T, array) {
                    var v_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Vector;

                    return v_builder.Dense(array);
                },
                /**
                 * Create a new dense vector and initialize each value using the provided value.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateVector
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateVector
                 * @param   {Function}                                   T         
                 * @param   {number}                                     length    
                 * @param   {T}                                          value
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                Dense$2: function (T, length, value) {
                    var v_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Vector;

                    return v_builder.Dense$3(length, value);
                },
                /**
                 * Create a new dense vector and initialize each value using the provided init function.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateVector
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateVector
                 * @param   {Function}                                   T         
                 * @param   {number}                                     length    
                 * @param   {System.Func}                                init
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                Dense$3: function (T, length, init) {
                    var v_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Vector;

                    return v_builder.Dense$4(length, init);
                },
                /**
                 * Create a new dense vector as a copy of the given other vector.
                 This new vector will be independent from the other vector.
                 A new memory block will be allocated for storing the vector.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateVector
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateVector
                 * @param   {Function}                                   T         
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    vector
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                DenseOfVector: function (T, vector) {
                    var v_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Vector;

                    return v_builder.DenseOfVector(vector);
                },
                /**
                 * Create a new dense vector as a copy of the given array.
                 This new vector will be independent from the array.
                 A new memory block will be allocated for storing the vector.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateVector
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateVector
                 * @param   {Function}                                   T        
                 * @param   {Array.<T>}                                  array
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                DenseOfArray: function (T, array) {
                    var v_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Vector;

                    return v_builder.DenseOfArray(array);
                },
                /**
                 * Create a new dense vector as a copy of the given enumerable.
                 This new vector will be independent from the enumerable.
                 A new memory block will be allocated for storing the vector.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateVector
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateVector
                 * @param   {Function}                                    T             
                 * @param   {System.Collections.Generic.IEnumerable$1}    enumerable
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                DenseOfEnumerable: function (T, enumerable) {
                    var v_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Vector;

                    return v_builder.DenseOfEnumerable(enumerable);
                },
                /**
                 * Create a new dense vector as a copy of the given indexed enumerable.
                 Keys must be provided at most once, zero is assumed if a key is omitted.
                 This new vector will be independent from the enumerable.
                 A new memory block will be allocated for storing the vector.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateVector
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateVector
                 * @param   {Function}                                    T             
                 * @param   {number}                                      length        
                 * @param   {System.Collections.Generic.IEnumerable$1}    enumerable
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                DenseOfIndexed: function (T, length, enumerable) {
                    var v_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Vector;

                    return v_builder.DenseOfIndexed(length, enumerable);
                },
                /**
                 * Create a new sparse vector straight from an initialized vector storage instance.
                 The storage is used directly without copying.
                 Intended for advanced scenarios where you're working directly with
                 storage for performance or interop reasons.
                 * Create a sparse vector of T with the given size.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateVector
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateVector
                 * @param   {Function}                                   T       
                 * @param   {number}                                     size    The size of the vector.
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                Sparse: function (T, size) {
                    var v_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Vector;

                    return v_builder.Sparse$1(size);
                },
                /**
                 * Create a new sparse vector and initialize each value using the provided value.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateVector
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateVector
                 * @param   {Function}                                   T         
                 * @param   {number}                                     length    
                 * @param   {T}                                          value
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                Sparse$1: function (T, length, value) {
                    var v_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Vector;

                    return v_builder.Sparse$2(length, value);
                },
                /**
                 * Create a new sparse vector and initialize each value using the provided init function.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateVector
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateVector
                 * @param   {Function}                                   T         
                 * @param   {number}                                     length    
                 * @param   {System.Func}                                init
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                Sparse$2: function (T, length, init) {
                    var v_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Vector;

                    return v_builder.Sparse$3(length, init);
                },
                /**
                 * Create a new sparse vector as a copy of the given other vector.
                 This new vector will be independent from the other vector.
                 A new memory block will be allocated for storing the vector.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateVector
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateVector
                 * @param   {Function}                                   T         
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    vector
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                SparseOfVector: function (T, vector) {
                    var v_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Vector;

                    return v_builder.SparseOfVector(vector);
                },
                /**
                 * Create a new sparse vector as a copy of the given array.
                 This new vector will be independent from the array.
                 A new memory block will be allocated for storing the vector.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateVector
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateVector
                 * @param   {Function}                                   T        
                 * @param   {Array.<T>}                                  array
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                SparseOfArray: function (T, array) {
                    var v_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Vector;

                    return v_builder.SparseOfArray(array);
                },
                /**
                 * Create a new sparse vector as a copy of the given enumerable.
                 This new vector will be independent from the enumerable.
                 A new memory block will be allocated for storing the vector.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateVector
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateVector
                 * @param   {Function}                                    T             
                 * @param   {System.Collections.Generic.IEnumerable$1}    enumerable
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                SparseOfEnumerable: function (T, enumerable) {
                    var v_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Vector;

                    return v_builder.SparseOfEnumerable(enumerable);
                },
                /**
                 * Create a new sparse vector as a copy of the given indexed enumerable.
                 Keys must be provided at most once, zero is assumed if a key is omitted.
                 This new vector will be independent from the enumerable.
                 A new memory block will be allocated for storing the vector.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.CreateVector
                 * @memberof MathNet.Numerics.LinearAlgebra.CreateVector
                 * @param   {Function}                                    T             
                 * @param   {number}                                      length        
                 * @param   {System.Collections.Generic.IEnumerable$1}    enumerable
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                SparseOfIndexed: function (T, length, enumerable) {
                    var v_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Vector;

                    return v_builder.SparseOfIndexed(length, enumerable);
                }
            }
        }
    });

    /**
     * @memberof System
     * @callback System.Action
     * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    arg
     * @return  {void}
     */

    /** @namespace MathNet.Numerics.LinearAlgebra */

    /**
     * Defines the base class for <pre><code>Matrix</code></pre> classes.
     *
     * @abstract
     * @public
     * @class MathNet.Numerics.LinearAlgebra.Matrix$1
     * @implements  System.IFormattable
     * @implements  System.IEquatable$1
     * @implements  System.ICloneable
     */
    Bridge.define("MathNet.Numerics.LinearAlgebra.Matrix$1", function (T) { return {
        inherits: function () { return [System.IFormattable,System.IEquatable$1(MathNet.Numerics.LinearAlgebra.Matrix$1(T)),System.ICloneable]; },
        statics: {
            fields: {
                /**
                 * The value of 1.0.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @type T
                 */
                One: null,
                /**
                 * The value of 0.0.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @type T
                 */
                Zero: null
            },
            ctors: {
                init: function () {
                    this.One = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix.One;
                    this.Zero = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix.Zero;
                }
            },
            methods: {
                IntPower: function (exponent, x, y, work) {


                    if (exponent === 1) {
                        if (y == null) {
                            return x;
                        }

                        if (work == null) {
                            work = y.Multiply$1(x);
                        } else {
                            y.Multiply$4(x, work);
                        }
                        return work;
                    }

                    if (exponent === 2) {
                        if (work == null) {
                            work = x.Multiply$1(x);
                        } else {
                            x.Multiply$4(x, work);
                        }

                        if (y == null) {
                            return work;
                        }

                        y.Multiply$4(work, x);
                        return x;
                    }

                    if (MathNet.Numerics.Euclid.IsEven(exponent)) {
                        if (work == null) {
                            work = x.Multiply$1(x);
                        } else {
                            x.Multiply$4(x, work);
                        }
                        return MathNet.Numerics.LinearAlgebra.Matrix$1(T).IntPower(((Bridge.Int.div(exponent, 2)) | 0), work, y, x);
                    }

                    if (y == null) {
                        if (work == null) {
                            work = x.Multiply$1(x);
                        } else {
                            x.Multiply$4(x, work);
                        }
                        return MathNet.Numerics.LinearAlgebra.Matrix$1(T).IntPower(((Bridge.Int.div((((exponent - 1) | 0)), 2)) | 0), work, x, null);
                    }

                    if (work == null) {
                        work = y.Multiply$1(x);
                    } else {
                        y.Multiply$4(x, work);
                    }
                    x.Multiply$4(x, y);
                    return MathNet.Numerics.LinearAlgebra.Matrix$1(T).IntPower(((Bridge.Int.div((((exponent - 1) | 0)), 2)) | 0), y, work, x);
                },
                DimensionsDontMatch$1: function (TException, left, right, result, paramName) {
                    if (paramName === void 0) { paramName = null; }
                    var message = System.String.format("Resources.ArgumentMatrixDimensions3", left.RowCount + "x" + left.ColumnCount, right.RowCount + "x" + right.ColumnCount, result.RowCount + "x" + result.ColumnCount);
                    return MathNet.Numerics.LinearAlgebra.Matrix$1(T).CreateException(TException, message, paramName);
                },
                DimensionsDontMatch$2: function (TException, left, right, paramName) {
                    if (paramName === void 0) { paramName = null; }
                    var message = System.String.format("Resources.ArgumentMatrixDimensions2", left.RowCount + "x" + left.ColumnCount, right.RowCount + "x" + right.ColumnCount);
                    return MathNet.Numerics.LinearAlgebra.Matrix$1(T).CreateException(TException, message, paramName);
                },
                DimensionsDontMatch: function (TException, matrix) {
                    var message = System.String.format("Resources.ArgumentMatrixDimensions1", [matrix.RowCount + "x" + matrix.ColumnCount]);
                    return MathNet.Numerics.LinearAlgebra.Matrix$1(T).CreateException(TException, message);
                },
                DimensionsDontMatch$3: function (TException, left, right, result, paramName) {
                    if (paramName === void 0) { paramName = null; }
                    return MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$1(TException, left, right.ToColumnMatrix(), result.ToColumnMatrix(), paramName);
                },
                DimensionsDontMatch$4: function (TException, left, right, paramName) {
                    if (paramName === void 0) { paramName = null; }
                    return MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(TException, left, right.ToColumnMatrix(), paramName);
                },
                DimensionsDontMatch$5: function (TException, left, right, paramName) {
                    if (paramName === void 0) { paramName = null; }
                    return MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(TException, left.ToColumnMatrix(), right, paramName);
                },
                DimensionsDontMatch$6: function (TException, left, right, paramName) {
                    if (paramName === void 0) { paramName = null; }
                    return MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(TException, left.ToColumnMatrix(), right.ToColumnMatrix(), paramName);
                },
                CreateException: function (TException, message, paramName) {
                    if (paramName === void 0) { paramName = null; }
                    if (Bridge.referenceEquals(TException, System.ArgumentException)) {
                        return new System.ArgumentException.$ctor3(message, paramName);
                    }
                    if (Bridge.referenceEquals(TException, System.ArgumentOutOfRangeException)) {
                        return new System.ArgumentOutOfRangeException.$ctor4(paramName, message);
                    }
                    return new System.Exception(message);
                },
                FormatStringArrayToString: function (array, columnSeparator, rowSeparator) {
                    var rows = System.Array.getLength(array, 0);
                    var cols = System.Array.getLength(array, 1);

                    var widths = System.Array.init(cols, 0, System.Int32);
                    for (var i = 0; i < rows; i = (i + 1) | 0) {
                        for (var j = 0; j < cols; j = (j + 1) | 0) {
                            widths[System.Array.index(j, widths)] = Math.max(widths[System.Array.index(j, widths)], array.get([i, j]).length);
                        }
                    }

                    var sb = new System.Text.StringBuilder();
                    for (var i1 = 0; i1 < rows; i1 = (i1 + 1) | 0) {
                        sb.append(System.String.alignString(array.get([i1, 0]), widths[System.Array.index(0, widths)]));
                        for (var j1 = 1; j1 < cols; j1 = (j1 + 1) | 0) {
                            sb.append(columnSeparator);
                            sb.append(System.String.alignString(array.get([i1, j1]), widths[System.Array.index(j1, widths)]));
                        }
                        sb.append(rowSeparator);
                    }
                    return sb.toString();
                },
                op_DotMultiply: function (x, y) {
                    return x.PointwiseMultiply(y);
                },
                op_DotDivide: function (dividend, divisor) {
                    return dividend.PointwiseDivide(divisor);
                },
                op_DotPercent: function (dividend, divisor) {
                    return dividend.PointwiseRemainder(divisor);
                },
                op_DotHat$1: function (matrix, exponent) {
                    return matrix.PointwisePower$1(exponent);
                },
                op_DotHat: function (matrix, exponent) {
                    return matrix.PointwisePower(exponent);
                },
                /**
                 * Computes the sqrt of a matrix pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    x    The input matrix
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Sqrt: function (x) {
                    return x.PointwiseSqrt();
                },
                /**
                 * Computes the exponential of a matrix pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    x    The input matrix
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Exp: function (x) {
                    return x.PointwiseExp();
                },
                /**
                 * Computes the log of a matrix pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    x    The input matrix
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Log: function (x) {
                    return x.PointwiseLog();
                },
                /**
                 * Computes the log10 of a matrix pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    x    The input matrix
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Log10: function (x) {
                    return x.PointwiseLog10();
                },
                /**
                 * Computes the sin of a matrix pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    x    The input matrix
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Sin: function (x) {
                    return x.PointwiseSin();
                },
                /**
                 * Computes the cos of a matrix pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    x    The input matrix
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Cos: function (x) {
                    return x.PointwiseCos();
                },
                /**
                 * Computes the tan of a matrix pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    x    The input matrix
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Tan: function (x) {
                    return x.PointwiseTan();
                },
                /**
                 * Computes the asin of a matrix pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    x    The input matrix
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Asin: function (x) {
                    return x.PointwiseAsin();
                },
                /**
                 * Computes the acos of a matrix pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    x    The input matrix
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Acos: function (x) {
                    return x.PointwiseAcos();
                },
                /**
                 * Computes the atan of a matrix pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    x    The input matrix
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Atan: function (x) {
                    return x.PointwiseAtan();
                },
                /**
                 * Computes the sinh of a matrix pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    x    The input matrix
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Sinh: function (x) {
                    return x.PointwiseSinh();
                },
                /**
                 * Computes the cosh of a matrix pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    x    The input matrix
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Cosh: function (x) {
                    return x.PointwiseCosh();
                },
                /**
                 * Computes the tanh of a matrix pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    x    The input matrix
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Tanh: function (x) {
                    return x.PointwiseTanh();
                },
                /**
                 * Computes the absolute value of a matrix pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    x    The input matrix
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Abs: function (x) {
                    return x.PointwiseAbs();
                },
                /**
                 * Computes the floor of a matrix pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    x    The input matrix
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Floor: function (x) {
                    return x.PointwiseFloor();
                },
                /**
                 * Computes the ceiling of a matrix pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    x    The input matrix
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Ceiling: function (x) {
                    return x.PointwiseCeiling();
                },
                /**
                 * Computes the rounded value of a matrix pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    x    The input matrix
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Round: function (x) {
                    return x.PointwiseRound();
                }/**
                 * Returns a <strong>Matrix</strong> containing the same values of <b />.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    rightSide    The matrix to get the values from.
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}                 A matrix containing a the same values as <b />.
                 */
                ,
                op_UnaryPlus: function (rightSide) {
                    return rightSide.Clone();
                }/**
                 * Negates each element of the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    rightSide    The matrix to negate.
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}                 A matrix containing the negated values.
                 */
                ,
                op_UnaryNegation: function (rightSide) {
                    return rightSide.Negate();
                }/**
                 * Adds two matrices together and returns the results.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @throws If <b /> and <b /> don't have the same dimensions.
                 * @throws If <b /> or <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    leftSide     The left matrix to add.
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    rightSide    The right matrix to add.
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}                 The result of the addition.
                 */
                ,
                op_Addition$2: function (leftSide, rightSide) {
                    return leftSide.Add$1(rightSide);
                }/**
                 * Adds a scalar to each element of the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    leftSide     The left matrix to add.
                 * @param   {T}                                          rightSide    The scalar value to add.
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}                 The result of the addition.
                 */
                ,
                op_Addition$1: function (leftSide, rightSide) {
                    return leftSide.Add(rightSide);
                }/**
                 * Adds a scalar to each element of the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {T}                                          leftSide     The scalar value to add.
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    rightSide    The right matrix to add.
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}                 The result of the addition.
                 */
                ,
                op_Addition: function (leftSide, rightSide) {
                    return rightSide.Add(leftSide);
                }/**
                 * Subtracts two matrices together and returns the results.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @throws If <b /> and <b /> don't have the same dimensions.
                 * @throws If <b /> or <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    leftSide     The left matrix to subtract.
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    rightSide    The right matrix to subtract.
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}                 The result of the subtraction.
                 */
                ,
                op_Subtraction$2: function (leftSide, rightSide) {
                    return leftSide.Subtract$1(rightSide);
                }/**
                 * Subtracts a scalar from each element of a matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @throws If <b /> and <b /> don't have the same dimensions.
                 * @throws If <b /> or <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    leftSide     The left matrix to subtract.
                 * @param   {T}                                          rightSide    The scalar value to subtract.
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}                 The result of the subtraction.
                 */
                ,
                op_Subtraction$1: function (leftSide, rightSide) {
                    return leftSide.Subtract(rightSide);
                }/**
                 * Subtracts each element of a matrix from a scalar.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @throws If <b /> and <b /> don't have the same dimensions.
                 * @throws If <b /> or <b /> is {@link ArgumentNullException}.
                 * @param   {T}                                          leftSide     The scalar value to subtract.
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    rightSide    The right matrix to subtract.
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}                 The result of the subtraction.
                 */
                ,
                op_Subtraction: function (leftSide, rightSide) {
                    return rightSide.SubtractFrom(leftSide);
                }/**
                 * Multiplies a <strong>Matrix</strong> by a constant and returns the result.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    leftSide     The matrix to multiply.
                 * @param   {T}                                          rightSide    The constant to multiply the matrix by.
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}                 The result of the multiplication.
                 */
                ,
                op_Multiply$1: function (leftSide, rightSide) {
                    return leftSide.Multiply(rightSide);
                }/**
                 * Multiplies a <strong>Matrix</strong> by a constant and returns the result.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {T}                                          leftSide     The matrix to multiply.
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    rightSide    The constant to multiply the matrix by.
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}                 The result of the multiplication.
                 */
                ,
                op_Multiply: function (leftSide, rightSide) {
                    return rightSide.Multiply(leftSide);
                }/**
                 * Multiplies two matrices.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @throws If <b /> or <b /> is {@link ArgumentNullException}.
                 * @throws If the dimensions of <b /> or <b /> don't conform.
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    leftSide     The left matrix to multiply.
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    rightSide    The right matrix to multiply.
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}                 The result of multiplication.
                 */
                ,
                op_Multiply$2: function (leftSide, rightSide) {
                    return leftSide.Multiply$1(rightSide);
                }/**
                 * Multiplies a <strong>Matrix</strong> and a Vector.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @throws If <b /> or <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    leftSide     The matrix to multiply.
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    rightSide    The vector to multiply.
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}                 The result of multiplication.
                 */
                ,
                op_Multiply$3: function (leftSide, rightSide) {
                    return leftSide.Multiply$2(rightSide);
                }/**
                 * Multiplies a Vector and a <strong>Matrix</strong>.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @throws If <b /> or <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    leftSide     The vector to multiply.
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    rightSide    The matrix to multiply.
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}                 The result of multiplication.
                 */
                ,
                op_Multiply$4: function (leftSide, rightSide) {
                    return rightSide.LeftMultiply(leftSide);
                }/**
                 * Divides a scalar with a matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {T}                                          dividend    The scalar to divide.
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    divisor     The matrix.
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}                The result of the division.
                 */
                ,
                op_Division: function (dividend, divisor) {
                    return divisor.DivideByThis(dividend);
                }/**
                 * Divides a matrix with a scalar.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    dividend    The matrix to divide.
                 * @param   {T}                                          divisor     The scalar value.
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}                The result of the division.
                 */
                ,
                op_Division$1: function (dividend, divisor) {
                    return dividend.Divide(divisor);
                }/**
                 * Computes the pointwise remainder (% operator), where the result has the sign of the dividend,
                 of each element of the matrix of the given divisor.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    dividend    The matrix whose elements we want to compute the modulus of.
                 * @param   {T}                                          divisor     The divisor to use.
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}                The result of the calculation
                 */
                ,
                op_Modulus$1: function (dividend, divisor) {
                    return dividend.Remainder(divisor);
                }/**
                 * Computes the pointwise remainder (% operator), where the result has the sign of the dividend,
                 of the given dividend of each element of the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {T}                                          dividend    The dividend we want to compute the modulus of.
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    divisor     The matrix whose elements we want to use as divisor.
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}                The result of the calculation
                 */
                ,
                op_Modulus: function (dividend, divisor) {
                    return divisor.RemainderByThis(dividend);
                }/**
                 * Computes the pointwise remainder (% operator), where the result has the sign of the dividend,
                 of each element of two matrices.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
                 * @throws If <b /> and <b /> are not the same size.
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    dividend    The matrix whose elements we want to compute the remainder of.
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    divisor     The divisor to use.
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                ,
                op_Modulus$2: function (dividend, divisor) {
                    return dividend.PointwiseRemainder(divisor);
                }
            }
        },
        fields: {
            v_builder: null,
            m_builder: null,
            /**
             * Gets the raw matrix data storage.
             *
             * @instance
             * @public
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @function Storage
             * @type MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1
             */
            Storage: null,
            /**
             * Gets the number of columns.
             *
             * @instance
             * @public
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @function ColumnCount
             * @type number
             */
            ColumnCount: 0,
            /**
             * Gets the number of rows.
             *
             * @instance
             * @public
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @function RowCount
             * @type number
             */
            RowCount: 0
        },
        alias: [
            "equalsT", "System$IEquatable$1$MathNet$Numerics$LinearAlgebra$Matrix$1$" + Bridge.getTypeAlias(T) + "$equalsT",
            "format", "System$IFormattable$format"
        ],
        ctors: {
            init: function () {
                this.v_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Vector;
                this.m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
            },
            /**
             * Initializes a new instance of the Matrix class.
             *
             * @instance
             * @protected
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1}    storage
             * @return  {void}
             */
            ctor: function (storage) {
                this.$initialize();
                this.Storage = storage;
                this.RowCount = storage.RowCount;
                this.ColumnCount = storage.ColumnCount;
            }
        },
        methods: {
            /**
             * Gets or sets the value at the given row and column, with range checking.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {number}    row       The row of the element.
             * @param   {number}    column    The column of the element.
             * @return  {T}
             */
            getItem: function (row, column) {
                return this.Storage.getItem(row, column);
            },
            /**
             * Gets or sets the value at the given row and column, with range checking.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {number}    row       The row of the element.
             * @param   {number}    column    The column of the element.
             * @param   {T}         value     The value to get or set.
             * @return  {void}
             */
            setItem: function (row, column, value) {
                this.Storage.setItem(row, column, value);
            },
            /**
             * Subtracts each element of the matrix from a scalar and stores the result in the result matrix.
             *
             * @instance
             * @protected
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {T}                                          scalar    The scalar to subtract from.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result of the subtraction.
             * @return  {void}
             */
            DoSubtractFrom: function (scalar, result) {
                this.DoNegate(result);
                result.DoAdd(scalar, result);
            },
            /**
             * Adds a scalar to each element of the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If the two matrices don't have the same dimensions.
             * @param   {T}                                          scalar    The scalar to add.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}              The result of the addition.
             */
            Add: function (scalar) {
                if (Bridge.equals(scalar, MathNet.Numerics.LinearAlgebra.Matrix$1(T).Zero)) {
                    return this.Clone();
                }

                var result = this.m_builder.SameAs$3(T, this);
                this.DoAdd(scalar, result);
                return result;
            },
            /**
             * Adds a scalar to each element of the matrix and stores the result in the result matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If the two matrices don't have the same dimensions.
             * @param   {T}                                          scalar    The scalar to add.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result of the addition.
             * @return  {void}
             */
            Add$2: function (scalar, result) {
                if (result.RowCount !== this.RowCount || result.ColumnCount !== this.ColumnCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentOutOfRangeException, this, result, "result");
                }

                if (Bridge.equals(scalar, MathNet.Numerics.LinearAlgebra.Matrix$1(T).Zero)) {
                    this.CopyTo(result);
                    return;
                }

                this.DoAdd(scalar, result);
            },
            /**
             * Adds another matrix to this matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If the two matrices don't have the same dimensions.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other    The matrix to add to this matrix.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}             The result of the addition.
             */
            Add$1: function (other) {
                if (other.RowCount !== this.RowCount || other.ColumnCount !== this.ColumnCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentOutOfRangeException, this, other);
                }

                var result = this.m_builder.SameAs$1(this, other, this.RowCount, this.ColumnCount);
                this.DoAdd$1(other, result);
                return result;
            },
            /**
             * Adds another matrix to this matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If the two matrices don't have the same dimensions.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix to add to this matrix.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result of the addition.
             * @return  {void}
             */
            Add$3: function (other, result) {
                if (other.RowCount !== this.RowCount || other.ColumnCount !== this.ColumnCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentOutOfRangeException, this, other, "other");
                }

                if (result.RowCount !== this.RowCount || result.ColumnCount !== this.ColumnCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentOutOfRangeException, this, result, "result");
                }

                this.DoAdd$1(other, result);
            },
            /**
             * Subtracts a scalar from each element of the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {T}                                          scalar    The scalar to subtract.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}              A new matrix containing the subtraction of this matrix and the scalar.
             */
            Subtract: function (scalar) {
                if (Bridge.equals(scalar, MathNet.Numerics.LinearAlgebra.Matrix$1(T).Zero)) {
                    return this.Clone();
                }

                var result = this.m_builder.SameAs$3(T, this);
                this.DoSubtract(scalar, result);
                return result;
            },
            /**
             * Subtracts a scalar from each element of the matrix and stores the result in the result matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If this matrix and <b /> are not the same size.
             * @param   {T}                                          scalar    The scalar to subtract.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result of the subtraction.
             * @return  {void}
             */
            Subtract$2: function (scalar, result) {
                if (result.RowCount !== this.RowCount || result.ColumnCount !== this.ColumnCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentOutOfRangeException, this, result, "result");
                }

                if (Bridge.equals(scalar, MathNet.Numerics.LinearAlgebra.Matrix$1(T).Zero)) {
                    this.CopyTo(result);
                    return;
                }

                this.DoSubtract(scalar, result);
            },
            /**
             * Subtracts another matrix from this matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If the two matrices don't have the same dimensions.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other    The matrix to subtract.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}             The result of the subtraction.
             */
            Subtract$1: function (other) {
                if (other.RowCount !== this.RowCount || other.ColumnCount !== this.ColumnCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentOutOfRangeException, this, other);
                }

                var result = this.m_builder.SameAs$1(this, other, this.RowCount, this.ColumnCount);
                this.DoSubtract$1(other, result);
                return result;
            },
            /**
             * Subtracts another matrix from this matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If the two matrices don't have the same dimensions.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix to subtract.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result of the subtraction.
             * @return  {void}
             */
            Subtract$3: function (other, result) {
                if (other.RowCount !== this.RowCount || other.ColumnCount !== this.ColumnCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentOutOfRangeException, this, other, "other");
                }

                if (result.RowCount !== this.RowCount || result.ColumnCount !== this.ColumnCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentOutOfRangeException, this, result, "result");
                }

                this.DoSubtract$1(other, result);
            },
            /**
             * Subtracts each element of the matrix from a scalar.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {T}                                          scalar    The scalar to subtract from.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}              A new matrix containing the subtraction of the scalar and this matrix.
             */
            SubtractFrom: function (scalar) {
                var result = this.m_builder.SameAs$3(T, this);
                this.DoSubtractFrom(scalar, result);
                return result;
            },
            /**
             * Subtracts each element of the matrix from a scalar and stores the result in the result matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If this matrix and <b /> are not the same size.
             * @param   {T}                                          scalar    The scalar to subtract from.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result of the subtraction.
             * @return  {void}
             */
            SubtractFrom$1: function (scalar, result) {
                if (result.RowCount !== this.RowCount || result.ColumnCount !== this.ColumnCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentOutOfRangeException, this, result, "result");
                }

                this.DoSubtractFrom(scalar, result);
            },
            /**
             * Multiplies each element of this matrix with a scalar.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {T}                                          scalar    The scalar to multiply with.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}              The result of the multiplication.
             */
            Multiply: function (scalar) {
                if (Bridge.equals(scalar, MathNet.Numerics.LinearAlgebra.Matrix$1(T).One)) {
                    return this.Clone();
                }

                if (Bridge.equals(scalar, MathNet.Numerics.LinearAlgebra.Matrix$1(T).Zero)) {
                    return this.m_builder.SameAs$3(T, this);
                }

                var result = this.m_builder.SameAs$3(T, this);
                this.DoMultiply(scalar, result);
                return result;
            },
            /**
             * Multiplies each element of the matrix by a scalar and places results into the result matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If the result matrix's dimensions are not the same as this matrix.
             * @param   {T}                                          scalar    The scalar to multiply the matrix with.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result of the multiplication.
             * @return  {void}
             */
            Multiply$3: function (scalar, result) {
                if (result.RowCount !== this.RowCount) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentMatrixSameRowDimension", "result");
                }

                if (result.ColumnCount !== this.ColumnCount) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentMatrixSameColumnDimension", "result");
                }

                if (Bridge.equals(scalar, MathNet.Numerics.LinearAlgebra.Matrix$1(T).One)) {
                    this.CopyTo(result);
                    return;
                }

                if (Bridge.equals(scalar, MathNet.Numerics.LinearAlgebra.Matrix$1(T).Zero)) {
                    result.Clear();
                    return;
                }

                this.DoMultiply(scalar, result);
            },
            /**
             * Multiplies this matrix by a vector and returns the result.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <pre><code>this.ColumnCount != rightSide.Count</code></pre>.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    rightSide    The vector to multiply with.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}                 The result of the multiplication.
             */
            Multiply$2: function (rightSide) {
                if (this.ColumnCount !== rightSide.Count) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$4(System.ArgumentException, this, rightSide, "rightSide");
                }

                var ret = this.v_builder.SameAs(this, rightSide, this.RowCount);
                this.DoMultiply$2(rightSide, ret);
                return ret;
            },
            /**
             * Multiplies this matrix with a vector and places the results into the result vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <strong>result.Count != this.RowCount</strong>.
             * @throws If <strong>this.ColumnCount != <paramref name="rightSide" />.Count</strong>.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    rightSide    The vector to multiply with.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result       The result of the multiplication.
             * @return  {void}
             */
            Multiply$5: function (rightSide, result) {
                if (this.ColumnCount !== rightSide.Count) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$4(System.ArgumentException, this, rightSide, "rightSide");
                }

                if (this.RowCount !== result.Count) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$4(System.ArgumentException, this, result, "result");
                }

                if (Bridge.referenceEquals(rightSide, result)) {
                    var tmp = this.v_builder.SameAs$4(T, result);
                    this.DoMultiply$2(rightSide, tmp);
                    tmp.CopyTo(result);
                } else {
                    this.DoMultiply$2(rightSide, result);
                }
            },
            /**
             * Multiplies this matrix with another matrix and places the results into the result matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <strong>this.Columns != other.Rows</strong>.
             * @throws If the result matrix's dimensions are not the this.Rows x other.Columns.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix to multiply with.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The result of the multiplication.
             * @return  {void}
             */
            Multiply$4: function (other, result) {
                if (this.ColumnCount !== other.RowCount || result.RowCount !== this.RowCount || result.ColumnCount !== other.ColumnCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$1(System.ArgumentException, this, other, result);
                }

                if (Bridge.referenceEquals(this, result) || Bridge.referenceEquals(other, result)) {
                    var tmp = this.m_builder.SameAs$3(T, result);
                    this.DoMultiply$1(other, tmp);
                    tmp.CopyTo(result);
                } else {
                    this.DoMultiply$1(other, result);
                }
            },
            /**
             * Multiplies this matrix with another matrix and returns the result.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <strong>this.Columns != other.Rows</strong>.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other    The matrix to multiply with.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}             The result of the multiplication.
             */
            Multiply$1: function (other) {
                if (this.ColumnCount !== other.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentException, this, other);
                }

                var result = this.m_builder.SameAs$1(this, other, this.RowCount, other.ColumnCount);
                this.DoMultiply$1(other, result);
                return result;
            },
            /**
             * Divides each element of this matrix with a scalar.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {T}                                          scalar    The scalar to divide with.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}              The result of the division.
             */
            Divide: function (scalar) {
                if (Bridge.equals(scalar, MathNet.Numerics.LinearAlgebra.Matrix$1(T).One)) {
                    return this.Clone();
                }

                if (Bridge.equals(scalar, MathNet.Numerics.LinearAlgebra.Matrix$1(T).Zero)) {
                    throw new System.DivideByZeroException.ctor();
                }

                var result = this.m_builder.SameAs$3(T, this);
                this.DoDivide(scalar, result);
                return result;
            },
            /**
             * Divides each element of the matrix by a scalar and places results into the result matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If the result matrix's dimensions are not the same as this matrix.
             * @param   {T}                                          scalar    The scalar to divide the matrix with.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result of the division.
             * @return  {void}
             */
            Divide$1: function (scalar, result) {
                if (result.RowCount !== this.RowCount) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentMatrixSameRowDimension", "result");
                }

                if (result.ColumnCount !== this.ColumnCount) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentMatrixSameColumnDimension", "result");
                }

                if (Bridge.equals(scalar, MathNet.Numerics.LinearAlgebra.Matrix$1(T).One)) {
                    this.CopyTo(result);
                    return;
                }

                if (Bridge.equals(scalar, MathNet.Numerics.LinearAlgebra.Matrix$1(T).Zero)) {
                    throw new System.DivideByZeroException.ctor();
                }

                this.DoDivide(scalar, result);
            },
            /**
             * Divides a scalar by each element of the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {T}                                          scalar    The scalar to divide.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}              The result of the division.
             */
            DivideByThis: function (scalar) {
                var result = this.m_builder.SameAs$3(T, this);
                this.DoDivideByThis(scalar, result);
                return result;
            },
            /**
             * Divides a scalar by each element of the matrix and places results into the result matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If the result matrix's dimensions are not the same as this matrix.
             * @param   {T}                                          scalar    The scalar to divide.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result of the division.
             * @return  {void}
             */
            DivideByThis$1: function (scalar, result) {
                if (result.RowCount !== this.RowCount) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentMatrixSameRowDimension", "result");
                }

                if (result.ColumnCount !== this.ColumnCount) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentMatrixSameColumnDimension", "result");
                }

                this.DoDivideByThis(scalar, result);
            },
            /**
             * Left multiply a matrix with a vector ( = vector * matrix ).
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <strong>this.RowCount != <paramref name="leftSide" />.Count</strong>.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    leftSide    The vector to multiply with.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}                The result of the multiplication.
             */
            LeftMultiply: function (leftSide) {
                if (this.RowCount !== leftSide.Count) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$4(System.ArgumentException, this, leftSide, "leftSide");
                }

                var ret = this.v_builder.SameAs(this, leftSide, this.ColumnCount);
                this.DoLeftMultiply(leftSide, ret);
                return ret;
            },
            /**
             * Left multiply a matrix with a vector ( = vector * matrix ) and place the result in the result vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <strong>result.Count != this.ColumnCount</strong>.
             * @throws If <strong>this.RowCount != <paramref name="leftSide" />.Count</strong>.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    leftSide    The vector to multiply with.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result      The result of the multiplication.
             * @return  {void}
             */
            LeftMultiply$1: function (leftSide, result) {
                if (this.RowCount !== leftSide.Count) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$4(System.ArgumentException, this, leftSide, "leftSide");
                }

                if (this.ColumnCount !== result.Count) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$4(System.ArgumentException, this, result, "result");
                }

                if (Bridge.referenceEquals(leftSide, result)) {
                    var tmp = this.v_builder.SameAs$4(T, result);
                    this.DoLeftMultiply(leftSide, tmp);
                    tmp.CopyTo(result);
                } else {
                    this.DoLeftMultiply(leftSide, result);
                }
            },
            /**
             * Left multiply a matrix with a vector ( = vector * matrix ) and place the result in the result vector.
             *
             * @instance
             * @protected
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    leftSide    The vector to multiply with.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result      The result of the multiplication.
             * @return  {void}
             */
            DoLeftMultiply: function (leftSide, result) {
                this.DoTransposeThisAndMultiply$1(leftSide, result);
            },
            /**
             * Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <strong>this.Columns != other.ColumnCount</strong>.
             * @throws If the result matrix's dimensions are not the this.RowCount x other.RowCount.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix to multiply with.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The result of the multiplication.
             * @return  {void}
             */
            TransposeAndMultiply$1: function (other, result) {
                if (this.ColumnCount !== other.ColumnCount || result.RowCount !== this.RowCount || result.ColumnCount !== other.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$1(System.ArgumentException, this, other, result);
                }

                if (Bridge.referenceEquals(this, result) || Bridge.referenceEquals(other, result)) {
                    var tmp = this.m_builder.SameAs$3(T, result);
                    this.DoTransposeAndMultiply(other, tmp);
                    tmp.CopyTo(result);
                } else {
                    this.DoTransposeAndMultiply(other, result);
                }
            },
            /**
             * Multiplies this matrix with transpose of another matrix and returns the result.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <strong>this.Columns != other.ColumnCount</strong>.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other    The matrix to multiply with.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}             The result of the multiplication.
             */
            TransposeAndMultiply: function (other) {
                if (this.ColumnCount !== other.ColumnCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentException, this, other);
                }

                var result = this.m_builder.SameAs$1(this, other, this.RowCount, other.RowCount);
                this.DoTransposeAndMultiply(other, result);
                return result;
            },
            /**
             * Multiplies the transpose of this matrix by a vector and returns the result.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <pre><code>this.RowCount != rightSide.Count</code></pre>.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    rightSide    The vector to multiply with.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}                 The result of the multiplication.
             */
            TransposeThisAndMultiply$1: function (rightSide) {
                if (this.RowCount !== rightSide.Count) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$4(System.ArgumentException, this, rightSide, "rightSide");
                }

                var result = this.v_builder.SameAs(this, rightSide, this.ColumnCount);
                this.DoTransposeThisAndMultiply$1(rightSide, result);
                return result;
            },
            /**
             * Multiplies the transpose of this matrix with a vector and places the results into the result vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <strong>result.Count != this.ColumnCount</strong>.
             * @throws If <strong>this.RowCount != <paramref name="rightSide" />.Count</strong>.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    rightSide    The vector to multiply with.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result       The result of the multiplication.
             * @return  {void}
             */
            TransposeThisAndMultiply$3: function (rightSide, result) {
                if (this.RowCount !== rightSide.Count) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$4(System.ArgumentException, this, rightSide, "rightSide");
                }

                if (this.ColumnCount !== result.Count) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$4(System.ArgumentException, this, result, "result");
                }

                if (Bridge.referenceEquals(rightSide, result)) {
                    var tmp = this.v_builder.SameAs$4(T, result);
                    this.DoTransposeThisAndMultiply$1(rightSide, tmp);
                    tmp.CopyTo(result);
                } else {
                    this.DoTransposeThisAndMultiply$1(rightSide, result);
                }
            },
            /**
             * Multiplies the transpose of this matrix with another matrix and places the results into the result matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <strong>this.Rows != other.RowCount</strong>.
             * @throws If the result matrix's dimensions are not the this.ColumnCount x other.ColumnCount.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix to multiply with.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The result of the multiplication.
             * @return  {void}
             */
            TransposeThisAndMultiply$2: function (other, result) {
                if (this.RowCount !== other.RowCount || result.RowCount !== this.ColumnCount || result.ColumnCount !== other.ColumnCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$1(System.ArgumentException, this, other, result);
                }

                if (Bridge.referenceEquals(this, result) || Bridge.referenceEquals(other, result)) {
                    var tmp = this.m_builder.SameAs$3(T, result);
                    this.DoTransposeThisAndMultiply(other, tmp);
                    tmp.CopyTo(result);
                } else {
                    this.DoTransposeThisAndMultiply(other, result);
                }
            },
            /**
             * Multiplies the transpose of this matrix with another matrix and returns the result.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <strong>this.Rows != other.RowCount</strong>.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other    The matrix to multiply with.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}             The result of the multiplication.
             */
            TransposeThisAndMultiply: function (other) {
                if (this.RowCount !== other.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentException, this, other);
                }

                var result = this.m_builder.SameAs$1(this, other, this.ColumnCount, other.ColumnCount);
                this.DoTransposeThisAndMultiply(other, result);
                return result;
            },
            /**
             * Multiplies this matrix with the conjugate transpose of another matrix and places the results into the result matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <strong>this.Columns != other.ColumnCount</strong>.
             * @throws If the result matrix's dimensions are not the this.RowCount x other.RowCount.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix to multiply with.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The result of the multiplication.
             * @return  {void}
             */
            ConjugateTransposeAndMultiply$1: function (other, result) {
                if (this.ColumnCount !== other.ColumnCount || result.RowCount !== this.RowCount || result.ColumnCount !== other.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$1(System.ArgumentException, this, other, result);
                }

                if (Bridge.referenceEquals(this, result) || Bridge.referenceEquals(other, result)) {
                    var tmp = this.m_builder.SameAs$3(T, result);
                    this.DoConjugateTransposeAndMultiply(other, tmp);
                    tmp.CopyTo(result);
                } else {
                    this.DoConjugateTransposeAndMultiply(other, result);
                }
            },
            /**
             * Multiplies this matrix with the conjugate transpose of another matrix and returns the result.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <strong>this.Columns != other.ColumnCount</strong>.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other    The matrix to multiply with.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}             The result of the multiplication.
             */
            ConjugateTransposeAndMultiply: function (other) {
                if (this.ColumnCount !== other.ColumnCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentException, this, other);
                }

                var result = this.m_builder.SameAs$1(this, other, this.RowCount, other.RowCount);
                this.DoConjugateTransposeAndMultiply(other, result);
                return result;
            },
            /**
             * Multiplies the conjugate transpose of this matrix by a vector and returns the result.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <pre><code>this.RowCount != rightSide.Count</code></pre>.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    rightSide    The vector to multiply with.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}                 The result of the multiplication.
             */
            ConjugateTransposeThisAndMultiply$1: function (rightSide) {
                if (this.RowCount !== rightSide.Count) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$4(System.ArgumentException, this, rightSide, "rightSide");
                }

                var result = this.v_builder.SameAs(this, rightSide, this.ColumnCount);
                this.DoConjugateTransposeThisAndMultiply$1(rightSide, result);
                return result;
            },
            /**
             * Multiplies the conjugate transpose of this matrix with a vector and places the results into the result vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <strong>result.Count != this.ColumnCount</strong>.
             * @throws If <strong>this.RowCount != <paramref name="rightSide" />.Count</strong>.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    rightSide    The vector to multiply with.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result       The result of the multiplication.
             * @return  {void}
             */
            ConjugateTransposeThisAndMultiply$3: function (rightSide, result) {
                if (this.RowCount !== rightSide.Count) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$4(System.ArgumentException, this, rightSide, "rightSide");
                }

                if (this.ColumnCount !== result.Count) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$4(System.ArgumentException, this, result, "result");
                }

                if (Bridge.referenceEquals(rightSide, result)) {
                    var tmp = this.v_builder.SameAs$4(T, result);
                    this.DoConjugateTransposeThisAndMultiply$1(rightSide, tmp);
                    tmp.CopyTo(result);
                } else {
                    this.DoConjugateTransposeThisAndMultiply$1(rightSide, result);
                }
            },
            /**
             * Multiplies the conjugate transpose of this matrix with another matrix and places the results into the result matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <strong>this.Rows != other.RowCount</strong>.
             * @throws If the result matrix's dimensions are not the this.ColumnCount x other.ColumnCount.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix to multiply with.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The result of the multiplication.
             * @return  {void}
             */
            ConjugateTransposeThisAndMultiply$2: function (other, result) {
                if (this.RowCount !== other.RowCount || result.RowCount !== this.ColumnCount || result.ColumnCount !== other.ColumnCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$1(System.ArgumentException, this, other, result);
                }

                if (Bridge.referenceEquals(this, result) || Bridge.referenceEquals(other, result)) {
                    var tmp = this.m_builder.SameAs$3(T, result);
                    this.DoConjugateTransposeThisAndMultiply(other, tmp);
                    tmp.CopyTo(result);
                } else {
                    this.DoConjugateTransposeThisAndMultiply(other, result);
                }
            },
            /**
             * Multiplies the conjugate transpose of this matrix with another matrix and returns the result.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <strong>this.Rows != other.RowCount</strong>.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other    The matrix to multiply with.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}             The result of the multiplication.
             */
            ConjugateTransposeThisAndMultiply: function (other) {
                if (this.RowCount !== other.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentException, this, other);
                }

                var result = this.m_builder.SameAs$1(this, other, this.ColumnCount, other.ColumnCount);
                this.DoConjugateTransposeThisAndMultiply(other, result);
                return result;
            },
            /**
             * Raises this square matrix to a positive integer exponent and places the results into the result matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {number}                                     exponent    The positive integer exponent to raise the matrix to.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result      The result of the power.
             * @return  {void}
             */
            Power$1: function (exponent, result) {
                if (this.RowCount !== this.ColumnCount || result.RowCount !== this.RowCount || result.ColumnCount !== this.ColumnCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentException, this, result);
                }
                if (exponent < 0) {
                    throw new System.ArgumentException.$ctor1("Resources.ArgumentNotNegative");
                }
                if (exponent === 0) {
                    this.m_builder.DiagonalIdentity$1(this.RowCount, this.ColumnCount).CopyTo(result);
                    return;
                }
                if (exponent === 1) {
                    this.CopyTo(result);
                    return;
                }
                if (exponent === 2) {
                    this.Multiply$4(this, result);
                    return;
                }

                var res = MathNet.Numerics.LinearAlgebra.Matrix$1(T).IntPower(exponent, this.Clone(), null, result);
                if (!Bridge.referenceEquals(res, result)) {
                    res.CopyTo(result);
                }
            },
            /**
             * Multiplies this square matrix with another matrix and returns the result.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {number}                                     exponent    The positive integer exponent to raise the matrix to.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            Power: function (exponent) {
                if (this.RowCount !== this.ColumnCount) {
                    throw new System.ArgumentException.$ctor1("Resources.ArgumentMatrixSquare");
                }
                if (exponent < 0) {
                    throw new System.ArgumentException.$ctor1("Resources.ArgumentNotNegative");
                }

                if (exponent === 0) {
                    return this.m_builder.DiagonalIdentity$1(this.RowCount, this.ColumnCount);
                }
                if (exponent === 1) {
                    return this;
                }
                if (exponent === 2) {
                    return this.Multiply$1(this);
                }

                return MathNet.Numerics.LinearAlgebra.Matrix$1(T).IntPower(exponent, this.Clone(), null, null);
            },
            /**
             * Negate each element of this matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}        A matrix containing the negated values.
             */
            Negate: function () {
                var result = this.m_builder.SameAs$3(T, this);
                this.DoNegate(result);
                return result;
            },
            /**
             * Negate each element of this matrix and place the results into the result matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws if the result matrix's dimensions are not the same as this matrix.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The result of the negation.
             * @return  {void}
             */
            Negate$1: function (result) {
                if (result.RowCount !== this.RowCount || result.ColumnCount !== this.ColumnCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentException, this, result);
                }

                this.DoNegate(result);
            },
            /**
             * Complex conjugate each element of this matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}        A matrix containing the conjugated values.
             */
            Conjugate: function () {
                var result = this.m_builder.SameAs$3(T, this);
                this.DoConjugate(result);
                return result;
            },
            /**
             * Complex conjugate each element of this matrix and place the results into the result matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws if the result matrix's dimensions are not the same as this matrix.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The result of the conjugation.
             * @return  {void}
             */
            Conjugate$1: function (result) {
                if (result.RowCount !== this.RowCount || result.ColumnCount !== this.ColumnCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentException, this, result);
                }

                this.DoConjugate(result);
            },
            /**
             * Computes the canonical modulus, where the result has the sign of the divisor,
             for each element of the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {T}                                          divisor    The scalar denominator to use.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}               A matrix containing the results.
             */
            Modulus: function (divisor) {
                var result = this.m_builder.SameAs$3(T, this);
                this.DoModulus(divisor, result);
                return result;
            },
            /**
             * Computes the canonical modulus, where the result has the sign of the divisor,
             for each element of the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {T}                                          divisor    The scalar denominator to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result     Matrix to store the results in.
             * @return  {void}
             */
            Modulus$1: function (divisor, result) {
                if (this.ColumnCount !== result.ColumnCount || this.RowCount !== result.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentException, this, result);
                }

                this.DoModulus(divisor, result);
            },
            /**
             * Computes the canonical modulus, where the result has the sign of the divisor,
             for each element of the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {T}                                          dividend    The scalar numerator to use.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}                A matrix containing the results.
             */
            ModulusByThis: function (dividend) {
                var result = this.m_builder.SameAs$3(T, this);
                this.DoModulusByThis(dividend, result);
                return result;
            },
            /**
             * Computes the canonical modulus, where the result has the sign of the divisor,
             for each element of the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {T}                                          dividend    The scalar numerator to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result      Matrix to store the results in.
             * @return  {void}
             */
            ModulusByThis$1: function (dividend, result) {
                if (this.ColumnCount !== result.ColumnCount || this.RowCount !== result.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentException, this, result);
                }

                this.DoModulusByThis(dividend, result);
            },
            /**
             * Computes the remainder (matrix % divisor), where the result has the sign of the dividend,
             for each element of the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {T}                                          divisor    The scalar denominator to use.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}               A matrix containing the results.
             */
            Remainder: function (divisor) {
                var result = this.m_builder.SameAs$3(T, this);
                this.DoRemainder(divisor, result);
                return result;
            },
            /**
             * Computes the remainder (matrix % divisor), where the result has the sign of the dividend,
             for each element of the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {T}                                          divisor    The scalar denominator to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result     Matrix to store the results in.
             * @return  {void}
             */
            Remainder$1: function (divisor, result) {
                if (this.ColumnCount !== result.ColumnCount || this.RowCount !== result.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentException, this, result);
                }

                this.DoRemainder(divisor, result);
            },
            /**
             * Computes the remainder (dividend % matrix), where the result has the sign of the dividend,
             for each element of the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {T}                                          dividend    The scalar numerator to use.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}                A matrix containing the results.
             */
            RemainderByThis: function (dividend) {
                var result = this.m_builder.SameAs$3(T, this);
                this.DoRemainderByThis(dividend, result);
                return result;
            },
            /**
             * Computes the remainder (dividend % matrix), where the result has the sign of the dividend,
             for each element of the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {T}                                          dividend    The scalar numerator to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result      Matrix to store the results in.
             * @return  {void}
             */
            RemainderByThis$1: function (dividend, result) {
                if (this.ColumnCount !== result.ColumnCount || this.RowCount !== result.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentException, this, result);
                }

                this.DoRemainderByThis(dividend, result);
            },
            /**
             * Pointwise multiplies this matrix with another matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If this matrix and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other    The matrix to pointwise multiply with this one.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}             A new matrix that is the pointwise multiplication of this matrix and <b />.
             */
            PointwiseMultiply: function (other) {
                if (this.ColumnCount !== other.ColumnCount || this.RowCount !== other.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentException, this, other, "other");
                }

                var result = this.m_builder.SameAs(this, other);
                this.DoPointwiseMultiply(other, result);
                return result;
            },
            /**
             * Pointwise multiplies this matrix with another matrix and stores the result into the result matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If this matrix and <b /> are not the same size.
             * @throws If this matrix and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix to pointwise multiply with this one.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result of the pointwise multiplication.
             * @return  {void}
             */
            PointwiseMultiply$1: function (other, result) {
                if (this.ColumnCount !== result.ColumnCount || this.RowCount !== result.RowCount || this.ColumnCount !== other.ColumnCount || this.RowCount !== other.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$1(System.ArgumentException, this, other, result);
                }

                this.DoPointwiseMultiply(other, result);
            },
            /**
             * Pointwise divide this matrix by another matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If this matrix and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    divisor    The pointwise denominator matrix to use.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}               A new matrix that is the pointwise division of this matrix and <b />.
             */
            PointwiseDivide: function (divisor) {
                if (this.ColumnCount !== divisor.ColumnCount || this.RowCount !== divisor.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentException, this, divisor);
                }

                var result = this.m_builder.SameAs(this, divisor);
                this.DoPointwiseDivide(divisor, result);
                return result;
            },
            /**
             * Pointwise divide this matrix by another matrix and stores the result into the result matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If this matrix and <b /> are not the same size.
             * @throws If this matrix and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    divisor    The pointwise denominator matrix to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result     The matrix to store the result of the pointwise division.
             * @return  {void}
             */
            PointwiseDivide$1: function (divisor, result) {
                if (this.ColumnCount !== result.ColumnCount || this.RowCount !== result.RowCount || this.ColumnCount !== divisor.ColumnCount || this.RowCount !== divisor.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$1(System.ArgumentException, this, divisor, result);
                }

                this.DoPointwiseDivide(divisor, result);
            },
            /**
             * Pointwise raise this matrix to an exponent and store the result into the result matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {T}                                          exponent    The exponent to raise this matrix values to.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            PointwisePower: function (exponent) {
                var result = this.m_builder.SameAs$3(T, this);
                this.DoPointwisePower(exponent, result);
                return result;
            },
            /**
             * Pointwise raise this matrix to an exponent.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If this matrix and <b /> are not the same size.
             * @param   {T}                                          exponent    The exponent to raise this matrix values to.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result      The matrix to store the result into.
             * @return  {void}
             */
            PointwisePower$2: function (exponent, result) {
                if (this.ColumnCount !== result.ColumnCount || this.RowCount !== result.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentException, this, result);
                }

                this.DoPointwisePower(exponent, result);
            },
            /**
             * Pointwise raise this matrix to an exponent and store the result into the result matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    exponent    The exponent to raise this matrix values to.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            PointwisePower$1: function (exponent) {
                if (this.ColumnCount !== exponent.ColumnCount || this.RowCount !== exponent.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentException, this, exponent);
                }

                var result = this.m_builder.SameAs$3(T, this);
                this.DoPointwisePower$1(exponent, result);
                return result;
            },
            /**
             * Pointwise raise this matrix to an exponent.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If this matrix and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    exponent    The exponent to raise this matrix values to.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result      The matrix to store the result into.
             * @return  {void}
             */
            PointwisePower$3: function (exponent, result) {
                if (this.ColumnCount !== result.ColumnCount || this.RowCount !== result.RowCount || this.ColumnCount !== exponent.ColumnCount || this.RowCount !== exponent.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$1(System.ArgumentException, this, exponent, result);
                }

                this.DoPointwisePower$1(exponent, result);
            },
            /**
             * Pointwise canonical modulus, where the result has the sign of the divisor,
             of this matrix by another matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If this matrix and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    divisor    The pointwise denominator matrix to use.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            PointwiseModulus: function (divisor) {
                if (this.ColumnCount !== divisor.ColumnCount || this.RowCount !== divisor.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentException, this, divisor);
                }

                var result = this.m_builder.SameAs(this, divisor);
                this.DoPointwiseModulus(divisor, result);
                return result;
            },
            /**
             * Pointwise canonical modulus, where the result has the sign of the divisor,
             of this matrix by another matrix and stores the result into the result matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If this matrix and <b /> are not the same size.
             * @throws If this matrix and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    divisor    The pointwise denominator matrix to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result     The matrix to store the result of the pointwise modulus.
             * @return  {void}
             */
            PointwiseModulus$1: function (divisor, result) {
                if (this.ColumnCount !== result.ColumnCount || this.RowCount !== result.RowCount || this.ColumnCount !== divisor.ColumnCount || this.RowCount !== divisor.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$1(System.ArgumentException, this, divisor, result);
                }

                this.DoPointwiseModulus(divisor, result);
            },
            /**
             * Pointwise remainder (% operator), where the result has the sign of the dividend,
             of this matrix by another matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If this matrix and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    divisor    The pointwise denominator matrix to use.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            PointwiseRemainder: function (divisor) {
                if (this.ColumnCount !== divisor.ColumnCount || this.RowCount !== divisor.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentException, this, divisor);
                }

                var result = this.m_builder.SameAs(this, divisor);
                this.DoPointwiseRemainder(divisor, result);
                return result;
            },
            /**
             * Pointwise remainder (% operator), where the result has the sign of the dividend,
             of this matrix by another matrix and stores the result into the result matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If this matrix and <b /> are not the same size.
             * @throws If this matrix and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    divisor    The pointwise denominator matrix to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result     The matrix to store the result of the pointwise remainder.
             * @return  {void}
             */
            PointwiseRemainder$1: function (divisor, result) {
                if (this.ColumnCount !== result.ColumnCount || this.RowCount !== result.RowCount || this.ColumnCount !== divisor.ColumnCount || this.RowCount !== divisor.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$1(System.ArgumentException, this, divisor, result);
                }

                this.DoPointwiseRemainder(divisor, result);
            },
            /**
             * Helper function to apply a unary function to a matrix. The function
             f modifies the matrix given to it in place.  Before its
             called, a copy of the 'this' matrix is first created, then passed to
             f.  The copy is then returned as the result
             *
             * @instance
             * @protected
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {System.Action}                              f    Function which takes a matrix, modifies it in place and returns void
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}         New instance of matrix which is the result
             */
            PointwiseUnary: function (f) {
                var result = this.m_builder.SameAs$3(T, this);
                f(result);
                return result;
            },
            /**
             * Helper function to apply a unary function which modifies a matrix
             in place.
             *
             * @instance
             * @protected
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If this vector and <b /> are not the same size.
             * @param   {System.Action}                              f         Function which takes a matrix, modifies it in place and returns void
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to be passed to f and where the result is to be stored
             * @return  {void}
             */
            PointwiseUnary$1: function (f, result) {
                if (this.ColumnCount !== result.ColumnCount || this.RowCount !== result.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentException, this, result);
                }
                f(result);
            },
            /**
             * Helper function to apply a binary function which takes two matrices
             and modifies the latter in place.  A copy of the "this" matrix is
             first made and then passed to f together with the other matrix. The
             copy is then returned as the result
             *
             * @instance
             * @protected
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If this matrix and <b /> are not the same dimension.
             * @param   {System.Action}                              f        Function which takes two matrices, modifies the second in place and returns void
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other    The other matrix to be passed to the function as argument. It is not modified
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}             The resulting matrix
             */
            PointwiseBinary: function (f, other) {
                if (this.ColumnCount !== other.ColumnCount || this.RowCount !== other.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentException, this, other);
                }

                var result = this.m_builder.SameAs(this, other);
                f(other, result);
                return result;
            },
            /**
             * Helper function to apply a binary function which takes two matrices
             and modifies the second one in place
             *
             * @instance
             * @protected
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If this matrix and <b /> are not the same dimension.
             * @param   {System.Action}                              f         Function which takes two matrices, modifies the second in place and returns void
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The other matrix to be passed to the function as argument. It is not modified
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result.
             * @return  {void}                                                 The resulting matrix
             */
            PointwiseBinary$1: function (f, other, result) {
                if (this.ColumnCount !== result.ColumnCount || this.RowCount !== result.RowCount || this.ColumnCount !== other.ColumnCount || this.RowCount !== other.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$1(System.ArgumentException, this, other, result);
                }

                f(other, result);
            },
            /**
             * Pointwise applies the exponent function to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            PointwiseExp: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseExp));
            },
            /**
             * Pointwise applies the exponent function to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If this matrix and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result.
             * @return  {void}
             */
            PointwiseExp$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseExp), result);
            },
            /**
             * Pointwise applies the natural logarithm function to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            PointwiseLog: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseLog));
            },
            /**
             * Pointwise applies the natural logarithm function to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If this matrix and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result.
             * @return  {void}
             */
            PointwiseLog$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseLog), result);
            },
            /**
             * Pointwise applies the abs function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            PointwiseAbs: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseAbs));
            },
            /**
             * Pointwise applies the abs function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseAbs$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseAbs), result);
            },
            /**
             * Pointwise applies the acos function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            PointwiseAcos: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseAcos));
            },
            /**
             * Pointwise applies the acos function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseAcos$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseAcos), result);
            },
            /**
             * Pointwise applies the asin function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            PointwiseAsin: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseAsin));
            },
            /**
             * Pointwise applies the asin function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseAsin$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseAsin), result);
            },
            /**
             * Pointwise applies the atan function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            PointwiseAtan: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseAtan));
            },
            /**
             * Pointwise applies the atan function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseAtan$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseAtan), result);
            },
            /**
             * Pointwise applies the atan2 function to each value of the current
             matrix and a given other matrix being the 'x' of atan2 and the
             'this' matrix being the 'y'
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            PointwiseAtan2: function (other) {
                return this.PointwiseBinary(Bridge.fn.cacheBind(this, this.DoPointwiseAtan2), other);
            },
            /**
             * Pointwise applies the atan2 function to each value of the current
             matrix and a given other matrix being the 'x' of atan2 and the
             'this' matrix being the 'y'
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The other matrix 'y'
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix with the result and 'x'
             * @return  {void}
             */
            PointwiseAtan2$1: function (other, result) {
                this.PointwiseBinary$1(Bridge.fn.cacheBind(this, this.DoPointwiseAtan2), other, result);
            },
            /**
             * Pointwise applies the ceiling function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            PointwiseCeiling: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseCeiling));
            },
            /**
             * Pointwise applies the ceiling function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseCeiling$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseCeiling), result);
            },
            /**
             * Pointwise applies the cos function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            PointwiseCos: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseCos));
            },
            /**
             * Pointwise applies the cos function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseCos$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseCos), result);
            },
            /**
             * Pointwise applies the cosh function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            PointwiseCosh: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseCosh));
            },
            /**
             * Pointwise applies the cosh function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseCosh$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseCosh), result);
            },
            /**
             * Pointwise applies the floor function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            PointwiseFloor: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseFloor));
            },
            /**
             * Pointwise applies the floor function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseFloor$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseFloor), result);
            },
            /**
             * Pointwise applies the log10 function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            PointwiseLog10: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseLog10));
            },
            /**
             * Pointwise applies the log10 function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseLog10$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseLog10), result);
            },
            /**
             * Pointwise applies the round function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            PointwiseRound: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseRound));
            },
            /**
             * Pointwise applies the round function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseRound$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseRound), result);
            },
            /**
             * Pointwise applies the sign function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            PointwiseSign: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseSign));
            },
            /**
             * Pointwise applies the sign function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseSign$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseSign), result);
            },
            /**
             * Pointwise applies the sin function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            PointwiseSin: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseSin));
            },
            /**
             * Pointwise applies the sin function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseSin$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseSin), result);
            },
            /**
             * Pointwise applies the sinh function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            PointwiseSinh: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseSinh));
            },
            /**
             * Pointwise applies the sinh function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseSinh$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseSinh), result);
            },
            /**
             * Pointwise applies the sqrt function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            PointwiseSqrt: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseSqrt));
            },
            /**
             * Pointwise applies the sqrt function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseSqrt$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseSqrt), result);
            },
            /**
             * Pointwise applies the tan function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            PointwiseTan: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseTan));
            },
            /**
             * Pointwise applies the tan function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseTan$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseTan), result);
            },
            /**
             * Pointwise applies the tanh function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            PointwiseTanh: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseTanh));
            },
            /**
             * Pointwise applies the tanh function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseTanh$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseTanh), result);
            },
            /**
             * Calculates the rank of the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {number}        effective numerical rank, obtained from SVD
             */
            Rank: function () {
                return this.Svd(false).Rank;
            },
            /**
             * Calculates the nullity of the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {number}        effective numerical nullity, obtained from SVD
             */
            Nullity: function () {
                return ((this.ColumnCount - this.Rank()) | 0);
            },
            /**
             * Calculates the condition number of this matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {T}        The condition number of the matrix.
             */
            ConditionNumber: function () {
                return this.Svd(false).ConditionNumber;
            },
            /**
             * Computes the determinant of this matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {T}        The determinant of this matrix.
             */
            Determinant: function () {
                if (this.RowCount !== this.ColumnCount) {
                    throw new System.ArgumentException.$ctor1("Resources.ArgumentMatrixSquare");
                }

                return this.LU().Determinant;
            },
            /**
             * Computes an orthonormal basis for the null space of this matrix,
             also known as the kernel of the corresponding matrix transformation.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {Array.<MathNet.Numerics.LinearAlgebra.Vector$1>}
             */
            Kernel: function () {
                var $t;
                var svd = this.Svd(true);
                return ($t = MathNet.Numerics.LinearAlgebra.Vector$1(T), System.Linq.Enumerable.from(svd.VT.EnumerateRows$1(svd.Rank, ((this.ColumnCount - svd.Rank) | 0)), $t).ToArray($t));
            },
            /**
             * Computes an orthonormal basis for the column space of this matrix,
             also known as the range or image of the corresponding matrix transformation.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {Array.<MathNet.Numerics.LinearAlgebra.Vector$1>}
             */
            Range: function () {
                var $t;
                var svd = this.Svd(true);
                return ($t = MathNet.Numerics.LinearAlgebra.Vector$1(T), System.Linq.Enumerable.from(svd.U.EnumerateColumns$1(0, svd.Rank), $t).ToArray($t));
            },
            /**
             * Computes the inverse of this matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}        The inverse of this matrix.
             */
            Inverse: function () {
                if (this.RowCount !== this.ColumnCount) {
                    throw new System.ArgumentException.$ctor1("Resources.ArgumentMatrixSquare");
                }

                return this.LU().Inverse();
            },
            /**
             * Computes the Kronecker product of this matrix with the given matrix. The new matrix is M-by-N
             with M = this.Rows * lower.Rows and N = this.Columns * lower.Columns.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other    The other matrix.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}             The Kronecker product of the two matrices.
             */
            KroneckerProduct: function (other) {
                var result = this.m_builder.SameAs$1(this, other, Bridge.Int.mul(this.RowCount, other.RowCount), Bridge.Int.mul(this.ColumnCount, other.ColumnCount));
                this.KroneckerProduct$1(other, result);
                return result;
            },
            /**
             * Computes the Kronecker product of this matrix with the given matrix. The new matrix is M-by-N
             with M = this.Rows * lower.Rows and N = this.Columns * lower.Columns.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If the result matrix's dimensions are not (this.Rows * lower.rows) x (this.Columns * lower.Columns).
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The other matrix.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The Kronecker product of the two matrices.
             * @return  {void}
             */
            KroneckerProduct$1: function (other, result) {
                if (result.RowCount !== (Bridge.Int.mul(this.RowCount, other.RowCount)) || result.ColumnCount !== (Bridge.Int.mul(this.ColumnCount, other.ColumnCount))) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$1(System.ArgumentOutOfRangeException, this, other, result);
                }

                for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                    for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                        result.SetSubMatrix$1(Bridge.Int.mul(i, other.RowCount), other.RowCount, Bridge.Int.mul(j, other.ColumnCount), other.ColumnCount, MathNet.Numerics.LinearAlgebra.Matrix$1(T).op_Multiply(this.At(i, j), other));
                    }
                }
            },
            /**
             * Pointwise applies the minimum with a scalar to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {T}                                          scalar    The scalar value to compare to.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            PointwiseMinimum: function (scalar) {
                var result = this.m_builder.SameAs$3(T, this);
                this.DoPointwiseMinimum(scalar, result);
                return result;
            },
            /**
             * Pointwise applies the minimum with a scalar to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If this vector and <b /> are not the same size.
             * @param   {T}                                          scalar    The scalar value to compare to.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The vector to store the result.
             * @return  {void}
             */
            PointwiseMinimum$2: function (scalar, result) {
                if (this.ColumnCount !== result.ColumnCount || this.RowCount !== result.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentException, this, result);
                }

                this.DoPointwiseMinimum(scalar, result);
            },
            /**
             * Pointwise applies the minimum with the values of another matrix to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other    The matrix with the values to compare to.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            PointwiseMinimum$1: function (other) {
                var result = this.m_builder.SameAs$3(T, this);
                this.DoPointwiseMinimum$1(other, result);
                return result;
            },
            /**
             * Pointwise applies the minimum with the values of another matrix to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If this matrix and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix with the values to compare to.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result.
             * @return  {void}
             */
            PointwiseMinimum$3: function (other, result) {
                if (this.ColumnCount !== result.ColumnCount || this.RowCount !== result.RowCount || this.ColumnCount !== other.ColumnCount || this.RowCount !== other.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$1(System.ArgumentException, this, other, result);
                }

                this.DoPointwiseMinimum$1(other, result);
            },
            /**
             * Pointwise applies the maximum with a scalar to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {T}                                          scalar    The scalar value to compare to.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            PointwiseMaximum: function (scalar) {
                var result = this.m_builder.SameAs$3(T, this);
                this.DoPointwiseMaximum(scalar, result);
                return result;
            },
            /**
             * Pointwise applies the maximum with a scalar to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If this matrix and <b /> are not the same size.
             * @param   {T}                                          scalar    The scalar value to compare to.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result.
             * @return  {void}
             */
            PointwiseMaximum$2: function (scalar, result) {
                if (this.ColumnCount !== result.ColumnCount || this.RowCount !== result.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentException, this, result);
                }

                this.DoPointwiseMaximum(scalar, result);
            },
            /**
             * Pointwise applies the maximum with the values of another matrix to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other    The matrix with the values to compare to.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            PointwiseMaximum$1: function (other) {
                var result = this.m_builder.SameAs$3(T, this);
                this.DoPointwiseMaximum$1(other, result);
                return result;
            },
            /**
             * Pointwise applies the maximum with the values of another matrix to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If this matrix and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix with the values to compare to.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result.
             * @return  {void}
             */
            PointwiseMaximum$3: function (other, result) {
                if (this.ColumnCount !== result.ColumnCount || this.RowCount !== result.RowCount || this.ColumnCount !== other.ColumnCount || this.RowCount !== other.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$1(System.ArgumentException, this, other, result);
                }

                this.DoPointwiseMaximum$1(other, result);
            },
            /**
             * Pointwise applies the absolute minimum with a scalar to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {T}                                          scalar    The scalar value to compare to.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            PointwiseAbsoluteMinimum: function (scalar) {
                var result = this.m_builder.SameAs$3(T, this);
                this.DoPointwiseAbsoluteMinimum(scalar, result);
                return result;
            },
            /**
             * Pointwise applies the absolute minimum with a scalar to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If this matrix and <b /> are not the same size.
             * @param   {T}                                          scalar    The scalar value to compare to.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result.
             * @return  {void}
             */
            PointwiseAbsoluteMinimum$2: function (scalar, result) {
                if (this.ColumnCount !== result.ColumnCount || this.RowCount !== result.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentException, this, result);
                }

                this.DoPointwiseAbsoluteMinimum(scalar, result);
            },
            /**
             * Pointwise applies the absolute minimum with the values of another matrix to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other    The matrix with the values to compare to.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            PointwiseAbsoluteMinimum$1: function (other) {
                var result = this.m_builder.SameAs$3(T, this);
                this.DoPointwiseAbsoluteMinimum$1(other, result);
                return result;
            },
            /**
             * Pointwise applies the absolute minimum with the values of another matrix to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If this matrix and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix with the values to compare to.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result.
             * @return  {void}
             */
            PointwiseAbsoluteMinimum$3: function (other, result) {
                if (this.ColumnCount !== result.ColumnCount || this.RowCount !== result.RowCount || this.ColumnCount !== other.ColumnCount || this.RowCount !== other.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$1(System.ArgumentException, this, other, result);
                }

                this.DoPointwiseAbsoluteMinimum$1(other, result);
            },
            /**
             * Pointwise applies the absolute maximum with a scalar to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {T}                                          scalar    The scalar value to compare to.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            PointwiseAbsoluteMaximum: function (scalar) {
                var result = this.m_builder.SameAs$3(T, this);
                this.DoPointwiseAbsoluteMaximum(scalar, result);
                return result;
            },
            /**
             * Pointwise applies the absolute maximum with a scalar to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If this matrix and <b /> are not the same size.
             * @param   {T}                                          scalar    The scalar value to compare to.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result.
             * @return  {void}
             */
            PointwiseAbsoluteMaximum$2: function (scalar, result) {
                if (this.ColumnCount !== result.ColumnCount || this.RowCount !== result.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentException, this, result);
                }

                this.DoPointwiseAbsoluteMaximum(scalar, result);
            },
            /**
             * Pointwise applies the absolute maximum with the values of another matrix to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other    The matrix with the values to compare to.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            PointwiseAbsoluteMaximum$1: function (other) {
                var result = this.m_builder.SameAs$3(T, this);
                this.DoPointwiseAbsoluteMaximum$1(other, result);
                return result;
            },
            /**
             * Pointwise applies the absolute maximum with the values of another matrix to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If this matrix and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix with the values to compare to.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result.
             * @return  {void}
             */
            PointwiseAbsoluteMaximum$3: function (other, result) {
                if (this.ColumnCount !== result.ColumnCount || this.RowCount !== result.RowCount || this.ColumnCount !== other.ColumnCount || this.RowCount !== other.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$1(System.ArgumentException, this, other, result);
                }

                this.DoPointwiseAbsoluteMaximum$1(other, result);
            },
            /**
             * Calculates the induced L2 norm of the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {number}        The largest singular value of the matrix.
             */
            L2Norm: function () {
                return this.Svd(false).L2Norm;
            },
            /**
             * Indicates whether the current object is equal to another object of the same type.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other    An object to compare with this object.
             * @return  {boolean}                                             <pre><code>true</code></pre> if the current object is equal to the <b /> parameter; otherwise, <pre><code>false</code></pre>.
             */
            equalsT: function (other) {
                return other != null && this.Storage.equalsT(other.Storage);
            },
            /**
             * Determines whether the specified {@link } is equal to this instance.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {System.Object}    obj    The {@link } to compare with this instance.
             * @return  {boolean}                 <pre><code>true</code></pre> if the specified {@link } is equal to this instance; otherwise, <pre><code>false</code></pre>.
             */
            equals: function (obj) {
                var other = Bridge.as(obj, MathNet.Numerics.LinearAlgebra.Matrix$1(T));
                return other != null && this.Storage.equalsT(other.Storage);
            },
            /**
             * Returns a hash code for this instance.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {number}        A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
             */
            getHashCode: function () {
                return this.Storage.getHashCode();
            },
            /**
             * Creates a new object that is a copy of the current instance.
             *
             * @instance
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {System.Object}        A new object that is a copy of this instance.
             */
            System$ICloneable$clone: function () {
                return this.Clone();
            },
            /**
             * Creates a clone of this instance.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}        A clone of the instance.
             */
            Clone: function () {
                var result = this.m_builder.SameAs$3(T, this);
                this.Storage.CopyToUnchecked(result.Storage, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                return result;
            },
            /**
             * Returns a string that describes the type, dimensions and shape of this matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {string}
             */
            ToTypeString: function () {
                return System.String.format("{0} {1}x{2}-{3}", Bridge.Reflection.getTypeName(Bridge.getType(this)), Bridge.box(this.RowCount, System.Int32), Bridge.box(this.ColumnCount, System.Int32), Bridge.Reflection.getTypeName(T));
            },
            /**
             * Returns a string 2D array that summarizes the content of this matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {number}            upperRows             
             * @param   {number}            lowerRows             
             * @param   {number}            leftColumns           
             * @param   {number}            rightColumns          
             * @param   {string}            horizontalEllipsis    
             * @param   {string}            verticalEllipsis      
             * @param   {string}            diagonalEllipsis      
             * @param   {System.Func}       formatValue
             * @return  {Array.<string>}
             */
            ToMatrixStringArray$1: function (upperRows, lowerRows, leftColumns, rightColumns, horizontalEllipsis, verticalEllipsis, diagonalEllipsis, formatValue) {
                upperRows = Math.max(upperRows, 1);
                lowerRows = Math.max(lowerRows, 0);
                leftColumns = Math.max(leftColumns, 1);
                rightColumns = Math.max(rightColumns, 0);

                var upper = this.RowCount <= upperRows ? this.RowCount : upperRows;
                var lower = this.RowCount <= upperRows ? 0 : this.RowCount <= ((upperRows + lowerRows) | 0) ? ((this.RowCount - upperRows) | 0) : lowerRows;
                var rowEllipsis = this.RowCount > ((upper + lower) | 0);
                var rows = rowEllipsis ? ((((upper + lower) | 0) + 1) | 0) : ((upper + lower) | 0);

                var left = this.ColumnCount <= leftColumns ? this.ColumnCount : leftColumns;
                var right = this.ColumnCount <= leftColumns ? 0 : this.ColumnCount <= ((leftColumns + rightColumns) | 0) ? ((this.ColumnCount - leftColumns) | 0) : rightColumns;
                var colEllipsis = this.ColumnCount > ((left + right) | 0);
                var cols = colEllipsis ? ((((left + right) | 0) + 1) | 0) : ((left + right) | 0);

                var array = System.Array.create(null, null, System.String, rows, cols);
                for (var i = 0; i < upper; i = (i + 1) | 0) {
                    for (var j = 0; j < left; j = (j + 1) | 0) {
                        array.set([i, j], formatValue(this.At(i, j)));
                    }
                    var colOffset = left;
                    if (colEllipsis) {
                        array.set([i, left], horizontalEllipsis);
                        colOffset = (colOffset + 1) | 0;
                    }
                    for (var j1 = 0; j1 < right; j1 = (j1 + 1) | 0) {
                        array.set([i, ((colOffset + j1) | 0)], formatValue(this.At(i, ((((this.ColumnCount - right) | 0) + j1) | 0))));
                    }
                }
                var rowOffset = upper;
                if (rowEllipsis) {
                    for (var j2 = 0; j2 < left; j2 = (j2 + 1) | 0) {
                        array.set([upper, j2], verticalEllipsis);
                    }
                    var colOffset1 = left;
                    if (colEllipsis) {
                        array.set([upper, left], diagonalEllipsis);
                        colOffset1 = (colOffset1 + 1) | 0;
                    }
                    for (var j3 = 0; j3 < right; j3 = (j3 + 1) | 0) {
                        array.set([upper, ((colOffset1 + j3) | 0)], verticalEllipsis);
                    }
                    rowOffset = (rowOffset + 1) | 0;
                }
                for (var i1 = 0; i1 < lower; i1 = (i1 + 1) | 0) {
                    for (var j4 = 0; j4 < left; j4 = (j4 + 1) | 0) {
                        array.set([((rowOffset + i1) | 0), j4], formatValue(this.At(((((this.RowCount - lower) | 0) + i1) | 0), j4)));
                    }
                    var colOffset2 = left;
                    if (colEllipsis) {
                        array.set([((rowOffset + i1) | 0), left], horizontalEllipsis);
                        colOffset2 = (colOffset2 + 1) | 0;
                    }
                    for (var j5 = 0; j5 < right; j5 = (j5 + 1) | 0) {
                        array.set([((rowOffset + i1) | 0), ((colOffset2 + j5) | 0)], formatValue(this.At(((((this.RowCount - lower) | 0) + i1) | 0), ((((this.ColumnCount - right) | 0) + j5) | 0))));
                    }
                }
                return array;
            },
            /**
             * Returns a string 2D array that summarizes the content of this matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {number}            upperRows             
             * @param   {number}            lowerRows             
             * @param   {number}            minLeftColumns        
             * @param   {number}            rightColumns          
             * @param   {number}            maxWidth              
             * @param   {number}            padding               
             * @param   {string}            horizontalEllipsis    
             * @param   {string}            verticalEllipsis      
             * @param   {string}            diagonalEllipsis      
             * @param   {System.Func}       formatValue
             * @return  {Array.<string>}
             */
            ToMatrixStringArray: function (upperRows, lowerRows, minLeftColumns, rightColumns, maxWidth, padding, horizontalEllipsis, verticalEllipsis, diagonalEllipsis, formatValue) {
                var $t, $t1, $t2, $t3;
                upperRows = Math.max(upperRows, 1);
                lowerRows = Math.max(lowerRows, 0);
                minLeftColumns = Math.max(minLeftColumns, 1);
                maxWidth = Math.max(maxWidth, 12);

                var upper = this.RowCount <= upperRows ? this.RowCount : upperRows;
                var lower = this.RowCount <= upperRows ? 0 : this.RowCount <= ((upperRows + lowerRows) | 0) ? ((this.RowCount - upperRows) | 0) : lowerRows;
                var rowEllipsis = this.RowCount > ((upper + lower) | 0);
                var rows = rowEllipsis ? ((((upper + lower) | 0) + 1) | 0) : ((upper + lower) | 0);

                var left = this.ColumnCount <= minLeftColumns ? this.ColumnCount : minLeftColumns;
                var right = this.ColumnCount <= minLeftColumns ? 0 : this.ColumnCount <= ((minLeftColumns + rightColumns) | 0) ? ((this.ColumnCount - minLeftColumns) | 0) : rightColumns;

                var columnsLeft = new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Array.type(System.String)))).ctor();
                for (var j = 0; j < left; j = (j + 1) | 0) {
                    columnsLeft.add(this.FormatColumn(j, rows, upper, lower, rowEllipsis, verticalEllipsis, formatValue));
                }

                var columnsRight = new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Array.type(System.String)))).ctor();
                for (var j1 = 0; j1 < right; j1 = (j1 + 1) | 0) {
                    columnsRight.add(this.FormatColumn(((((this.ColumnCount - right) | 0) + j1) | 0), rows, upper, lower, rowEllipsis, verticalEllipsis, formatValue));
                }

                var chars = (System.Linq.Enumerable.from(columnsLeft, System.Tuple$2(System.Int32,System.Array.type(System.String))).sum(function (t) {
                        return ((t.Item1 + padding) | 0);
                    }) + System.Linq.Enumerable.from(columnsRight, System.Tuple$2(System.Int32,System.Array.type(System.String))).sum(function (t) {
                        return ((t.Item1 + padding) | 0);
                    })) | 0;
                for (var j2 = left; j2 < ((this.ColumnCount - right) | 0); j2 = (j2 + 1) | 0) {
                    var candidate = this.FormatColumn(j2, rows, upper, lower, rowEllipsis, verticalEllipsis, formatValue);
                    chars = (chars + (((candidate.Item1 + padding) | 0))) | 0;
                    if (chars > maxWidth) {
                        break;
                    }
                    columnsLeft.add(candidate);
                }

                var cols = (columnsLeft.Count + columnsRight.Count) | 0;
                var colEllipsis = this.ColumnCount > cols;
                if (colEllipsis) {
                    cols = (cols + 1) | 0;
                }

                var array = System.Array.create(null, null, System.String, rows, cols);
                var colIndex = 0;
                $t = Bridge.getEnumerator(columnsLeft);
                try {
                    while ($t.moveNext()) {
                        var column = $t.Current;
                        for (var i = 0; i < column.Item2.length; i = (i + 1) | 0) {
                            array.set([i, colIndex], ($t1 = column.Item2)[System.Array.index(i, $t1)]);
                        }
                        colIndex = (colIndex + 1) | 0;
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                if (colEllipsis) {
                    var rowIndex = 0;
                    for (var row = 0; row < upper; row = (row + 1) | 0) {
                        array.set([Bridge.identity(rowIndex, ((rowIndex = (rowIndex + 1) | 0))), colIndex], horizontalEllipsis);
                    }
                    if (rowEllipsis) {
                        array.set([Bridge.identity(rowIndex, ((rowIndex = (rowIndex + 1) | 0))), colIndex], diagonalEllipsis);
                    }
                    for (var row1 = (this.RowCount - lower) | 0; row1 < this.RowCount; row1 = (row1 + 1) | 0) {
                        array.set([Bridge.identity(rowIndex, ((rowIndex = (rowIndex + 1) | 0))), colIndex], horizontalEllipsis);
                    }
                    colIndex = (colIndex + 1) | 0;
                }
                $t2 = Bridge.getEnumerator(columnsRight);
                try {
                    while ($t2.moveNext()) {
                        var column1 = $t2.Current;
                        for (var i1 = 0; i1 < column1.Item2.length; i1 = (i1 + 1) | 0) {
                            array.set([i1, colIndex], ($t3 = column1.Item2)[System.Array.index(i1, $t3)]);
                        }
                        colIndex = (colIndex + 1) | 0;
                    }
                } finally {
                    if (Bridge.is($t2, System.IDisposable)) {
                        $t2.System$IDisposable$Dispose();
                    }
                }
                return array;
            },
            FormatColumn: function (column, height, upper, lower, withEllipsis, ellipsis, formatValue) {
                var c = System.Array.init(height, null, System.String);
                var index = 0;
                for (var row = 0; row < upper; row = (row + 1) | 0) {
                    c[System.Array.index(Bridge.identity(index, ((index = (index + 1) | 0))), c)] = formatValue(this.At(row, column));
                }
                if (withEllipsis) {
                    c[System.Array.index(Bridge.identity(index, ((index = (index + 1) | 0))), c)] = "";
                }
                for (var row1 = (this.RowCount - lower) | 0; row1 < this.RowCount; row1 = (row1 + 1) | 0) {
                    c[System.Array.index(Bridge.identity(index, ((index = (index + 1) | 0))), c)] = formatValue(this.At(row1, column));
                }
                var w = System.Linq.Enumerable.from(c, System.String).max(function (x) {
                        return x.length;
                    });
                if (withEllipsis) {
                    c[System.Array.index(upper, c)] = ellipsis;
                }
                return { Item1: w, Item2: c };
            },
            ToMatrixString$1: function (upperRows, lowerRows, leftColumns, rightColumns, horizontalEllipsis, verticalEllipsis, diagonalEllipsis, columnSeparator, rowSeparator, formatValue) {
                return MathNet.Numerics.LinearAlgebra.Matrix$1(T).FormatStringArrayToString(this.ToMatrixStringArray$1(upperRows, lowerRows, leftColumns, rightColumns, horizontalEllipsis, verticalEllipsis, diagonalEllipsis, formatValue), columnSeparator, rowSeparator);
            },
            ToMatrixString: function (upperRows, lowerRows, minLeftColumns, rightColumns, maxWidth, horizontalEllipsis, verticalEllipsis, diagonalEllipsis, columnSeparator, rowSeparator, formatValue) {
                return MathNet.Numerics.LinearAlgebra.Matrix$1(T).FormatStringArrayToString(this.ToMatrixStringArray(upperRows, lowerRows, minLeftColumns, rightColumns, maxWidth, columnSeparator.length, horizontalEllipsis, verticalEllipsis, diagonalEllipsis, formatValue), columnSeparator, rowSeparator);
            },
            /**
             * Returns a string that summarizes the content of this matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {number}                    maxRows       
             * @param   {number}                    maxColumns    
             * @param   {string}                    format        
             * @param   {System.IFormatProvider}    provider
             * @return  {string}
             */
            ToMatrixString$2: function (maxRows, maxColumns, format, provider) {
                if (format === void 0) { format = null; }
                if (provider === void 0) { provider = null; }
                if (format == null) {
                    format = "G6";
                }

                var bottom = maxRows > 4 ? 2 : 0;
                var right = maxColumns > 4 ? 2 : 0;
                return this.ToMatrixString$1(((maxRows - bottom) | 0), bottom, ((maxColumns - right) | 0), right, "..", "..", "..", "  ", "\n", function (x) {
                    return Bridge.toString(x);
                });
            },
            /**
             * Returns a string that summarizes the content of this matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {string}                    format      
             * @param   {System.IFormatProvider}    provider
             * @return  {string}
             */
            ToMatrixString$3: function (format, provider) {
                if (format === void 0) { format = null; }
                if (provider === void 0) { provider = null; }
                if (format == null) {
                    format = "G6";
                }

                return this.ToMatrixString(8, 4, 5, 2, 76, "..", "..", "..", "  ", "\n", function (x) {
                    return Bridge.toString(x);
                });
            },
            /**
             * Returns a string that summarizes this matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {number}                    maxRows           
             * @param   {number}                    maxColumns        
             * @param   {string}                    format            
             * @param   {System.IFormatProvider}    formatProvider
             * @return  {string}
             */
            ToString: function (maxRows, maxColumns, format, formatProvider) {
                if (format === void 0) { format = null; }
                if (formatProvider === void 0) { formatProvider = null; }
                return System.String.concat(this.ToTypeString(), "\n", this.ToMatrixString$2(maxRows, maxColumns, format, formatProvider));
            },
            /**
             * Returns a string that summarizes this matrix.
             The maximum number of cells can be configured in the {@link } class.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {string}
             */
            toString: function () {
                return System.String.concat(this.ToTypeString(), "\n", this.ToMatrixString$3());
            },
            /**
             * Returns a string that summarizes this matrix.
             The maximum number of cells can be configured in the {@link } class.
             The format string is ignored.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {string}                    format            
             * @param   {System.IFormatProvider}    formatProvider
             * @return  {string}
             */
            format: function (format, formatProvider) {
                if (format === void 0) { format = null; }
                if (formatProvider === void 0) { formatProvider = null; }
                return System.String.concat(this.ToTypeString(), "\n", this.ToMatrixString$3(format, formatProvider));
            },
            /**
             * Retrieves the requested element without range checking.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {number}    row       The row of the element.
             * @param   {number}    column    The column of the element.
             * @return  {T}                   The requested element.
             */
            At: function (row, column) {
                return this.Storage.At(row, column);
            },
            /**
             * Sets the value of the given element without range checking.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {number}    row       The row of the element.
             * @param   {number}    column    The column of the element.
             * @param   {T}         value     The value to set the element to.
             * @return  {void}
             */
            At$1: function (row, column, value) {
                this.Storage.At$1(row, column, value);
            },
            /**
             * Sets all values to zero.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {void}
             */
            Clear: function () {
                this.Storage.Clear();
            },
            /**
             * Sets all values of a row to zero.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {number}    rowIndex
             * @return  {void}
             */
            ClearRow: function (rowIndex) {
                if ((rowIndex >>> 0) >= ((this.RowCount) >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("rowIndex");
                }

                this.Storage.ClearUnchecked(rowIndex, 1, 0, this.ColumnCount);
            },
            /**
             * Sets all values of a column to zero.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {number}    columnIndex
             * @return  {void}
             */
            ClearColumn: function (columnIndex) {
                if ((columnIndex >>> 0) >= ((this.ColumnCount) >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("columnIndex");
                }

                this.Storage.ClearUnchecked(0, this.RowCount, columnIndex, 1);
            },
            /**
             * Sets all values for all of the chosen rows to zero.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {Array.<number>}    rowIndices
             * @return  {void}
             */
            ClearRows: function (rowIndices) {
                if (rowIndices === void 0) { rowIndices = []; }
                this.Storage.ClearRows(rowIndices);
            },
            /**
             * Sets all values for all of the chosen columns to zero.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {Array.<number>}    columnIndices
             * @return  {void}
             */
            ClearColumns: function (columnIndices) {
                if (columnIndices === void 0) { columnIndices = []; }
                this.Storage.ClearColumns(columnIndices);
            },
            /**
             * Sets all values of a sub-matrix to zero.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {number}    rowIndex       
             * @param   {number}    rowCount       
             * @param   {number}    columnIndex    
             * @param   {number}    columnCount
             * @return  {void}
             */
            ClearSubMatrix: function (rowIndex, rowCount, columnIndex, columnCount) {
                this.Storage.Clear$1(rowIndex, rowCount, columnIndex, columnCount);
            },
            /**
             * Set all values that meet the predicate to zero, in-place.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {System.Func}    zeroPredicate
             * @return  {void}
             */
            CoerceZero$1: function (zeroPredicate) {
                this.MapInplace(function (x) {
                    return zeroPredicate(x) ? MathNet.Numerics.LinearAlgebra.Matrix$1(T).Zero : x;
                }, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            /**
             * Copies the elements of this matrix to the given matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If target is {@link ArgumentNullException}.
             * @throws If this and the target matrix do not have the same dimensions..
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    target    The matrix to copy values into.
             * @return  {void}
             */
            CopyTo: function (target) {
                if (target == null) {
                    throw new System.ArgumentNullException.$ctor1("target");
                }

                this.Storage.CopyTo(target.Storage);
            },
            /**
             * Copies a row into an Vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <b /> is negative,
             or greater than or equal to the number of rows.
             * @param   {number}                                     index    The row to copy.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}             A Vector containing the copied elements.
             */
            Row: function (index) {
                if ((index >>> 0) >= ((this.RowCount) >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("index");
                }

                var ret = this.v_builder.SameAs$3(T, this, this.ColumnCount);
                this.Storage.CopySubRowToUnchecked(ret.Storage, index, 0, 0, this.ColumnCount, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                return ret;
            },
            /**
             * Copies a row into to the given Vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If the result vector is {@link ArgumentNullException}.
             * @throws If <b /> is negative,
             or greater than or equal to the number of rows.
             * @throws If <b>this.Columns != result.Count</b>.
             * @param   {number}                                     index     The row to copy.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The Vector to copy the row into.
             * @return  {void}
             */
            Row$2: function (index, result) {
                if (result == null) {
                    throw new System.ArgumentNullException.$ctor1("result");
                }

                this.Storage.CopyRowTo(result.Storage, index);
            },
            /**
             * Copies the requested row elements into a new Vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If:
             * @throws If <b /> is not positive.
             * @param   {number}                                     rowIndex       The row to copy elements from.
             * @param   {number}                                     columnIndex    The column to start copying from.
             * @param   {number}                                     length         The number of elements to copy.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}                   A Vector containing the requested elements.
             */
            Row$1: function (rowIndex, columnIndex, length) {
                var ret = this.v_builder.SameAs$3(T, this, length);
                this.Storage.CopySubRowTo(ret.Storage, rowIndex, columnIndex, 0, length);
                return ret;
            },
            /**
             * Copies the requested row elements into a new Vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If the result Vector is {@link ArgumentNullException}.
             * @throws If <b /> is negative,
             or greater than or equal to the number of columns.
             * @throws If <b /> is negative,
             or greater than or equal to the number of rows.
             * @throws If <b /> + <b />
             is greater than or equal to the number of rows.
             * @throws If <b /> is not positive.
             * @throws If <strong>result.Count &lt; length</strong>.
             * @param   {number}                                     rowIndex       The row to copy elements from.
             * @param   {number}                                     columnIndex    The column to start copying from.
             * @param   {number}                                     length         The number of elements to copy.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result         The Vector to copy the column into.
             * @return  {void}
             */
            Row$3: function (rowIndex, columnIndex, length, result) {
                if (result == null) {
                    throw new System.ArgumentNullException.$ctor1("result");
                }

                this.Storage.CopySubRowTo(result.Storage, rowIndex, columnIndex, 0, length);
            },
            /**
             * Copies a column into a new Vector&gt;.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <b /> is negative,
             or greater than or equal to the number of columns.
             * @param   {number}                                     index    The column to copy.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}             A Vector containing the copied elements.
             */
            Column: function (index) {
                if ((index >>> 0) >= ((this.ColumnCount) >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("index");
                }

                var ret = this.v_builder.SameAs$3(T, this, this.RowCount);
                this.Storage.CopySubColumnToUnchecked(ret.Storage, index, 0, 0, this.RowCount, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                return ret;
            },
            /**
             * Copies a column into to the given Vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If the result Vector is {@link ArgumentNullException}.
             * @throws If <b /> is negative,
             or greater than or equal to the number of columns.
             * @throws If <b>this.Rows != result.Count</b>.
             * @param   {number}                                     index     The column to copy.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The Vector to copy the column into.
             * @return  {void}
             */
            Column$2: function (index, result) {
                if (result == null) {
                    throw new System.ArgumentNullException.$ctor1("result");
                }

                this.Storage.CopyColumnTo(result.Storage, index);
            },
            /**
             * Copies the requested column elements into a new Vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If:
             * @throws If <b /> is not positive.
             * @param   {number}                                     columnIndex    The column to copy elements from.
             * @param   {number}                                     rowIndex       The row to start copying from.
             * @param   {number}                                     length         The number of elements to copy.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}                   A Vector containing the requested elements.
             */
            Column$1: function (columnIndex, rowIndex, length) {
                var ret = this.v_builder.SameAs$3(T, this, length);
                this.Storage.CopySubColumnTo(ret.Storage, columnIndex, rowIndex, 0, length);
                return ret;
            },
            /**
             * Copies the requested column elements into the given vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If the result Vector is {@link ArgumentNullException}.
             * @throws If <b /> is negative,
             or greater than or equal to the number of columns.
             * @throws If <b /> is negative,
             or greater than or equal to the number of rows.
             * @throws If <b /> + <b />
             is greater than or equal to the number of rows.
             * @throws If <b /> is not positive.
             * @throws If <strong>result.Count &lt; length</strong>.
             * @param   {number}                                     columnIndex    The column to copy elements from.
             * @param   {number}                                     rowIndex       The row to start copying from.
             * @param   {number}                                     length         The number of elements to copy.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result         The Vector to copy the column into.
             * @return  {void}
             */
            Column$3: function (columnIndex, rowIndex, length, result) {
                if (result == null) {
                    throw new System.ArgumentNullException.$ctor1("result");
                }

                this.Storage.CopySubColumnTo(result.Storage, columnIndex, rowIndex, 0, length);
            },
            /**
             * Returns a new matrix containing the upper triangle of this matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}        The upper triangle of this matrix.
             */
            UpperTriangle: function () {
                var result = this.m_builder.SameAs$3(T, this);
                for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                    for (var column = row; column < this.ColumnCount; column = (column + 1) | 0) {
                        result.At$1(row, column, this.At(row, column));
                    }
                }
                return result;
            },
            /**
             * Puts the upper triangle of this matrix into the result matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <b /> is {@link ArgumentNullException}.
             * @throws If the result matrix's dimensions are not the same as this matrix.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    Where to store the lower triangle.
             * @return  {void}
             */
            UpperTriangle$1: function (result) {
                if (result == null) {
                    throw new System.ArgumentNullException.$ctor1("result");
                }

                if (result.RowCount !== this.RowCount || result.ColumnCount !== this.ColumnCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentException, this, result, "result");
                }

                for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                    for (var column = 0; column < this.ColumnCount; column = (column + 1) | 0) {
                        result.At$1(row, column, row <= column ? this.At(row, column) : MathNet.Numerics.LinearAlgebra.Matrix$1(T).Zero);
                    }
                }
            },
            /**
             * Returns a new matrix containing the lower triangle of this matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}        The lower triangle of this matrix.
             */
            LowerTriangle: function () {
                var result = this.m_builder.SameAs$3(T, this);
                for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                    for (var column = 0; column <= row && column < this.ColumnCount; column = (column + 1) | 0) {
                        result.At$1(row, column, this.At(row, column));
                    }
                }
                return result;
            },
            /**
             * Puts the lower triangle of this matrix into the result matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <b /> is {@link ArgumentNullException}.
             * @throws If the result matrix's dimensions are not the same as this matrix.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    Where to store the lower triangle.
             * @return  {void}
             */
            LowerTriangle$1: function (result) {
                if (result == null) {
                    throw new System.ArgumentNullException.$ctor1("result");
                }

                if (result.RowCount !== this.RowCount || result.ColumnCount !== this.ColumnCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentException, this, result, "result");
                }

                for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                    for (var column = 0; column < this.ColumnCount; column = (column + 1) | 0) {
                        result.At$1(row, column, row >= column ? this.At(row, column) : MathNet.Numerics.LinearAlgebra.Matrix$1(T).Zero);
                    }
                }
            },
            /**
             * Creates a matrix that contains the values from the requested sub-matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If:
             * @throws If <b /> or <b />
             is not positive.
             * @param   {number}                                     rowIndex       The row to start copying from.
             * @param   {number}                                     rowCount       The number of rows to copy. Must be positive.
             * @param   {number}                                     columnIndex    The column to start copying from.
             * @param   {number}                                     columnCount    The number of columns to copy. Must be positive.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}                   The requested sub-matrix.
             */
            SubMatrix: function (rowIndex, rowCount, columnIndex, columnCount) {
                var result = this.m_builder.SameAs$4(T, this, rowCount, columnCount);
                this.Storage.CopySubMatrixTo(result.Storage, rowIndex, 0, rowCount, columnIndex, 0, columnCount, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                return result;
            },
            /**
             * Returns the elements of the diagonal in a Vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}        The elements of the diagonal.
             */
            Diagonal: function () {
                var min = Math.min(this.RowCount, this.ColumnCount);
                var diagonal = this.v_builder.SameAs$3(T, this, min);

                for (var i = 0; i < min; i = (i + 1) | 0) {
                    diagonal.At$1(i, this.At(i, i));
                }

                return diagonal;
            },
            /**
             * Returns a new matrix containing the lower triangle of this matrix. The new matrix
             does not contain the diagonal elements of this matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}        The lower triangle of this matrix.
             */
            StrictlyLowerTriangle: function () {
                var result = this.m_builder.SameAs$3(T, this);
                for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                    var columns = Math.min(row, this.ColumnCount);
                    for (var column = 0; column < columns; column = (column + 1) | 0) {
                        result.At$1(row, column, this.At(row, column));
                    }
                }
                return result;
            },
            /**
             * Puts the strictly lower triangle of this matrix into the result matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <b /> is {@link ArgumentNullException}.
             * @throws If the result matrix's dimensions are not the same as this matrix.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    Where to store the lower triangle.
             * @return  {void}
             */
            StrictlyLowerTriangle$1: function (result) {
                if (result == null) {
                    throw new System.ArgumentNullException.$ctor1("result");
                }

                if (result.RowCount !== this.RowCount || result.ColumnCount !== this.ColumnCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentException, this, result, "result");
                }

                for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                    for (var column = 0; column < this.ColumnCount; column = (column + 1) | 0) {
                        result.At$1(row, column, row > column ? this.At(row, column) : MathNet.Numerics.LinearAlgebra.Matrix$1(T).Zero);
                    }
                }
            },
            /**
             * Returns a new matrix containing the upper triangle of this matrix. The new matrix
             does not contain the diagonal elements of this matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}        The upper triangle of this matrix.
             */
            StrictlyUpperTriangle: function () {
                var result = this.m_builder.SameAs$3(T, this);
                for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                    for (var column = (row + 1) | 0; column < this.ColumnCount; column = (column + 1) | 0) {
                        result.At$1(row, column, this.At(row, column));
                    }
                }
                return result;
            },
            /**
             * Puts the strictly upper triangle of this matrix into the result matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <b /> is {@link ArgumentNullException}.
             * @throws If the result matrix's dimensions are not the same as this matrix.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    Where to store the lower triangle.
             * @return  {void}
             */
            StrictlyUpperTriangle$1: function (result) {
                if (result == null) {
                    throw new System.ArgumentNullException.$ctor1("result");
                }

                if (result.RowCount !== this.RowCount || result.ColumnCount !== this.ColumnCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentException, this, result, "result");
                }

                for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                    for (var column = 0; column < this.ColumnCount; column = (column + 1) | 0) {
                        result.At$1(row, column, row < column ? this.At(row, column) : MathNet.Numerics.LinearAlgebra.Matrix$1(T).Zero);
                    }
                }
            },
            /**
             * Creates a new matrix and inserts the given column at the given index.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <b /> is {@link ArgumentNullException}.
             * @throws If <b /> is &lt; zero or &gt; the number of columns.
             * @throws If the size of <b /> != the number of rows.
             * @param   {number}                                     columnIndex    The index of where to insert the column.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    column         The column to insert.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}                   A new matrix with the inserted column.
             */
            InsertColumn: function (columnIndex, column) {
                if (column == null) {
                    throw new System.ArgumentNullException.$ctor1("column");
                }

                if ((columnIndex >>> 0) > ((this.ColumnCount) >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("columnIndex");
                }

                if (column.Count !== this.RowCount) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentMatrixSameRowDimension{0}", "column");
                }

                var result = this.m_builder.SameAs$4(T, this, this.RowCount, ((this.ColumnCount + 1) | 0), true);
                this.Storage.CopySubMatrixTo(result.Storage, 0, 0, this.RowCount, 0, 0, columnIndex, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                result.SetColumn$1(columnIndex, column);
                this.Storage.CopySubMatrixTo(result.Storage, 0, 0, this.RowCount, columnIndex, ((columnIndex + 1) | 0), ((this.ColumnCount - columnIndex) | 0), MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                return result;
            },
            /**
             * Creates a new matrix with the given column removed.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <b /> is &lt; zero or &gt;= the number of columns.
             * @param   {number}                                     columnIndex    The index of the column to remove.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}                   A new matrix without the chosen column.
             */
            RemoveColumn: function (columnIndex) {
                if ((columnIndex >>> 0) >= ((this.ColumnCount) >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("columnIndex");
                }

                var result = this.m_builder.SameAs$4(T, this, this.RowCount, ((this.ColumnCount - 1) | 0), true);
                this.Storage.CopySubMatrixTo(result.Storage, 0, 0, this.RowCount, 0, 0, columnIndex, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                this.Storage.CopySubMatrixTo(result.Storage, 0, 0, this.RowCount, ((columnIndex + 1) | 0), columnIndex, ((((this.ColumnCount - columnIndex) | 0) - 1) | 0), MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                return result;
            },
            /**
             * Copies the values of the given Vector to the specified column.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <b /> is {@link ArgumentNullException}.
             * @throws If <b /> is less than zero,
             or greater than or equal to the number of columns.
             * @throws If the size of <b /> does not
             equal the number of rows of this <strong>Matrix</strong>.
             * @param   {number}                                     columnIndex    The column to copy the values to.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    column         The vector to copy the values from.
             * @return  {void}
             */
            SetColumn$1: function (columnIndex, column) {
                if (column == null) {
                    throw new System.ArgumentNullException.$ctor1("column");
                }

                column.Storage.CopyToColumn(this.Storage, columnIndex);
            },
            /**
             * Copies the values of the given Vector to the specified sub-column.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <b /> is {@link ArgumentNullException}.
             * @throws If <b /> is less than zero,
             or greater than or equal to the number of columns.
             * @throws If the size of <b /> does not
             equal the number of rows of this <strong>Matrix</strong>.
             * @param   {number}                                     columnIndex    The column to copy the values to.
             * @param   {number}                                     rowIndex       The row to start copying to.
             * @param   {number}                                     length         The number of elements to copy.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    column         The vector to copy the values from.
             * @return  {void}
             */
            SetColumn$2: function (columnIndex, rowIndex, length, column) {
                if (column == null) {
                    throw new System.ArgumentNullException.$ctor1("column");
                }

                column.Storage.CopyToSubColumn(this.Storage, columnIndex, 0, rowIndex, length);
            },
            /**
             * Copies the values of the given array to the specified column.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <b /> is {@link ArgumentNullException}.
             * @throws If <b /> is less than zero,
             or greater than or equal to the number of columns.
             * @throws If the size of <b /> does not
             equal the number of rows of this <strong>Matrix</strong>.
             * @throws If the size of <b /> does not
             equal the number of rows of this <strong>Matrix</strong>.
             * @param   {number}       columnIndex    The column to copy the values to.
             * @param   {Array.<T>}    column         The array to copy the values from.
             * @return  {void}
             */
            SetColumn: function (columnIndex, column) {
                if (column == null) {
                    throw new System.ArgumentNullException.$ctor1("column");
                }

                new (MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(T)).$ctor1(column.length, column).CopyToColumn(this.Storage, columnIndex);
            },
            /**
             * Creates a new matrix and inserts the given row at the given index.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <b /> is {@link ArgumentNullException}.
             * @throws If <b /> is &lt; zero or &gt; the number of rows.
             * @throws If the size of <b /> != the number of columns.
             * @param   {number}                                     rowIndex    The index of where to insert the row.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    row         The row to insert.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}                A new matrix with the inserted column.
             */
            InsertRow: function (rowIndex, row) {
                if (row == null) {
                    throw new System.ArgumentNullException.$ctor1("row");
                }

                if ((rowIndex >>> 0) > ((this.RowCount) >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("rowIndex");
                }

                if (row.Count !== this.ColumnCount) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentMatrixSameRowDimension{0}", "row");
                }

                var result = this.m_builder.SameAs$4(T, this, ((this.RowCount + 1) | 0), this.ColumnCount, true);
                this.Storage.CopySubMatrixTo(result.Storage, 0, 0, rowIndex, 0, 0, this.ColumnCount, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                result.SetRow$1(rowIndex, row);
                this.Storage.CopySubMatrixTo(result.Storage, rowIndex, ((rowIndex + 1) | 0), ((this.RowCount - rowIndex) | 0), 0, 0, this.ColumnCount, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                return result;
            },
            /**
             * Creates a new matrix with the given row removed.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <b /> is &lt; zero or &gt;= the number of rows.
             * @param   {number}                                     rowIndex    The index of the row to remove.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}                A new matrix without the chosen row.
             */
            RemoveRow: function (rowIndex) {
                if ((rowIndex >>> 0) >= ((this.RowCount) >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("rowIndex");
                }

                var result = this.m_builder.SameAs$4(T, this, ((this.RowCount - 1) | 0), this.ColumnCount, true);
                this.Storage.CopySubMatrixTo(result.Storage, 0, 0, rowIndex, 0, 0, this.ColumnCount, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                this.Storage.CopySubMatrixTo(result.Storage, ((rowIndex + 1) | 0), rowIndex, ((((this.RowCount - rowIndex) | 0) - 1) | 0), 0, 0, this.ColumnCount, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                return result;
            },
            /**
             * Copies the values of the given Vector to the specified row.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <b /> is {@link ArgumentNullException}.
             * @throws If <b /> is less than zero,
             or greater than or equal to the number of rows.
             * @throws If the size of <b /> does not
             equal the number of columns of this <strong>Matrix</strong>.
             * @param   {number}                                     rowIndex    The row to copy the values to.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    row         The vector to copy the values from.
             * @return  {void}
             */
            SetRow$1: function (rowIndex, row) {
                if (row == null) {
                    throw new System.ArgumentNullException.$ctor1("row");
                }

                row.Storage.CopyToRow(this.Storage, rowIndex);
            },
            /**
             * Copies the values of the given Vector to the specified sub-row.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <b /> is {@link ArgumentNullException}.
             * @throws If <b /> is less than zero,
             or greater than or equal to the number of rows.
             * @throws If the size of <b /> does not
             equal the number of columns of this <strong>Matrix</strong>.
             * @param   {number}                                     rowIndex       The row to copy the values to.
             * @param   {number}                                     columnIndex    The column to start copying to.
             * @param   {number}                                     length         The number of elements to copy.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    row            The vector to copy the values from.
             * @return  {void}
             */
            SetRow$2: function (rowIndex, columnIndex, length, row) {
                if (row == null) {
                    throw new System.ArgumentNullException.$ctor1("row");
                }

                row.Storage.CopyToSubRow(this.Storage, rowIndex, 0, columnIndex, length);
            },
            /**
             * Copies the values of the given array to the specified row.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <b /> is {@link ArgumentNullException}.
             * @throws If <b /> is less than zero,
             or greater than or equal to the number of rows.
             * @throws If the size of <b /> does not
             equal the number of columns of this <strong>Matrix</strong>.
             * @param   {number}       rowIndex    The row to copy the values to.
             * @param   {Array.<T>}    row         The array to copy the values from.
             * @return  {void}
             */
            SetRow: function (rowIndex, row) {
                if (row == null) {
                    throw new System.ArgumentNullException.$ctor1("row");
                }

                new (MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(T)).$ctor1(row.length, row).CopyToRow(this.Storage, rowIndex);
            },
            /**
             * Copies the values of a given matrix into a region in this matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If:
             * @param   {number}                                     rowIndex       The row to start copying to.
             * @param   {number}                                     columnIndex    The column to start copying to.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    subMatrix      The sub-matrix to copy from.
             * @return  {void}
             */
            SetSubMatrix: function (rowIndex, columnIndex, subMatrix) {
                subMatrix.Storage.CopySubMatrixTo(this.Storage, 0, rowIndex, subMatrix.RowCount, 0, columnIndex, subMatrix.ColumnCount);
            },
            /**
             * Copies the values of a given matrix into a region in this matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If:
             * @throws If <b /> or <b />
             is not positive.
             * @param   {number}                                     rowIndex       The row to start copying to.
             * @param   {number}                                     rowCount       The number of rows to copy. Must be positive.
             * @param   {number}                                     columnIndex    The column to start copying to.
             * @param   {number}                                     columnCount    The number of columns to copy. Must be positive.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    subMatrix      The sub-matrix to copy from.
             * @return  {void}
             */
            SetSubMatrix$1: function (rowIndex, rowCount, columnIndex, columnCount, subMatrix) {
                subMatrix.Storage.CopySubMatrixTo(this.Storage, 0, rowIndex, rowCount, 0, columnIndex, columnCount);
            },
            /**
             * Copies the values of a given matrix into a region in this matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If:
             * @throws If <b /> or <b />
             is not positive.
             * @param   {number}                                     rowIndex             The row to start copying to.
             * @param   {number}                                     sorceRowIndex        The row of the sub-matrix to start copying from.
             * @param   {number}                                     rowCount             The number of rows to copy. Must be positive.
             * @param   {number}                                     columnIndex          The column to start copying to.
             * @param   {number}                                     sourceColumnIndex    The column of the sub-matrix to start copying from.
             * @param   {number}                                     columnCount          The number of columns to copy. Must be positive.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    subMatrix            The sub-matrix to copy from.
             * @return  {void}
             */
            SetSubMatrix$2: function (rowIndex, sorceRowIndex, rowCount, columnIndex, sourceColumnIndex, columnCount, subMatrix) {
                subMatrix.Storage.CopySubMatrixTo(this.Storage, sorceRowIndex, rowIndex, rowCount, sourceColumnIndex, columnIndex, columnCount);
            },
            /**
             * Copies the values of the given Vector to the diagonal.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <b /> is {@link ArgumentNullException}.
             * @throws If the length of <b /> does not
             equal Min(Rows, Columns).
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    source    The vector to copy the values from. The length of the vector should be
             Min(Rows, Columns).
             * @return  {void}
             */
            SetDiagonal$1: function (source) {
                if (source == null) {
                    throw new System.ArgumentNullException.$ctor1("source");
                }

                var min = Math.min(this.RowCount, this.ColumnCount);

                if (source.Count !== min) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength{0}", "source");
                }

                for (var i = 0; i < min; i = (i + 1) | 0) {
                    this.At$1(i, i, source.At(i));
                }
            },
            /**
             * Copies the values of the given array to the diagonal.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If <b /> is {@link ArgumentNullException}.
             * @throws If the length of <b /> does not
             equal Min(Rows, Columns).
             * @param   {Array.<T>}    source    The array to copy the values from. The length of the vector should be
             Min(Rows, Columns).
             * @return  {void}
             */
            SetDiagonal: function (source) {
                if (source == null) {
                    throw new System.ArgumentNullException.$ctor1("source");
                }

                var min = Math.min(this.RowCount, this.ColumnCount);

                if (source.length !== min) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentArraysSameLength{0}", "source");
                }

                for (var i = 0; i < min; i = (i + 1) | 0) {
                    this.At$1(i, i, source[System.Array.index(i, source)]);
                }
            },
            /**
             * Returns the transpose of this matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}        The transpose of this matrix.
             */
            Transpose: function () {

                var result = this.m_builder.SameAs$4(T, this, this.ColumnCount, this.RowCount);
                this.Storage.TransposeToUnchecked(result.Storage, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                return result;
            },
            /**
             * Puts the transpose of this matrix into the result matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result
             * @return  {void}
             */
            Transpose$1: function (result) {
                this.Storage.TransposeTo(result.Storage, MathNet.Numerics.LinearAlgebra.ExistingData.Clear);
            },
            /**
             * Permute the rows of a matrix according to a permutation.
             * Permute the columns of a matrix according to a permutation.
             * Concatenates this matrix with the given matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    right    The matrix to concatenate.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}             The combined matrix.
             * @see {@link Stack(Matrix{T})}
             * @see {@link DiagonalStack(Matrix{T})}
             */
            Append: function (right) {
                if (right == null) {
                    throw new System.ArgumentNullException.$ctor1("right");
                }

                if (right.RowCount !== this.RowCount) {
                    throw new System.ArgumentException.$ctor1("Resources.ArgumentMatrixSameRowDimension");
                }

                var result = this.m_builder.SameAs$1(this, right, this.RowCount, ((this.ColumnCount + right.ColumnCount) | 0), true);
                this.Storage.CopySubMatrixToUnchecked(result.Storage, 0, 0, this.RowCount, 0, 0, this.ColumnCount, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                right.Storage.CopySubMatrixToUnchecked(result.Storage, 0, 0, right.RowCount, 0, this.ColumnCount, right.ColumnCount, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                return result;
            },
            /**
             * Concatenates this matrix with the given matrix and places the result into the result matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    right     The matrix to concatenate.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The combined matrix.
             * @return  {void}
             * @see {@link Stack(Matrix{T}, Matrix{T})}
             * @see {@link DiagonalStack(Matrix{T}, Matrix{T})}
             */
            Append$1: function (right, result) {
                if (right == null) {
                    throw new System.ArgumentNullException.$ctor1("right");
                }

                if (right.RowCount !== this.RowCount) {
                    throw new System.ArgumentException.$ctor1("Resources.ArgumentMatrixSameRowDimension");
                }

                if (result == null) {
                    throw new System.ArgumentNullException.$ctor1("result");
                }

                if (result.ColumnCount !== (((this.ColumnCount + right.ColumnCount) | 0)) || result.RowCount !== this.RowCount) {
                    throw new System.ArgumentException.$ctor1("Resources.ArgumentMatrixSameColumnDimension");
                }

                this.Storage.CopySubMatrixToUnchecked(result.Storage, 0, 0, this.RowCount, 0, 0, this.ColumnCount, MathNet.Numerics.LinearAlgebra.ExistingData.Clear);
                right.Storage.CopySubMatrixToUnchecked(result.Storage, 0, 0, right.RowCount, 0, this.ColumnCount, right.ColumnCount, MathNet.Numerics.LinearAlgebra.ExistingData.Clear);
            },
            /**
             * Stacks this matrix on top of the given matrix and places the result into the result matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If lower is {@link ArgumentNullException}.
             * @throws If <strong>upper.Columns != lower.Columns</strong>.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    lower    The matrix to stack this matrix upon.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}             The combined matrix.
             * @see {@link Append(Matrix{T})}
             * @see {@link DiagonalStack(Matrix{T})}
             */
            Stack: function (lower) {
                if (lower == null) {
                    throw new System.ArgumentNullException.$ctor1("lower");
                }

                if (lower.ColumnCount !== this.ColumnCount) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentMatrixSameColumnDimension{0}", "lower");
                }

                var result = this.m_builder.SameAs$1(this, lower, ((this.RowCount + lower.RowCount) | 0), this.ColumnCount, true);
                this.Storage.CopySubMatrixToUnchecked(result.Storage, 0, 0, this.RowCount, 0, 0, this.ColumnCount, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                lower.Storage.CopySubMatrixToUnchecked(result.Storage, 0, this.RowCount, lower.RowCount, 0, 0, lower.ColumnCount, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                return result;
            },
            /**
             * Stacks this matrix on top of the given matrix and places the result into the result matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If lower is {@link ArgumentNullException}.
             * @throws If <strong>upper.Columns != lower.Columns</strong>.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    lower     The matrix to stack this matrix upon.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The combined matrix.
             * @return  {void}
             * @see {@link Append(Matrix{T}, Matrix{T})}
             * @see {@link DiagonalStack(Matrix{T}, Matrix{T})}
             */
            Stack$1: function (lower, result) {
                if (lower == null) {
                    throw new System.ArgumentNullException.$ctor1("lower");
                }

                if (lower.ColumnCount !== this.ColumnCount) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentMatrixSameColumnDimension{0}", "lower");
                }

                if (result == null) {
                    throw new System.ArgumentNullException.$ctor1("result");
                }

                if (result.RowCount !== (((this.RowCount + lower.RowCount) | 0)) || result.ColumnCount !== this.ColumnCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentException, this, result, "result");
                }

                this.Storage.CopySubMatrixToUnchecked(result.Storage, 0, 0, this.RowCount, 0, 0, this.ColumnCount, MathNet.Numerics.LinearAlgebra.ExistingData.Clear);
                lower.Storage.CopySubMatrixToUnchecked(result.Storage, 0, this.RowCount, lower.RowCount, 0, 0, lower.ColumnCount, MathNet.Numerics.LinearAlgebra.ExistingData.Clear);
            },
            /**
             * Diagonally stacks his matrix on top of the given matrix. The new matrix is a M-by-N matrix,
             where M = this.Rows + lower.Rows and N = this.Columns + lower.Columns.
             The values of off the off diagonal matrices/blocks are set to zero.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If lower is {@link ArgumentNullException}.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    lower    The lower, right matrix.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}             the combined matrix
             * @see {@link Stack(Matrix{T})}
             * @see {@link Append(Matrix{T})}
             */
            DiagonalStack: function (lower) {
                if (lower == null) {
                    throw new System.ArgumentNullException.$ctor1("lower");
                }

                var result = this.m_builder.SameAs$1(this, lower, ((this.RowCount + lower.RowCount) | 0), ((this.ColumnCount + lower.ColumnCount) | 0), this.RowCount !== this.ColumnCount);
                this.Storage.CopySubMatrixToUnchecked(result.Storage, 0, 0, this.RowCount, 0, 0, this.ColumnCount, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                lower.Storage.CopySubMatrixToUnchecked(result.Storage, 0, this.RowCount, lower.RowCount, 0, this.ColumnCount, lower.ColumnCount, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                return result;
            },
            /**
             * Diagonally stacks his matrix on top of the given matrix and places the combined matrix into the result matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @throws If lower is {@link ArgumentNullException}.
             * @throws If the result matrix is {@link ArgumentNullException}.
             * @throws If the result matrix's dimensions are not (this.Rows + lower.rows) x (this.Columns + lower.Columns).
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    lower     The lower, right matrix.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The combined matrix
             * @return  {void}
             * @see {@link Stack(Matrix{T}, Matrix{T})}
             * @see {@link Append(Matrix{T}, Matrix{T})}
             */
            DiagonalStack$1: function (lower, result) {
                if (lower == null) {
                    throw new System.ArgumentNullException.$ctor1("lower");
                }

                if (result == null) {
                    throw new System.ArgumentNullException.$ctor1("result");
                }

                if (result.RowCount !== ((this.RowCount + lower.RowCount) | 0) || result.ColumnCount !== ((this.ColumnCount + lower.ColumnCount) | 0)) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(T).DimensionsDontMatch$2(System.ArgumentException, this, result, "result");
                }

                this.Storage.CopySubMatrixToUnchecked(result.Storage, 0, 0, this.RowCount, 0, 0, this.ColumnCount, MathNet.Numerics.LinearAlgebra.ExistingData.Clear);
                lower.Storage.CopySubMatrixToUnchecked(result.Storage, 0, this.RowCount, lower.RowCount, 0, this.ColumnCount, lower.ColumnCount, MathNet.Numerics.LinearAlgebra.ExistingData.Clear);
            },
            /**
             * Evaluates whether this matrix is symmetric.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {boolean}
             */
            IsSymmetric: function () {
                if (this.RowCount !== this.ColumnCount) {
                    return false;
                }

                for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                    for (var column = (row + 1) | 0; column < this.ColumnCount; column = (column + 1) | 0) {
                        if (!Bridge.equals(this.At(row, column), this.At(column, row))) {
                            return false;
                        }
                    }
                }

                return true;
            },
            /**
             * Returns this matrix as a multidimensional array.
             The returned array will be independent from this matrix.
             A new memory block will be allocated for the array.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {Array.<T>}        A multidimensional containing the values of this matrix.
             */
            ToArray: function () {
                return this.Storage.ToArray();
            },
            /**
             * Returns the matrix's elements as an array with the data laid out column by column (column major).
             The returned array will be independent from this matrix.
             A new memory block will be allocated for the array.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @example <pre>
             1, 2, 3
             4, 5, 6  will be returned as  1, 4, 7, 2, 5, 8, 3, 6, 9
             7, 8, 9
             </pre>
             *
             *
             * @return  {Array.<T>}        An array containing the matrix's elements.
             * @see {@link ToRowMajorArray}
             * @see {@link Enumerate(Zeros)}
             */
            ToColumnMajorArray: function () {
                return this.Storage.ToColumnMajorArray();
            },
            /**
             * Returns the matrix's elements as an array with the data laid row by row (row major).
             The returned array will be independent from this matrix.
             A new memory block will be allocated for the array.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @example <pre>
             1, 2, 3
             4, 5, 6  will be returned as  1, 2, 3, 4, 5, 6, 7, 8, 9
             7, 8, 9
             </pre>
             *
             *
             * @return  {Array.<T>}        An array containing the matrix's elements.
             * @see {@link ToColumnMajorArray}
             * @see {@link Enumerate(Zeros)}
             */
            ToRowMajorArray: function () {
                return this.Storage.ToRowMajorArray();
            },
            /**
             * Returns this matrix as array of row arrays.
             The returned arrays will be independent from this matrix.
             A new memory block will be allocated for the arrays.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {Array.<Array.<T>>}
             */
            ToRowArrays: function () {
                return this.Storage.ToRowArrays();
            },
            /**
             * Returns this matrix as array of column arrays.
             The returned arrays will be independent from this matrix.
             A new memory block will be allocated for the arrays.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {Array.<Array.<T>>}
             */
            ToColumnArrays: function () {
                return this.Storage.ToColumnArrays();
            },
            /**
             * Returns the internal multidimensional array of this matrix if, and only if, this matrix is stored by such an array internally.
             Otherwise returns null. Changes to the returned array and the matrix will affect each other.
             Use ToArray instead if you always need an independent array.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {Array.<T>}
             */
            AsArray: function () {
                return this.Storage.AsArray();
            },
            /**
             * Returns the internal column by column (column major) array of this matrix if, and only if, this matrix is stored by such arrays internally.
             Otherwise returns null. Changes to the returned arrays and the matrix will affect each other.
             Use ToColumnMajorArray instead if you always need an independent array.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @example <pre>
             1, 2, 3
             4, 5, 6  will be returned as  1, 4, 7, 2, 5, 8, 3, 6, 9
             7, 8, 9
             </pre>
             *
             *
             * @return  {Array.<T>}        An array containing the matrix's elements.
             * @see {@link ToRowMajorArray}
             * @see {@link Enumerate(Zeros)}
             */
            AsColumnMajorArray: function () {
                return this.Storage.AsColumnMajorArray();
            },
            /**
             * Returns the internal row by row (row major) array of this matrix if, and only if, this matrix is stored by such arrays internally.
             Otherwise returns null. Changes to the returned arrays and the matrix will affect each other.
             Use ToRowMajorArray instead if you always need an independent array.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @example <pre>
             1, 2, 3
             4, 5, 6  will be returned as  1, 2, 3, 4, 5, 6, 7, 8, 9
             7, 8, 9
             </pre>
             *
             *
             * @return  {Array.<T>}        An array containing the matrix's elements.
             * @see {@link ToColumnMajorArray}
             * @see {@link Enumerate(Zeros)}
             */
            AsRowMajorArray: function () {
                return this.Storage.AsRowMajorArray();
            },
            /**
             * Returns the internal row arrays of this matrix if, and only if, this matrix is stored by such arrays internally.
             Otherwise returns null. Changes to the returned arrays and the matrix will affect each other.
             Use ToRowArrays instead if you always need an independent array.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {Array.<Array.<T>>}
             */
            AsRowArrays: function () {
                return this.Storage.AsRowArrays();
            },
            /**
             * Returns the internal column arrays of this matrix if, and only if, this matrix is stored by such arrays internally.
             Otherwise returns null. Changes to the returned arrays and the matrix will affect each other.
             Use ToColumnArrays instead if you always need an independent array.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {Array.<Array.<T>>}
             */
            AsColumnArrays: function () {
                return this.Storage.AsColumnArrays();
            },
            /**
             * Returns an IEnumerable that can be used to iterate through all values of the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {System.Collections.Generic.IEnumerable$1}
             */
            Enumerate: function () {
                return this.Storage.Enumerate();
            },
            /**
             * Returns an IEnumerable that can be used to iterate through all values of the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}        zeros
             * @return  {System.Collections.Generic.IEnumerable$1}
             */
            Enumerate$1: function (zeros) {
                if (zeros === void 0) { zeros = 1; }
                switch (zeros) {
                    case MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip: 
                        return this.Storage.EnumerateNonZero();
                    default: 
                        return this.Storage.Enumerate();
                }
            },
            /**
             * Returns an IEnumerable that can be used to iterate through all values of the matrix and their index.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {System.Collections.Generic.IEnumerable$1}
             */
            EnumerateIndexed: function () {
                return this.Storage.EnumerateIndexed();
            },
            /**
             * Returns an IEnumerable that can be used to iterate through all values of the matrix and their index.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}        zeros
             * @return  {System.Collections.Generic.IEnumerable$1}
             */
            EnumerateIndexed$1: function (zeros) {
                if (zeros === void 0) { zeros = 1; }
                switch (zeros) {
                    case MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip: 
                        return this.Storage.EnumerateNonZeroIndexed();
                    default: 
                        return this.Storage.EnumerateIndexed();
                }
            },
            /**
             * Returns an IEnumerable that can be used to iterate through all columns of the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {System.Collections.Generic.IEnumerable$1}
             */
            EnumerateColumns: function () {
                return new (Bridge.GeneratorEnumerable$1(MathNet.Numerics.LinearAlgebra.Vector$1(T)))(Bridge.fn.bind(this, function ()  {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        i,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(MathNet.Numerics.LinearAlgebra.Vector$1(T)))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        i = 0;
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ( i < this.ColumnCount ) {
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 5;
                                        continue;
                                    }
                                    case 2: {
                                        $enumerator.current = this.Column(i);
                                            $step = 3;
                                            return true;
                                    }
                                    case 3: {
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        i = (i + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 5: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }));
            },
            /**
             * Returns an IEnumerable that can be used to iterate through a subset of all columns of the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {number}                                      index     The column to start enumerating over.
             * @param   {number}                                      length    The number of columns to enumerating over.
             * @return  {System.Collections.Generic.IEnumerable$1}
             */
            EnumerateColumns$1: function (index, length) {
                return new (Bridge.GeneratorEnumerable$1(MathNet.Numerics.LinearAlgebra.Vector$1(T)))(Bridge.fn.bind(this, function (index, length) {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        maxIndex,
                        i,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(MathNet.Numerics.LinearAlgebra.Vector$1(T)))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        maxIndex = Math.min(((index + length) | 0), this.ColumnCount);
                                            i = Math.max(index, 0);
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ( i < maxIndex ) {
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 5;
                                        continue;
                                    }
                                    case 2: {
                                        $enumerator.current = this.Column(i);
                                            $step = 3;
                                            return true;
                                    }
                                    case 3: {
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        i = (i + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 5: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }, arguments));
            },
            /**
             * Returns an IEnumerable that can be used to iterate through all columns of the matrix and their index.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {System.Collections.Generic.IEnumerable$1}
             */
            EnumerateColumnsIndexed: function () {
                return new (Bridge.GeneratorEnumerable$1(System.Tuple$2(System.Int32,MathNet.Numerics.LinearAlgebra.Vector$1(T))))(Bridge.fn.bind(this, function ()  {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        i,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Tuple$2(System.Int32,MathNet.Numerics.LinearAlgebra.Vector$1(T))))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        i = 0;
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ( i < this.ColumnCount ) {
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 5;
                                        continue;
                                    }
                                    case 2: {
                                        $enumerator.current = { Item1: i, Item2: this.Column(i) };
                                            $step = 3;
                                            return true;
                                    }
                                    case 3: {
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        i = (i + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 5: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }));
            },
            /**
             * Returns an IEnumerable that can be used to iterate through a subset of all columns of the matrix and their index.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {number}                                      index     The column to start enumerating over.
             * @param   {number}                                      length    The number of columns to enumerating over.
             * @return  {System.Collections.Generic.IEnumerable$1}
             */
            EnumerateColumnsIndexed$1: function (index, length) {
                return new (Bridge.GeneratorEnumerable$1(System.Tuple$2(System.Int32,MathNet.Numerics.LinearAlgebra.Vector$1(T))))(Bridge.fn.bind(this, function (index, length) {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        maxIndex,
                        i,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Tuple$2(System.Int32,MathNet.Numerics.LinearAlgebra.Vector$1(T))))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        maxIndex = Math.min(((index + length) | 0), this.ColumnCount);
                                            i = Math.max(index, 0);
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ( i < maxIndex ) {
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 5;
                                        continue;
                                    }
                                    case 2: {
                                        $enumerator.current = { Item1: i, Item2: this.Column(i) };
                                            $step = 3;
                                            return true;
                                    }
                                    case 3: {
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        i = (i + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 5: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }, arguments));
            },
            /**
             * Returns an IEnumerable that can be used to iterate through all rows of the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {System.Collections.Generic.IEnumerable$1}
             */
            EnumerateRows: function () {
                return new (Bridge.GeneratorEnumerable$1(MathNet.Numerics.LinearAlgebra.Vector$1(T)))(Bridge.fn.bind(this, function ()  {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        i,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(MathNet.Numerics.LinearAlgebra.Vector$1(T)))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        i = 0;
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ( i < this.RowCount ) {
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 5;
                                        continue;
                                    }
                                    case 2: {
                                        $enumerator.current = this.Row(i);
                                            $step = 3;
                                            return true;
                                    }
                                    case 3: {
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        i = (i + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 5: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }));
            },
            /**
             * Returns an IEnumerable that can be used to iterate through a subset of all rows of the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {number}                                      index     The row to start enumerating over.
             * @param   {number}                                      length    The number of rows to enumerating over.
             * @return  {System.Collections.Generic.IEnumerable$1}
             */
            EnumerateRows$1: function (index, length) {
                return new (Bridge.GeneratorEnumerable$1(MathNet.Numerics.LinearAlgebra.Vector$1(T)))(Bridge.fn.bind(this, function (index, length) {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        maxIndex,
                        i,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(MathNet.Numerics.LinearAlgebra.Vector$1(T)))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        maxIndex = Math.min(((index + length) | 0), this.RowCount);
                                            i = Math.max(index, 0);
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ( i < maxIndex ) {
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 5;
                                        continue;
                                    }
                                    case 2: {
                                        $enumerator.current = this.Row(i);
                                            $step = 3;
                                            return true;
                                    }
                                    case 3: {
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        i = (i + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 5: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }, arguments));
            },
            /**
             * Returns an IEnumerable that can be used to iterate through all rows of the matrix and their index.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {System.Collections.Generic.IEnumerable$1}
             */
            EnumerateRowsIndexed: function () {
                return new (Bridge.GeneratorEnumerable$1(System.Tuple$2(System.Int32,MathNet.Numerics.LinearAlgebra.Vector$1(T))))(Bridge.fn.bind(this, function ()  {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        i,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Tuple$2(System.Int32,MathNet.Numerics.LinearAlgebra.Vector$1(T))))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        i = 0;
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ( i < this.RowCount ) {
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 5;
                                        continue;
                                    }
                                    case 2: {
                                        $enumerator.current = { Item1: i, Item2: this.Row(i) };
                                            $step = 3;
                                            return true;
                                    }
                                    case 3: {
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        i = (i + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 5: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }));
            },
            /**
             * Returns an IEnumerable that can be used to iterate through a subset of all rows of the matrix and their index.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {number}                                      index     The row to start enumerating over.
             * @param   {number}                                      length    The number of rows to enumerating over.
             * @return  {System.Collections.Generic.IEnumerable$1}
             */
            EnumerateRowsIndexed$1: function (index, length) {
                return new (Bridge.GeneratorEnumerable$1(System.Tuple$2(System.Int32,MathNet.Numerics.LinearAlgebra.Vector$1(T))))(Bridge.fn.bind(this, function (index, length) {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        maxIndex,
                        i,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Tuple$2(System.Int32,MathNet.Numerics.LinearAlgebra.Vector$1(T))))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        maxIndex = Math.min(((index + length) | 0), this.RowCount);
                                            i = Math.max(index, 0);
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ( i < maxIndex ) {
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 5;
                                        continue;
                                    }
                                    case 2: {
                                        $enumerator.current = { Item1: i, Item2: this.Row(i) };
                                            $step = 3;
                                            return true;
                                    }
                                    case 3: {
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        i = (i + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 5: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }, arguments));
            },
            /**
             * Applies a function to each value of this matrix and replaces the value with its result.
             If forceMapZero is not set to true, zero values may or may not be skipped depending
             on the actual data storage implementation (relevant mostly for sparse matrices).
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {System.Func}                             f        
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}    zeros
             * @return  {void}
             */
            MapInplace: function (f, zeros) {
                if (zeros === void 0) { zeros = 0; }
                this.Storage.MapInplace(f, zeros);
            },
            /**
             * Applies a function to each value of this matrix and replaces the value with its result.
             The row and column indices of each value (zero-based) are passed as first arguments to the function.
             If forceMapZero is not set to true, zero values may or may not be skipped depending
             on the actual data storage implementation (relevant mostly for sparse matrices).
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {System.Func}                             f        
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}    zeros
             * @return  {void}
             */
            MapIndexedInplace: function (f, zeros) {
                if (zeros === void 0) { zeros = 0; }
                this.Storage.MapIndexedInplace(f, zeros);
            },
            /**
             * Applies a function to each value of this matrix and replaces the value in the result matrix.
             If forceMapZero is not set to true, zero values may or may not be skipped depending
             on the actual data storage implementation (relevant mostly for sparse matrices).
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {System.Func}                                f         
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}       zeros
             * @return  {void}
             */
            Map$1: function (f, result, zeros) {
                if (zeros === void 0) { zeros = 0; }
                if (Bridge.referenceEquals(this, result)) {
                    this.Storage.MapInplace(f, zeros);
                } else {
                    this.Storage.MapTo(T, result.Storage, f, zeros, zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include ? MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros : MathNet.Numerics.LinearAlgebra.ExistingData.Clear);
                }
            },
            /**
             * Applies a function to each value of this matrix and returns the results as a new matrix.
             If forceMapZero is not set to true, zero values may or may not be skipped depending
             on the actual data storage implementation (relevant mostly for sparse matrices).
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {Function}                                   TU       
             * @param   {System.Func}                                f        
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}       zeros
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            Map: function (TU, f, zeros) {
                if (zeros === void 0) { zeros = 0; }
                var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(TU).Matrix;
                var result = m_builder.SameAs$4(T, this, this.RowCount, this.ColumnCount, zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include);
                this.Storage.MapToUnchecked(TU, result.Storage, f, zeros, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                return result;
            },
            /**
             * Applies a function to each value of this matrix and replaces the value in the result matrix.
             The index of each value (zero-based) is passed as first argument to the function.
             If forceMapZero is not set to true, zero values may or may not be skipped depending
             on the actual data storage implementation (relevant mostly for sparse matrices).
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {System.Func}                                f         
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}       zeros
             * @return  {void}
             */
            MapIndexed$1: function (f, result, zeros) {
                if (zeros === void 0) { zeros = 0; }
                if (Bridge.referenceEquals(this, result)) {
                    this.Storage.MapIndexedInplace(f, zeros);
                } else {
                    this.Storage.MapIndexedTo(T, result.Storage, f, zeros, zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include ? MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros : MathNet.Numerics.LinearAlgebra.ExistingData.Clear);
                }
            },
            /**
             * Applies a function to each value of this matrix and returns the results as a new matrix.
             The index of each value (zero-based) is passed as first argument to the function.
             If forceMapZero is not set to true, zero values may or may not be skipped depending
             on the actual data storage implementation (relevant mostly for sparse matrices).
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {Function}                                   TU       
             * @param   {System.Func}                                f        
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}       zeros
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            MapIndexed: function (TU, f, zeros) {
                if (zeros === void 0) { zeros = 0; }
                var m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(TU).Matrix;
                var result = m_builder.SameAs$4(T, this, this.RowCount, this.ColumnCount, zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include);
                this.Storage.MapIndexedToUnchecked(TU, result.Storage, f, zeros, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                return result;
            },
            /**
             * Applies a function to each value of this matrix and replaces the value in the result matrix.
             If forceMapZero is not set to true, zero values may or may not be skipped depending
             on the actual data storage implementation (relevant mostly for sparse matrices).
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {Function}                                   TU        
             * @param   {System.Func}                                f         
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}       zeros
             * @return  {void}
             */
            MapConvert: function (TU, f, result, zeros) {
                if (zeros === void 0) { zeros = 0; }
                this.Storage.MapTo(TU, result.Storage, f, zeros, zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include ? MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros : MathNet.Numerics.LinearAlgebra.ExistingData.Clear);
            },
            /**
             * Applies a function to each value of this matrix and replaces the value in the result matrix.
             The index of each value (zero-based) is passed as first argument to the function.
             If forceMapZero is not set to true, zero values may or may not be skipped depending
             on the actual data storage implementation (relevant mostly for sparse matrices).
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {Function}                                   TU        
             * @param   {System.Func}                                f         
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}       zeros
             * @return  {void}
             */
            MapIndexedConvert: function (TU, f, result, zeros) {
                if (zeros === void 0) { zeros = 0; }
                this.Storage.MapIndexedTo(TU, result.Storage, f, zeros, zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include ? MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros : MathNet.Numerics.LinearAlgebra.ExistingData.Clear);
            },
            /**
             * For each row, applies a function f to each element of the row, threading an accumulator argument through the computation.
             Returns an array with the resulting accumulator states for each row.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {Function}                                TU       
             * @param   {System.Func}                             f        
             * @param   {TU}                                      state    
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}    zeros
             * @return  {Array.<TU>}
             */
            FoldByRow: function (TU, f, state, zeros) {
                if (zeros === void 0) { zeros = 0; }
                var result = System.Array.init(this.RowCount, function (){
                    return Bridge.getDefaultValue(TU);
                }, TU);
                if (!System.Collections.Generic.EqualityComparer$1(TU).def.equals2(state, Bridge.getDefaultValue(TU))) {

                    for (var i = 0; i < result.length; i = (i + 1) | 0) {
                        result[System.Array.index(i, result)] = state;

                    }
                }
                this.Storage.FoldByRowUnchecked(TU, result, f, function (x, c) {
                    return x;
                }, result, zeros);
                return result;
            },
            /**
             * For each column, applies a function f to each element of the column, threading an accumulator argument through the computation.
             Returns an array with the resulting accumulator states for each column.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {Function}                                TU       
             * @param   {System.Func}                             f        
             * @param   {TU}                                      state    
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}    zeros
             * @return  {Array.<TU>}
             */
            FoldByColumn: function (TU, f, state, zeros) {
                if (zeros === void 0) { zeros = 0; }
                var result = System.Array.init(this.ColumnCount, function (){
                    return Bridge.getDefaultValue(TU);
                }, TU);
                if (!System.Collections.Generic.EqualityComparer$1(TU).def.equals2(state, Bridge.getDefaultValue(TU))) {

                    for (var i = 0; i < result.length; i = (i + 1) | 0) {
                        result[System.Array.index(i, result)] = state;
                    }

                }
                this.Storage.FoldByColumnUnchecked(TU, result, f, function (x, c) {
                    return x;
                }, result, zeros);
                return result;
            },
            /**
             * Applies a function f to each row vector, threading an accumulator vector argument through the computation.
             Returns the resulting accumulator vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {Function}                                   TU       
             * @param   {System.Func}                                f        
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    state
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            FoldRows: function (TU, f, state) {
                var $t;
                $t = Bridge.getEnumerator(this.EnumerateRows(), MathNet.Numerics.LinearAlgebra.Vector$1(T));
                try {
                    while ($t.moveNext()) {
                        var vector = $t.Current;
                        state = f(state, vector);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                return state;
            },
            /**
             * Applies a function f to each column vector, threading an accumulator vector argument through the computation.
             Returns the resulting accumulator vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {Function}                                   TU       
             * @param   {System.Func}                                f        
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    state
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            FoldColumns: function (TU, f, state) {
                var $t;
                $t = Bridge.getEnumerator(this.EnumerateColumns(), MathNet.Numerics.LinearAlgebra.Vector$1(T));
                try {
                    while ($t.moveNext()) {
                        var vector = $t.Current;
                        state = f(state, vector);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                return state;
            },
            /**
             * Reduces all row vectors by applying a function between two of them, until only a single vector is left.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {System.Func}                                f
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            ReduceRows: function (f) {
                return System.Linq.Enumerable.from(this.EnumerateRows(), MathNet.Numerics.LinearAlgebra.Vector$1(T)).aggregate(f);
            },
            /**
             * Reduces all column vectors by applying a function between two of them, until only a single vector is left.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {System.Func}                                f
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            ReduceColumns: function (f) {
                return System.Linq.Enumerable.from(this.EnumerateColumns(), MathNet.Numerics.LinearAlgebra.Vector$1(T)).aggregate(f);
            },
            /**
             * Applies a function to each value pair of two matrices and replaces the value in the result vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {System.Func}                                f         
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}       zeros
             * @return  {void}
             */
            Map2$1: function (f, other, result, zeros) {
                if (zeros === void 0) { zeros = 0; }
                this.Storage.Map2To(result.Storage, other.Storage, f, zeros, MathNet.Numerics.LinearAlgebra.ExistingData.Clear);
            },
            /**
             * Applies a function to each value pair of two matrices and returns the results as a new vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {System.Func}                                f        
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other    
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}       zeros
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            Map2: function (f, other, zeros) {
                if (zeros === void 0) { zeros = 0; }
                var result = this.m_builder.SameAs$3(T, this);
                this.Storage.Map2To(result.Storage, other.Storage, f, zeros, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                return result;
            },
            /**
             * Applies a function to update the status with each value pair of two matrices and returns the resulting status.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {Function}                                   TOther    
             * @param   {Function}                                   TState    
             * @param   {System.Func}                                f         
             * @param   {TState}                                     state     
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}       zeros
             * @return  {TState}
             */
            Fold2: function (TOther, TState, f, state, other, zeros) {
                if (zeros === void 0) { zeros = 0; }
                return this.Storage.Fold2(TOther, TState, other.Storage, f, state, zeros);
            },
            /**
             * Returns a tuple with the index and value of the first element satisfying a predicate, or null if none is found.
             Zero elements may be skipped on sparse data structures if allowed (default).
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {System.Func}                             predicate    
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}    zeros
             * @return  {System.Tuple$3}
             */
            Find: function (predicate, zeros) {
                if (zeros === void 0) { zeros = 0; }
                return this.Storage.Find(predicate, zeros);
            },
            /**
             * Returns a tuple with the index and values of the first element pair of two matrices of the same size satisfying a predicate, or null if none is found.
             Zero elements may be skipped on sparse data structures if allowed (default).
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {Function}                                   TOther       
             * @param   {System.Func}                                predicate    
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other        
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}       zeros
             * @return  {System.Tuple$4}
             */
            Find2: function (TOther, predicate, other, zeros) {
                if (zeros === void 0) { zeros = 0; }
                return this.Storage.Find2(TOther, other.Storage, predicate, zeros);
            },
            /**
             * Returns true if at least one element satisfies a predicate.
             Zero elements may be skipped on sparse data structures if allowed (default).
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {System.Func}                             predicate    
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}    zeros
             * @return  {boolean}
             */
            Exists: function (predicate, zeros) {
                if (zeros === void 0) { zeros = 0; }
                return this.Storage.Find(predicate, zeros) != null;
            },
            /**
             * Returns true if at least one element pairs of two matrices of the same size satisfies a predicate.
             Zero elements may be skipped on sparse data structures if allowed (default).
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {Function}                                   TOther       
             * @param   {System.Func}                                predicate    
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other        
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}       zeros
             * @return  {boolean}
             */
            Exists2: function (TOther, predicate, other, zeros) {
                if (zeros === void 0) { zeros = 0; }
                return this.Storage.Find2(TOther, other.Storage, predicate, zeros) != null;
            },
            /**
             * Returns true if all elements satisfy a predicate.
             Zero elements may be skipped on sparse data structures if allowed (default).
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {System.Func}                             predicate    
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}    zeros
             * @return  {boolean}
             */
            ForAll: function (predicate, zeros) {
                if (zeros === void 0) { zeros = 0; }
                return this.Storage.Find(function (x) {
                    return !predicate(x);
                }, zeros) == null;
            },
            /**
             * Returns true if all element pairs of two matrices of the same size satisfy a predicate.
             Zero elements may be skipped on sparse data structures if allowed (default).
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Matrix$1
             * @memberof MathNet.Numerics.LinearAlgebra.Matrix$1
             * @param   {Function}                                   TOther       
             * @param   {System.Func}                                predicate    
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other        
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}       zeros
             * @return  {boolean}
             */
            ForAll2: function (TOther, predicate, other, zeros) {
                if (zeros === void 0) { zeros = 0; }
                return this.Storage.Find2(TOther, other.Storage, function (x, y) {
                    return !predicate(x, y);
                }, zeros) == null;
            }
        }
    }; });

    Bridge.define("MathNet.Numerics.LinearAlgebra.Vector$1", function (T) { return {
        inherits: function () { return [System.IFormattable,System.IEquatable$1(MathNet.Numerics.LinearAlgebra.Vector$1(T)),System.Collections.IList,System.Collections.Generic.IList$1(T),System.ICloneable]; },
        statics: {
            fields: {
                /**
                 * The zero value for type T.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @type T
                 */
                Zero: null,
                /**
                 * The value of 1.0 for type T.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @type T
                 */
                One: null
            },
            ctors: {
                init: function () {
                    this.Zero = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Vector.Zero;
                    this.One = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Vector.One;
                }
            },
            methods: {
                OuterProduct: function (u, v) {
                    return u.OuterProduct(v);
                },
                FormatStringArrayToString: function (array, columnSeparator, rowSeparator) {
                    var rows = System.Array.getLength(array, 0);
                    var cols = System.Array.getLength(array, 1);

                    var widths = System.Array.init(cols, 0, System.Int32);
                    for (var i = 0; i < rows; i = (i + 1) | 0) {
                        for (var j = 0; j < cols; j = (j + 1) | 0) {
                            widths[System.Array.index(j, widths)] = Math.max(widths[System.Array.index(j, widths)], array.get([i, j]).length);
                        }
                    }

                    var sb = new System.Text.StringBuilder();
                    for (var i1 = 0; i1 < rows; i1 = (i1 + 1) | 0) {
                        sb.append(System.String.alignString(array.get([i1, 0]), widths[System.Array.index(0, widths)]));
                        for (var j1 = 1; j1 < cols; j1 = (j1 + 1) | 0) {
                            sb.append(columnSeparator);
                            sb.append(System.String.alignString(array.get([i1, j1]), widths[System.Array.index(j1, widths)]));
                        }
                        sb.append(rowSeparator);
                    }
                    return sb.toString();
                },
                op_DotMultiply: function (x, y) {
                    return x.PointwiseMultiply(y);
                },
                op_DotDivide: function (dividend, divisor) {
                    return dividend.PointwiseDivide(divisor);
                },
                op_DotPercent: function (dividend, divisor) {
                    return dividend.PointwiseRemainder(divisor);
                },
                op_DotHat$1: function (vector, exponent) {
                    return vector.PointwisePower$1(exponent);
                },
                op_DotHat: function (vector, exponent) {
                    return vector.PointwisePower(exponent);
                },
                /**
                 * Computes the sqrt of a vector pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    x    The input vector
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                Sqrt: function (x) {
                    return x.PointwiseSqrt();
                },
                /**
                 * Computes the exponential of a vector pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    x    The input vector
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                Exp: function (x) {
                    return x.PointwiseUnary(Bridge.fn.cacheBind(x, x.DoPointwiseExp));
                },
                /**
                 * Computes the log of a vector pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    x    The input vector
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                Log: function (x) {
                    return x.PointwiseUnary(Bridge.fn.cacheBind(x, x.PointwiseLog$1));
                },
                /**
                 * Computes the log10 of a vector pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    x    The input vector
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                Log10: function (x) {
                    return x.PointwiseLog10();
                },
                /**
                 * Computes the sin of a vector pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    x    The input vector
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                Sin: function (x) {
                    return x.PointwiseSin();
                },
                /**
                 * Computes the cos of a vector pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    x    The input vector
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                Cos: function (x) {
                    return x.PointwiseCos();
                },
                /**
                 * Computes the tan of a vector pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    x    The input vector
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                Tan: function (x) {
                    return x.PointwiseTan();
                },
                /**
                 * Computes the asin of a vector pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    x    The input vector
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                Asin: function (x) {
                    return x.PointwiseAsin();
                },
                /**
                 * Computes the acos of a vector pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    x    The input vector
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                Acos: function (x) {
                    return x.PointwiseAcos();
                },
                /**
                 * Computes the atan of a vector pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    x    The input vector
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                Atan: function (x) {
                    return x.PointwiseAtan();
                },
                /**
                 * Computes the sinh of a vector pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    x    The input vector
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                Sinh: function (x) {
                    return x.PointwiseSinh();
                },
                /**
                 * Computes the cosh of a vector pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    x    The input vector
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                Cosh: function (x) {
                    return x.PointwiseCosh();
                },
                /**
                 * Computes the tanh of a vector pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    x    The input vector
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                Tanh: function (x) {
                    return x.PointwiseTanh();
                },
                /**
                 * Computes the absolute value of a vector pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    x    The input vector
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                Abs: function (x) {
                    return x.PointwiseAbs();
                },
                /**
                 * Computes the floor of a vector pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    x    The input vector
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                Floor: function (x) {
                    return x.PointwiseFloor();
                },
                /**
                 * Computes the ceiling of a vector pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    x    The input vector
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                Ceiling: function (x) {
                    return x.PointwiseCeiling();
                },
                /**
                 * Computes the rounded value of a vector pointwise
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    x    The input vector
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                Round: function (x) {
                    return x.PointwiseRound();
                }/**
                 * Returns a <strong>Vector</strong> containing the same values of <b />.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    rightSide    The vector to get the values from.
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}                 A vector containing the same values as <b />.
                 */
                ,
                op_UnaryPlus: function (rightSide) {
                    return rightSide.Clone();
                }/**
                 * Returns a <strong>Vector</strong> containing the negated values of <b />.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    rightSide    The vector to get the values from.
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}                 A vector containing the negated values as <b />.
                 */
                ,
                op_UnaryNegation: function (rightSide) {
                    return rightSide.Negate();
                }/**
                 * Adds two <strong>Vectors</strong> together and returns the results.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @throws If <b /> and <b /> are not the same size.
                 * @throws If <b /> or <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    leftSide     One of the vectors to add.
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    rightSide    The other vector to add.
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}                 The result of the addition.
                 */
                ,
                op_Addition$2: function (leftSide, rightSide) {
                    return leftSide.Add$1(rightSide);
                }/**
                 * Adds a scalar to each element of a vector.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    leftSide     The vector to add to.
                 * @param   {T}                                          rightSide    The scalar value to add.
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}                 The result of the addition.
                 */
                ,
                op_Addition$1: function (leftSide, rightSide) {
                    return leftSide.Add(rightSide);
                }/**
                 * Adds a scalar to each element of a vector.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {T}                                          leftSide     The scalar value to add.
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    rightSide    The vector to add to.
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}                 The result of the addition.
                 */
                ,
                op_Addition: function (leftSide, rightSide) {
                    return rightSide.Add(leftSide);
                }/**
                 * Subtracts two <strong>Vectors</strong> and returns the results.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @throws If <b /> and <b /> are not the same size.
                 * @throws If <b /> or <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    leftSide     The vector to subtract from.
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    rightSide    The vector to subtract.
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}                 The result of the subtraction.
                 */
                ,
                op_Subtraction$2: function (leftSide, rightSide) {
                    return leftSide.Subtract$1(rightSide);
                }/**
                 * Subtracts a scalar from each element of a vector.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    leftSide     The vector to subtract from.
                 * @param   {T}                                          rightSide    The scalar value to subtract.
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}                 The result of the subtraction.
                 */
                ,
                op_Subtraction$1: function (leftSide, rightSide) {
                    return leftSide.Subtract(rightSide);
                }/**
                 * Subtracts each element of a vector from a scalar.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {T}                                          leftSide     The scalar value to subtract from.
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    rightSide    The vector to subtract.
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}                 The result of the subtraction.
                 */
                ,
                op_Subtraction: function (leftSide, rightSide) {
                    return rightSide.SubtractFrom(leftSide);
                }/**
                 * Multiplies a vector with a scalar.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    leftSide     The vector to scale.
                 * @param   {T}                                          rightSide    The scalar value.
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}                 The result of the multiplication.
                 */
                ,
                op_Multiply$2: function (leftSide, rightSide) {
                    return leftSide.Multiply(rightSide);
                }/**
                 * Multiplies a vector with a scalar.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {T}                                          leftSide     The scalar value.
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    rightSide    The vector to scale.
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}                 The result of the multiplication.
                 */
                ,
                op_Multiply$1: function (leftSide, rightSide) {
                    return rightSide.Multiply(leftSide);
                }/**
                 * Computes the dot product between two <strong>Vectors</strong>.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @throws If <b /> and <b /> are not the same size.
                 * @throws If <b /> or <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    leftSide     The left row vector.
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    rightSide    The right column vector.
                 * @return  {T}                                                       The dot product between the two vectors.
                 */
                ,
                op_Multiply: function (leftSide, rightSide) {
                    return leftSide.DotProduct(rightSide);
                }/**
                 * Divides a scalar with a vector.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {T}                                          dividend    The scalar to divide.
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    divisor     The vector.
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}                The result of the division.
                 */
                ,
                op_Division: function (dividend, divisor) {
                    return divisor.DivideByThis(dividend);
                }/**
                 * Divides a vector with a scalar.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    dividend    The vector to divide.
                 * @param   {T}                                          divisor     The scalar value.
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}                The result of the division.
                 */
                ,
                op_Division$1: function (dividend, divisor) {
                    return dividend.Divide(divisor);
                }/**
                 * Pointwise divides two <strong>Vectors</strong>.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @throws If <b /> and <b /> are not the same size.
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    dividend    The vector to divide.
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    divisor     The other vector.
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}                The result of the division.
                 */
                ,
                op_Division$2: function (dividend, divisor) {
                    return dividend.PointwiseDivide(divisor);
                }/**
                 * Computes the remainder (% operator), where the result has the sign of the dividend,
                 of each element of the vector of the given divisor.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    dividend    The vector whose elements we want to compute the remainder of.
                 * @param   {T}                                          divisor     The divisor to use.
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                ,
                op_Modulus$1: function (dividend, divisor) {
                    return dividend.Remainder(divisor);
                }/**
                 * Computes the remainder (% operator), where the result has the sign of the dividend,
                 of the given dividend of each element of the vector.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {T}                                          dividend    The dividend we want to compute the remainder of.
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    divisor     The vector whose elements we want to use as divisor.
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                ,
                op_Modulus: function (dividend, divisor) {
                    return divisor.RemainderByThis(dividend);
                }/**
                 * Computes the pointwise remainder (% operator), where the result has the sign of the dividend,
                 of each element of two vectors.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Vector$1
                 * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
                 * @throws If <b /> and <b /> are not the same size.
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    dividend    The vector whose elements we want to compute the remainder of.
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    divisor     The divisor to use.
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                ,
                op_Modulus$2: function (dividend, divisor) {
                    return dividend.PointwiseRemainder(divisor);
                }
            }
        },
        fields: {
            v_builder: null,
            m_builder: null,
            /**
             * Gets the raw vector data storage.
             *
             * @instance
             * @public
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @function Storage
             * @type MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1
             */
            Storage: null,
            /**
             * Gets the length or number of dimensions of this vector.
             *
             * @instance
             * @public
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @function Count
             * @type number
             */
            Count: 0
        },
        props: {
            System$Collections$Generic$ICollection$1$IsReadOnly: {
                get: function () {
                    return false;
                }
            },
            System$Collections$IList$IsReadOnly: {
                get: function () {
                    return false;
                }
            },
            System$Collections$IList$IsFixedSize: {
                get: function () {
                    return true;
                }
            },
            System$Collections$ICollection$IsSynchronized: {
                get: function () {
                    return false;
                }
            },
            System$Collections$ICollection$SyncRoot: {
                get: function () {
                    return this.Storage;
                }
            }
        },
        alias: [
            "equalsT", "System$IEquatable$1$MathNet$Numerics$LinearAlgebra$Vector$1$" + Bridge.getTypeAlias(T) + "$equalsT",
            "System$Collections$Generic$IList$1$indexOf", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$indexOf",
            "System$Collections$Generic$IList$1$insert", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$insert",
            "System$Collections$Generic$IList$1$removeAt", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$removeAt",
            "System$Collections$Generic$ICollection$1$IsReadOnly", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$IsReadOnly",
            "System$Collections$Generic$ICollection$1$add", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$add",
            "System$Collections$Generic$ICollection$1$remove", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$remove",
            "System$Collections$Generic$ICollection$1$contains", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$contains",
            "System$Collections$Generic$ICollection$1$copyTo", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$copyTo",
            "System$Collections$Generic$IEnumerable$1$GetEnumerator", "System$Collections$Generic$IEnumerable$1$" + Bridge.getTypeAlias(T) + "$GetEnumerator",
            "format", "System$IFormattable$format",
            "Count", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$Count",
            "Count", "System$Collections$ICollection$Count",
            "getItem", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$getItem",
            "setItem", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$setItem",
            "clear", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$clear",
            "clear", "System$Collections$IList$clear"
        ],
        ctors: {
            init: function () {
                this.v_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Vector;
                this.m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
            },
            /**
             * Initializes a new instance of the Vector class.
             *
             * @instance
             * @protected
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1}    storage
             * @return  {void}
             */
            ctor: function (storage) {
                this.$initialize();
                this.Storage = storage;
                this.Count = storage.Length;
            }
        },
        methods: {
            System$Collections$IList$getItem: function (index) {
                return this.Storage.getItem(index);
            },
            System$Collections$IList$setItem: function (index, value) {
                this.Storage.setItem(index, Bridge.cast(Bridge.unbox(value, T), T));
            },
            /**
             * Gets or sets the value at the given <b />.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If <b /> is negative or
             greater than the size of the vector.
             * @param   {number}    index    The index of the value to get or set.
             * @return  {T}                  The value of the vector at the given <b />.
             */
            getItem: function (index) {
                return this.Storage.getItem(index);
            },
            /**
             * Gets or sets the value at the given <b />.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If <b /> is negative or
             greater than the size of the vector.
             * @param   {number}    index    The index of the value to get or set.
             * @param   {T}         value
             * @return  {void}               The value of the vector at the given <b />.
             */
            setItem: function (index, value) {
                this.Storage.setItem(index, value);
            },
            /**
             * Subtracts each element of the vector from a scalar and stores the result in the result vector.
             *
             * @instance
             * @protected
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {T}                                          scalar    The scalar to subtract from.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result of the subtraction.
             * @return  {void}
             */
            DoSubtractFrom: function (scalar, result) {
                this.DoNegate(result);
                result.DoAdd(scalar, result);
            },
            /**
             * Computes the outer product M[i,j] = u[i]*v[j] of this and another vector and stores the result in the result matrix.
             *
             * @instance
             * @protected
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other     The other vector
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result of the product.
             * @return  {void}
             */
            DoOuterProduct: function (other, result) {
                var work = this.v_builder.Dense$2(this.Count);
                for (var i = 0; i < other.Count; i = (i + 1) | 0) {
                    this.DoMultiply(other.At(i), work);
                    result.SetColumn$1(i, work);
                }
            },
            /**
             * Adds a scalar to each element of the vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {T}                                          scalar    The scalar to add.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}              A copy of the vector with the scalar added.
             */
            Add: function (scalar) {
                if (Bridge.equals(scalar, MathNet.Numerics.LinearAlgebra.Vector$1(T).Zero)) {
                    return this.Clone();
                }

                var result = this.v_builder.SameAs$4(T, this);
                this.DoAdd(scalar, result);
                return result;
            },
            /**
             * Adds a scalar to each element of the vector and stores the result in the result vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @param   {T}                                          scalar    The scalar to add.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result of the addition.
             * @return  {void}
             */
            Add$2: function (scalar, result) {
                if (this.Count !== result.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "result");
                }

                if (Bridge.equals(scalar, MathNet.Numerics.LinearAlgebra.Vector$1(T).Zero)) {
                    this.CopyTo(result);
                    return;
                }

                this.DoAdd(scalar, result);
            },
            /**
             * Adds another vector to this vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other    The vector to add to this one.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}             A new vector containing the sum of both vectors.
             */
            Add$1: function (other) {
                if (this.Count !== other.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "other");
                }

                var result = this.v_builder.SameAs$1(this, other);
                this.DoAdd$1(other, result);
                return result;
            },
            /**
             * Adds another vector to this vector and stores the result into the result vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @throws If this vector and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other     The vector to add to this one.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result of the addition.
             * @return  {void}
             */
            Add$3: function (other, result) {
                if (this.Count !== result.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "result");
                }

                this.DoAdd$1(other, result);
            },
            System$Collections$Generic$ICollection$1$add: function (item) {
                throw new System.NotSupportedException.ctor();
            },
            System$Collections$IList$add: function (value) {
                throw new System.NotSupportedException.ctor();
            },
            /**
             * Subtracts a scalar from each element of the vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {T}                                          scalar    The scalar to subtract.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}              A new vector containing the subtraction of this vector and the scalar.
             */
            Subtract: function (scalar) {
                if (Bridge.equals(scalar, MathNet.Numerics.LinearAlgebra.Vector$1(T).Zero)) {
                    return this.Clone();
                }

                var result = this.v_builder.SameAs$4(T, this);
                this.DoSubtract(scalar, result);
                return result;
            },
            /**
             * Subtracts a scalar from each element of the vector and stores the result in the result vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @param   {T}                                          scalar    The scalar to subtract.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result of the subtraction.
             * @return  {void}
             */
            Subtract$2: function (scalar, result) {
                if (this.Count !== result.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "result");
                }

                if (Bridge.equals(scalar, MathNet.Numerics.LinearAlgebra.Vector$1(T).Zero)) {
                    this.CopyTo(result);
                    return;
                }

                this.DoSubtract(scalar, result);
            },
            /**
             * Subtracts another vector from this vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other    The vector to subtract from this one.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}             A new vector containing the subtraction of the two vectors.
             */
            Subtract$1: function (other) {
                if (this.Count !== other.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "other");
                }

                var result = this.v_builder.SameAs$1(this, other);
                this.DoSubtract$1(other, result);
                return result;
            },
            /**
             * Subtracts another vector to this vector and stores the result into the result vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @throws If this vector and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other     The vector to subtract from this one.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result of the subtraction.
             * @return  {void}
             */
            Subtract$3: function (other, result) {
                if (this.Count !== result.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "result");
                }

                this.DoSubtract$1(other, result);
            },
            /**
             * Subtracts each element of the vector from a scalar.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {T}                                          scalar    The scalar to subtract from.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}              A new vector containing the subtraction of the scalar and this vector.
             */
            SubtractFrom: function (scalar) {
                var result = this.v_builder.SameAs$4(T, this);
                this.DoSubtractFrom(scalar, result);
                return result;
            },
            /**
             * Subtracts each element of the vector from a scalar and stores the result in the result vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @param   {T}                                          scalar    The scalar to subtract from.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result of the subtraction.
             * @return  {void}
             */
            SubtractFrom$1: function (scalar, result) {
                if (this.Count !== result.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "result");
                }

                this.DoSubtractFrom(scalar, result);
            },
            /**
             * Returns a negated vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}        The negated vector.
             */
            Negate: function () {
                var retrunVector = this.v_builder.SameAs$4(T, this);
                this.DoNegate(retrunVector);
                return retrunVector;
            },
            /**
             * Negates vector and save result to <b />
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    Target vector
             * @return  {void}
             */
            Negate$1: function (result) {
                if (this.Count !== result.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "result");
                }

                this.DoNegate(result);
            },
            /**
             * Return vector with complex conjugate values of the source vector
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}        Conjugated vector
             */
            Conjugate: function () {
                var retrunVector = this.v_builder.SameAs$4(T, this);
                this.DoConjugate(retrunVector);
                return retrunVector;
            },
            /**
             * Complex conjugates vector and save result to <b />
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    Target vector
             * @return  {void}
             */
            Conjugate$1: function (result) {
                if (this.Count !== result.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "result");
                }

                this.DoConjugate(result);
            },
            /**
             * Multiplies a scalar to each element of the vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {T}                                          scalar    The scalar to multiply.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}              A new vector that is the multiplication of the vector and the scalar.
             */
            Multiply: function (scalar) {
                if (Bridge.equals(scalar, MathNet.Numerics.LinearAlgebra.Vector$1(T).One)) {
                    return this.Clone();
                }

                if (Bridge.equals(scalar, MathNet.Numerics.LinearAlgebra.Vector$1(T).Zero)) {
                    return this.v_builder.SameAs$4(T, this);
                }

                var result = this.v_builder.SameAs$4(T, this);
                this.DoMultiply(scalar, result);
                return result;
            },
            /**
             * Multiplies a scalar to each element of the vector and stores the result in the result vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @param   {T}                                          scalar    The scalar to multiply.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result of the multiplication.
             * @return  {void}
             */
            Multiply$1: function (scalar, result) {
                if (this.Count !== result.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "result");
                }

                if (Bridge.equals(scalar, MathNet.Numerics.LinearAlgebra.Vector$1(T).One)) {
                    this.CopyTo(result);
                    return;
                }

                if (Bridge.equals(scalar, MathNet.Numerics.LinearAlgebra.Vector$1(T).Zero)) {
                    result.clear();
                    return;
                }

                this.DoMultiply(scalar, result);
            },
            /**
             * Computes the dot product between this vector and another vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If <b /> is not of the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other    The other vector.
             * @return  {T}                                                   The sum of a[i]*b[i] for all i.
             * @see {@link ConjugateDotProduct}
             */
            DotProduct: function (other) {
                if (this.Count !== other.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "other");
                }

                return this.DoDotProduct(other);
            },
            /**
             * Computes the dot product between the conjugate of this vector and another vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If <b /> is not of the same size.
             * @throws If <b /> is {@link ArgumentNullException}.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other    The other vector.
             * @return  {T}                                                   The sum of conj(a[i])*b[i] for all i.
             * @see {@link DotProduct}
             */
            ConjugateDotProduct: function (other) {
                if (this.Count !== other.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "other");
                }

                return this.DoConjugateDotProduct(other);
            },
            /**
             * Divides each element of the vector by a scalar.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {T}                                          scalar    The scalar to divide with.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}              A new vector that is the division of the vector and the scalar.
             */
            Divide: function (scalar) {
                if (Bridge.equals(scalar, MathNet.Numerics.LinearAlgebra.Vector$1(T).One)) {
                    return this.Clone();
                }

                var result = this.v_builder.SameAs$4(T, this);
                this.DoDivide(scalar, result);
                return result;
            },
            /**
             * Divides each element of the vector by a scalar and stores the result in the result vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @param   {T}                                          scalar    The scalar to divide with.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result of the division.
             * @return  {void}
             */
            Divide$1: function (scalar, result) {
                if (this.Count !== result.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "result");
                }

                if (Bridge.equals(scalar, MathNet.Numerics.LinearAlgebra.Vector$1(T).One)) {
                    this.CopyTo(result);
                    return;
                }

                this.DoDivide(scalar, result);
            },
            /**
             * Divides a scalar by each element of the vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {T}                                          scalar    The scalar to divide.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}              A new vector that is the division of the vector and the scalar.
             */
            DivideByThis: function (scalar) {
                var result = this.v_builder.SameAs$4(T, this);
                this.DoDivideByThis(scalar, result);
                return result;
            },
            /**
             * Divides a scalar by each element of the vector and stores the result in the result vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @param   {T}                                          scalar    The scalar to divide.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result of the division.
             * @return  {void}
             */
            DivideByThis$1: function (scalar, result) {
                if (this.Count !== result.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "result");
                }

                this.DoDivideByThis(scalar, result);
            },
            /**
             * Computes the canonical modulus, where the result has the sign of the divisor,
             for each element of the vector for the given divisor.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {T}                                          divisor    The scalar denominator to use.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}               A vector containing the result.
             */
            Modulus: function (divisor) {
                var result = this.v_builder.SameAs$4(T, this);
                this.DoModulus(divisor, result);
                return result;
            },
            /**
             * Computes the canonical modulus, where the result has the sign of the divisor,
             for each element of the vector for the given divisor.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {T}                                          divisor    The scalar denominator to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result     A vector to store the results in.
             * @return  {void}
             */
            Modulus$1: function (divisor, result) {
                if (this.Count !== result.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "result");
                }

                this.DoModulus(divisor, result);
            },
            /**
             * Computes the canonical modulus, where the result has the sign of the divisor,
             for the given dividend for each element of the vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {T}                                          dividend    The scalar numerator to use.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}                A vector containing the result.
             */
            ModulusByThis: function (dividend) {
                var result = this.v_builder.SameAs$4(T, this);
                this.DoModulusByThis(dividend, result);
                return result;
            },
            /**
             * Computes the canonical modulus, where the result has the sign of the divisor,
             for the given dividend for each element of the vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {T}                                          dividend    The scalar numerator to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result      A vector to store the results in.
             * @return  {void}
             */
            ModulusByThis$1: function (dividend, result) {
                if (this.Count !== result.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "result");
                }

                this.DoModulusByThis(dividend, result);
            },
            /**
             * Computes the remainder (vector % divisor), where the result has the sign of the dividend,
             for each element of the vector for the given divisor.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {T}                                          divisor    The scalar denominator to use.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}               A vector containing the result.
             */
            Remainder: function (divisor) {
                var result = this.v_builder.SameAs$4(T, this);
                this.DoRemainder(divisor, result);
                return result;
            },
            /**
             * Computes the remainder (vector % divisor), where the result has the sign of the dividend,
             for each element of the vector for the given divisor.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {T}                                          divisor    The scalar denominator to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result     A vector to store the results in.
             * @return  {void}
             */
            Remainder$1: function (divisor, result) {
                if (this.Count !== result.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "result");
                }

                this.DoRemainder(divisor, result);
            },
            /**
             * Computes the remainder (dividend % vector), where the result has the sign of the dividend,
             for the given dividend for each element of the vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {T}                                          dividend    The scalar numerator to use.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}                A vector containing the result.
             */
            RemainderByThis: function (dividend) {
                var result = this.v_builder.SameAs$4(T, this);
                this.DoRemainderByThis(dividend, result);
                return result;
            },
            /**
             * Computes the remainder (dividend % vector), where the result has the sign of the dividend,
             for the given dividend for each element of the vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {T}                                          dividend    The scalar numerator to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result      A vector to store the results in.
             * @return  {void}
             */
            RemainderByThis$1: function (dividend, result) {
                if (this.Count !== result.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "result");
                }

                this.DoRemainderByThis(dividend, result);
            },
            /**
             * Pointwise multiplies this vector with another vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other    The vector to pointwise multiply with this one.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}             A new vector which is the pointwise multiplication of the two vectors.
             */
            PointwiseMultiply: function (other) {
                if (this.Count !== other.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "other");
                }

                var result = this.v_builder.SameAs$1(this, other);
                this.DoPointwiseMultiply(other, result);
                return result;
            },
            /**
             * Pointwise multiplies this vector with another vector and stores the result into the result vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @throws If this vector and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other     The vector to pointwise multiply with this one.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result of the pointwise multiplication.
             * @return  {void}
             */
            PointwiseMultiply$1: function (other, result) {
                if (this.Count !== other.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "other");
                }

                if (this.Count !== result.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "result");
                }

                this.DoPointwiseMultiply(other, result);
            },
            /**
             * Pointwise divide this vector with another vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    divisor    The pointwise denominator vector to use.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}               A new vector which is the pointwise division of the two vectors.
             */
            PointwiseDivide: function (divisor) {
                if (this.Count !== divisor.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "divisor");
                }

                var result = this.v_builder.SameAs$1(this, divisor);
                this.DoPointwiseDivide(divisor, result);
                return result;
            },
            /**
             * Pointwise divide this vector with another vector and stores the result into the result vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @throws If this vector and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    divisor    The pointwise denominator vector to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result     The vector to store the result of the pointwise division.
             * @return  {void}
             */
            PointwiseDivide$1: function (divisor, result) {
                if (this.Count !== divisor.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "divisor");
                }

                if (this.Count !== result.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "result");
                }

                this.DoPointwiseDivide(divisor, result);
            },
            /**
             * Pointwise raise this vector to an exponent.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {T}                                          exponent    The exponent to raise this vector values to.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            PointwisePower: function (exponent) {
                var result = this.v_builder.SameAs$4(T, this);
                this.DoPointwisePower(exponent, result);
                return result;
            },
            /**
             * Pointwise raise this vector to an exponent and store the result into the result vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @param   {T}                                          exponent    The exponent to raise this vector values to.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result      The matrix to store the result into.
             * @return  {void}
             */
            PointwisePower$2: function (exponent, result) {
                if (this.Count !== result.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "result");
                }

                this.DoPointwisePower(exponent, result);
            },
            /**
             * Pointwise raise this vector to an exponent and store the result into the result vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    exponent    The exponent to raise this vector values to.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            PointwisePower$1: function (exponent) {
                if (this.Count !== exponent.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "exponent");
                }

                var result = this.v_builder.SameAs$4(T, this);
                this.DoPointwisePower$1(exponent, result);
                return result;
            },
            /**
             * Pointwise raise this vector to an exponent.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    exponent    The exponent to raise this vector values to.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result      The vector to store the result into.
             * @return  {void}
             */
            PointwisePower$3: function (exponent, result) {
                if (this.Count !== exponent.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "exponent");
                }

                if (this.Count !== result.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "result");
                }

                this.DoPointwisePower$1(exponent, result);
            },
            /**
             * Pointwise canonical modulus, where the result has the sign of the divisor,
             of this vector with another vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    divisor    The pointwise denominator vector to use.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            PointwiseModulus: function (divisor) {
                if (this.Count !== divisor.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "divisor");
                }

                var result = this.v_builder.SameAs$1(this, divisor);
                this.DoPointwiseModulus(divisor, result);
                return result;
            },
            /**
             * Pointwise canonical modulus, where the result has the sign of the divisor,
             of this vector with another vector and stores the result into the result vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @throws If this vector and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    divisor    The pointwise denominator vector to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result     The vector to store the result of the pointwise modulus.
             * @return  {void}
             */
            PointwiseModulus$1: function (divisor, result) {
                if (this.Count !== divisor.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "divisor");
                }

                if (this.Count !== result.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "result");
                }

                this.DoPointwiseModulus(divisor, result);
            },
            /**
             * Pointwise remainder (% operator), where the result has the sign of the dividend,
             of this vector with another vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    divisor    The pointwise denominator vector to use.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            PointwiseRemainder: function (divisor) {
                if (this.Count !== divisor.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "divisor");
                }

                var result = this.v_builder.SameAs$1(this, divisor);
                this.DoPointwiseRemainder(divisor, result);
                return result;
            },
            /**
             * Pointwise remainder (% operator), where the result has the sign of the dividend,
             this vector with another vector and stores the result into the result vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @throws If this vector and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    divisor    The pointwise denominator vector to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result     The vector to store the result of the pointwise remainder.
             * @return  {void}
             */
            PointwiseRemainder$1: function (divisor, result) {
                if (this.Count !== divisor.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "divisor");
                }

                if (this.Count !== result.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "result");
                }

                this.DoPointwiseRemainder(divisor, result);
            },
            /**
             * Helper function to apply a unary function to a vector. The function
             f modifies the vector given to it in place.  Before its
             called, a copy of the 'this' vector with the same dimension is
             first created, then passed to f.  The copy is returned as the result
             *
             * @instance
             * @protected
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {System.Action}                              f    Function which takes a vector, modifies it in place and returns void
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}         New instance of vector which is the result
             */
            PointwiseUnary: function (f) {
                var result = this.v_builder.SameAs$4(T, this);
                f(result);
                return result;
            },
            /**
             * Helper function to apply a unary function which modifies a vector
             in place.
             *
             * @instance
             * @protected
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @param   {System.Action}                              f         Function which takes a vector, modifies it in place and returns void
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector where the result is to be stored
             * @return  {void}
             */
            PointwiseUnary$1: function (f, result) {
                if (this.Count !== result.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "result");
                }

                f(result);
            },
            /**
             * Helper function to apply a binary function which takes a scalar and
             a vector and modifies the latter in place. A copy of the "this"
             vector is therefore first made and then passed to f together with
             the scalar argument.  The copy is then returned as the result
             *
             * @instance
             * @protected
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {System.Action}                              f        Function which takes a scalar and a vector, modifies the vector in place and returns void
             * @param   {T}                                          other    The scalar to be passed to the function
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}             The resulting vector
             */
            PointwiseBinary: function (f, other) {
                var result = this.v_builder.SameAs$4(T, this);
                f(other, result);
                return result;
            },
            /**
             * Helper function to apply a binary function which takes a scalar and
             a vector, modifies the latter in place and returns void.
             *
             * @instance
             * @protected
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @param   {System.Action}                              f         Function which takes a scalar and a vector, modifies the vector in place and returns void
             * @param   {T}                                          x         The scalar to be passed to the function
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector where the result will be placed
             * @return  {void}
             */
            PointwiseBinary$2: function (f, x, result) {
                if (this.Count !== result.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "result");
                }
                f(x, result);
            },
            /**
             * Helper function to apply a binary function which takes two vectors
             and modifies the latter in place.  A copy of the "this" vector is
             first made and then passed to f together with the other vector. The
             copy is then returned as the result
             *
             * @instance
             * @protected
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @param   {System.Action}                              f        Function which takes two vectors, modifies the second in place and returns void
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other    The other vector to be passed to the function as argument. It is not modified
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}             The resulting vector
             */
            PointwiseBinary$1: function (f, other) {
                if (this.Count !== other.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "other");
                }

                var result = this.v_builder.SameAs$1(this, other);
                f(other, result);
                return result;
            },
            /**
             * Helper function to apply a binary function which takes two vectors
             and modifies the second one in place
             *
             * @instance
             * @protected
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @param   {System.Action}                              f         Function which takes two vectors, modifies the second in place and returns void
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other     The other vector to be passed to the function as argument. It is not modified
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The resulting vector
             * @return  {void}
             */
            PointwiseBinary$3: function (f, other, result) {
                if (this.Count !== other.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "other");
                }

                if (this.Count !== result.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "result");
                }
                f(other, result);
            },
            /**
             * Pointwise applies the exponent function to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            PointwiseExp: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseExp));
            },
            /**
             * Pointwise applies the exponent function to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result.
             * @return  {void}
             */
            PointwiseExp$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseExp), result);
            },
            /**
             * Pointwise applies the natural logarithm function to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            PointwiseLog: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseLog));
            },
            /**
             * Pointwise applies the natural logarithm function to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result.
             * @return  {void}
             */
            PointwiseLog$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseLog), result);
            },
            /**
             * Pointwise applies the abs function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            PointwiseAbs: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseAbs));
            },
            /**
             * Pointwise applies the abs function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseAbs$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseAbs), result);
            },
            /**
             * Pointwise applies the acos function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            PointwiseAcos: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseAcos));
            },
            /**
             * Pointwise applies the acos function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseAcos$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseAcos), result);
            },
            /**
             * Pointwise applies the asin function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            PointwiseAsin: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseAsin));
            },
            /**
             * Pointwise applies the asin function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseAsin$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseAsin), result);
            },
            /**
             * Pointwise applies the atan function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            PointwiseAtan: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseAtan));
            },
            /**
             * Pointwise applies the atan function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseAtan$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseAtan), result);
            },
            /**
             * Pointwise applies the atan2 function to each value of the current
             vector and a given other vector being the 'x' of atan2 and the
             'this' vector being the 'y'
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            PointwiseAtan2: function (other) {
                return this.PointwiseBinary$1(Bridge.fn.cacheBind(this, this.DoPointwiseAtan2$1), other);
            },
            /**
             * Pointwise applies the atan2 function to each value of the current
             vector and a given other vector being the 'x' of atan2 and the
             'this' vector being the 'y'
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other     
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseAtan2$1: function (other, result) {
                this.PointwiseBinary$3(Bridge.fn.cacheBind(this, this.DoPointwiseAtan2$1), other, result);
            },
            /**
             * Pointwise applies the ceiling function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            PointwiseCeiling: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseCeiling));
            },
            /**
             * Pointwise applies the ceiling function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseCeiling$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseCeiling), result);
            },
            /**
             * Pointwise applies the cos function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            PointwiseCos: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseCos));
            },
            /**
             * Pointwise applies the cos function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseCos$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseCos), result);
            },
            /**
             * Pointwise applies the cosh function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            PointwiseCosh: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseCosh));
            },
            /**
             * Pointwise applies the cosh function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseCosh$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseCosh), result);
            },
            /**
             * Pointwise applies the floor function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            PointwiseFloor: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseFloor));
            },
            /**
             * Pointwise applies the floor function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseFloor$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseFloor), result);
            },
            /**
             * Pointwise applies the log10 function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            PointwiseLog10: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseLog10));
            },
            /**
             * Pointwise applies the log10 function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseLog10$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseLog10), result);
            },
            /**
             * Pointwise applies the round function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            PointwiseRound: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseRound));
            },
            /**
             * Pointwise applies the round function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseRound$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseRound), result);
            },
            /**
             * Pointwise applies the sign function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            PointwiseSign: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseSign));
            },
            /**
             * Pointwise applies the sign function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseSign$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseSign), result);
            },
            /**
             * Pointwise applies the sin function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            PointwiseSin: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseSin));
            },
            /**
             * Pointwise applies the sin function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseSin$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseSin), result);
            },
            /**
             * Pointwise applies the sinh function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            PointwiseSinh: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseSinh));
            },
            /**
             * Pointwise applies the sinh function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseSinh$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseSinh), result);
            },
            /**
             * Pointwise applies the sqrt function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            PointwiseSqrt: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseSqrt));
            },
            /**
             * Pointwise applies the sqrt function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseSqrt$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseSqrt), result);
            },
            /**
             * Pointwise applies the tan function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            PointwiseTan: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseTan));
            },
            /**
             * Pointwise applies the tan function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseTan$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseTan), result);
            },
            /**
             * Pointwise applies the tanh function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            PointwiseTanh: function () {
                return this.PointwiseUnary(Bridge.fn.cacheBind(this, this.DoPointwiseTanh));
            },
            /**
             * Pointwise applies the tanh function to each value
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result
             * @return  {void}
             */
            PointwiseTanh$1: function (result) {
                this.PointwiseUnary$1(Bridge.fn.cacheBind(this, this.DoPointwiseTanh), result);
            },
            /**
             * Computes the outer product M[i,j] = u[i]*v[j] of this and another vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other    The other vector
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            OuterProduct: function (other) {
                var matrix = this.m_builder.SameAs$2(this, this.Count, other.Count);
                this.DoOuterProduct(other, matrix);
                return matrix;
            },
            /**
             * Computes the outer product M[i,j] = u[i]*v[j] of this and another vector and stores the result in the result matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other     The other vector
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result of the product.
             * @return  {void}
             */
            OuterProduct$1: function (other, result) {
                if (this.Count !== result.RowCount || other.Count !== result.ColumnCount) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentMatrixDimensions", "result");
                }

                this.DoOuterProduct(other, result);
            },
            /**
             * Pointwise applies the minimum with a scalar to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {T}                                          scalar    The scalar value to compare to.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            PointwiseMinimum: function (scalar) {
                var result = this.v_builder.SameAs$4(T, this);
                this.DoPointwiseMinimum(scalar, result);
                return result;
            },
            /**
             * Pointwise applies the minimum with a scalar to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @param   {T}                                          scalar    The scalar value to compare to.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result.
             * @return  {void}
             */
            PointwiseMinimum$2: function (scalar, result) {
                if (this.Count !== result.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "result");
                }

                this.DoPointwiseMinimum(scalar, result);
            },
            /**
             * Pointwise applies the minimum with the values of another vector to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other    The vector with the values to compare to.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            PointwiseMinimum$1: function (other) {
                var result = this.v_builder.SameAs$4(T, this);
                this.DoPointwiseMinimum$1(other, result);
                return result;
            },
            /**
             * Pointwise applies the minimum with the values of another vector to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other     The vector with the values to compare to.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result.
             * @return  {void}
             */
            PointwiseMinimum$3: function (other, result) {
                if (this.Count !== result.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "result");
                }

                this.DoPointwiseMinimum$1(other, result);
            },
            /**
             * Pointwise applies the maximum with a scalar to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {T}                                          scalar    The scalar value to compare to.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            PointwiseMaximum: function (scalar) {
                var result = this.v_builder.SameAs$4(T, this);
                this.DoPointwiseMaximum(scalar, result);
                return result;
            },
            /**
             * Pointwise applies the maximum with a scalar to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @param   {T}                                          scalar    The scalar value to compare to.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result.
             * @return  {void}
             */
            PointwiseMaximum$2: function (scalar, result) {
                if (this.Count !== result.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "result");
                }

                this.DoPointwiseMaximum(scalar, result);
            },
            /**
             * Pointwise applies the maximum with the values of another vector to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other    The vector with the values to compare to.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            PointwiseMaximum$1: function (other) {
                var result = this.v_builder.SameAs$4(T, this);
                this.DoPointwiseMaximum$1(other, result);
                return result;
            },
            /**
             * Pointwise applies the maximum with the values of another vector to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other     The vector with the values to compare to.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result.
             * @return  {void}
             */
            PointwiseMaximum$3: function (other, result) {
                if (this.Count !== result.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "result");
                }

                this.DoPointwiseMaximum$1(other, result);
            },
            /**
             * Pointwise applies the absolute minimum with a scalar to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {T}                                          scalar    The scalar value to compare to.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            PointwiseAbsoluteMinimum: function (scalar) {
                var result = this.v_builder.SameAs$4(T, this);
                this.DoPointwiseAbsoluteMinimum(scalar, result);
                return result;
            },
            /**
             * Pointwise applies the absolute minimum with a scalar to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @param   {T}                                          scalar    The scalar value to compare to.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result.
             * @return  {void}
             */
            PointwiseAbsoluteMinimum$2: function (scalar, result) {
                if (this.Count !== result.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "result");
                }

                this.DoPointwiseAbsoluteMinimum(scalar, result);
            },
            /**
             * Pointwise applies the absolute minimum with the values of another vector to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other    The vector with the values to compare to.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            PointwiseAbsoluteMinimum$1: function (other) {
                var result = this.v_builder.SameAs$4(T, this);
                this.DoPointwiseAbsoluteMinimum$1(other, result);
                return result;
            },
            /**
             * Pointwise applies the absolute minimum with the values of another vector to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other     The vector with the values to compare to.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result.
             * @return  {void}
             */
            PointwiseAbsoluteMinimum$3: function (other, result) {
                if (this.Count !== result.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "result");
                }

                this.DoPointwiseAbsoluteMinimum$1(other, result);
            },
            /**
             * Pointwise applies the absolute maximum with a scalar to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {T}                                          scalar    The scalar value to compare to.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            PointwiseAbsoluteMaximum: function (scalar) {
                var result = this.v_builder.SameAs$4(T, this);
                this.DoPointwiseAbsoluteMaximum(scalar, result);
                return result;
            },
            /**
             * Pointwise applies the absolute maximum with a scalar to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @param   {T}                                          scalar    The scalar value to compare to.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result.
             * @return  {void}
             */
            PointwiseAbsoluteMaximum$2: function (scalar, result) {
                if (this.Count !== result.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "result");
                }

                this.DoPointwiseAbsoluteMaximum(scalar, result);
            },
            /**
             * Pointwise applies the absolute maximum with the values of another vector to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other    The vector with the values to compare to.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            PointwiseAbsoluteMaximum$1: function (other) {
                var result = this.v_builder.SameAs$4(T, this);
                this.DoPointwiseAbsoluteMaximum$1(other, result);
                return result;
            },
            /**
             * Pointwise applies the absolute maximum with the values of another vector to each value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If this vector and <b /> are not the same size.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other     The vector with the values to compare to.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result.
             * @return  {void}
             */
            PointwiseAbsoluteMaximum$3: function (other, result) {
                if (this.Count !== result.Count) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "result");
                }

                this.DoPointwiseAbsoluteMaximum$1(other, result);
            },
            /**
             * Returns the value of maximum element.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {T}        The value of maximum element.
             */
            Maximum: function () {
                return this.At(this.MaximumIndex());
            },
            /**
             * Returns the value of the minimum element.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {T}        The value of the minimum element.
             */
            Minimum: function () {
                return this.At(this.MinimumIndex());
            },
            /**
             * Computes the sum of the absolute value of the vector's elements.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {number}        The sum of the absolute value of the vector's elements.
             */
            SumMagnitudes: function () {
                return this.L1Norm();
            },
            /**
             * Indicates whether the current object is equal to another object of the same type.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other    An object to compare with this object.
             * @return  {boolean}                                             <pre><code>true</code></pre> if the current object is equal to the <b /> parameter; otherwise, <pre><code>false</code></pre>.
             */
            equalsT: function (other) {
                return other != null && this.Storage.equalsT(other.Storage);
            },
            /**
             * Determines whether the specified {@link } is equal to this instance.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {System.Object}    obj    The {@link } to compare with this instance.
             * @return  {boolean}                 <pre><code>true</code></pre> if the specified {@link } is equal to this instance; otherwise, <pre><code>false</code></pre>.
             */
            equals: function (obj) {
                var other = Bridge.as(obj, MathNet.Numerics.LinearAlgebra.Vector$1(T));
                return other != null && this.Storage.equalsT(other.Storage);
            },
            /**
             * Returns a hash code for this instance.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {number}        A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
             */
            getHashCode: function () {
                return this.Storage.getHashCode();
            },
            /**
             * Creates a new object that is a copy of the current instance.
             *
             * @instance
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {System.Object}        A new object that is a copy of this instance.
             */
            System$ICloneable$clone: function () {
                return this.Clone();
            },
            /**
             * Returns a deep-copy clone of the vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}        A deep-copy clone of the vector.
             */
            Clone: function () {
                var result = this.v_builder.SameAs$4(T, this);
                this.Storage.CopyToUnchecked(result.Storage, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                return result;
            },
            System$Collections$Generic$IList$1$indexOf: function (item) {
                for (var i = 0; i < this.Count; i = (i + 1) | 0) {
                    if (Bridge.equals(this.At(i), item)) {
                        return i;
                    }
                }
                return -1;
            },
            System$Collections$IList$indexOf: function (value) {
                if (!(Bridge.is(value, T))) {
                    return -1;
                }

                return System.Array.indexOf(Bridge.cast(this, System.Collections.Generic.IList$1(T)), Bridge.cast(Bridge.unbox(value, T), T), 0, null, T);
            },
            System$Collections$Generic$IList$1$insert: function (index, item) {
                throw new System.NotSupportedException.ctor();
            },
            System$Collections$IList$insert: function (index, value) {
                throw new System.NotSupportedException.ctor();
            },
            System$Collections$Generic$IList$1$removeAt: function (index) {
                throw new System.NotSupportedException.ctor();
            },
            System$Collections$IList$removeAt: function (index) {
                throw new System.NotSupportedException.ctor();
            },
            System$Collections$Generic$ICollection$1$remove: function (item) {
                throw new System.NotSupportedException.ctor();
            },
            System$Collections$IList$remove: function (value) {
                throw new System.NotSupportedException.ctor();
            },
            System$Collections$Generic$ICollection$1$contains: function (item) {
                var $t;
                $t = Bridge.getEnumerator(this, T);
                try {
                    while ($t.moveNext()) {
                        var x = $t.Current;
                        if (Bridge.equals(x, item)) {
                            return true;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                return false;
            },
            System$Collections$IList$contains: function (value) {
                if (!(Bridge.is(value, T))) {
                    return false;
                }

                return System.Array.contains(Bridge.cast(this, System.Collections.Generic.ICollection$1(T)), Bridge.cast(Bridge.unbox(value, T), T), T);
            },
            System$Collections$Generic$ICollection$1$copyTo: function (array, arrayIndex) {
                if (array == null) {
                    throw new System.ArgumentNullException.$ctor1("array");
                }

                this.Storage.CopySubVectorTo(new (MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(T)).$ctor1(array.length, array), 0, arrayIndex, this.Count);
            },
            System$Collections$ICollection$copyTo: function (array, index) {
                if (array == null) {
                    throw new System.ArgumentNullException.$ctor1("array");
                }
                if (System.Array.getRank(array) !== 1) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentSingleDimensionArray", "array");

                }

                this.Storage.CopySubVectorTo(new (MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(T)).$ctor1(array.length, Bridge.cast(array, System.Array.type(T))), 0, index, this.Count);
            },
            /**
             * Copies the values of this vector into the target vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If <b /> is {@link ArgumentNullException}.
             * @throws If <b /> is not the same size as this vector.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    target    The vector to copy elements into.
             * @return  {void}
             */
            CopyTo: function (target) {
                if (target == null) {
                    throw new System.ArgumentNullException.$ctor1("target");
                }

                this.Storage.CopyTo(target.Storage);
            },
            /**
             * Returns an enumerator that iterates through the collection.
             *
             * @instance
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {System.Collections.Generic.IEnumerator$1}        A {@link } that can be used to iterate through the collection.
             */
            System$Collections$Generic$IEnumerable$1$GetEnumerator: function () {
                return Bridge.getEnumerator(this.Enumerate(), T);
            },
            /**
             * Returns an enumerator that iterates through a collection.
             *
             * @instance
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {System.Collections.IEnumerator}        An {@link } object that can be used to iterate through the collection.
             */
            System$Collections$IEnumerable$GetEnumerator: function () {
                return Bridge.getEnumerator(this.Enumerate(), T);
            },
            /**
             * Returns a string that describes the type, dimensions and shape of this vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {string}
             */
            ToTypeString: function () {
                return System.String.format("{0} {1}-{2}", Bridge.Reflection.getTypeName(Bridge.getType(this)), Bridge.box(this.Count, System.Int32), Bridge.Reflection.getTypeName(T));
            },
            ToVectorStringArray: function (maxPerColumn, maxCharactersWidth, padding, ellipsis, formatValue) {
                var $t, $t1;
                maxPerColumn = Math.max(maxPerColumn, 3);
                maxCharactersWidth = Math.max(maxCharactersWidth, 16);

                var columns = new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Array.type(System.String)))).ctor();
                var chars = 0;
                var offset = 0;
                while (offset < this.Count) {
                    var height = Math.min(maxPerColumn, ((this.Count - offset) | 0));
                    var candidate = this.FormatCompleteColumn(offset, height, formatValue);
                    chars = (chars + (((candidate.Item1 + padding) | 0))) | 0;
                    if (chars > maxCharactersWidth && offset > 0) {
                        break;
                    }
                    columns.add(candidate);
                    offset = (offset + height) | 0;
                }
                if (offset < this.Count) {
                    var last = columns.getItem(((columns.Count - 1) | 0));
                    var c = last.Item2;
                    c[System.Array.index(((c.length - 2) | 0), c)] = ellipsis;
                    c[System.Array.index(((c.length - 1) | 0), c)] = formatValue(this.At(((this.Count - 1) | 0)));
                }

                var rows = columns.getItem(0).Item2.length;
                var cols = columns.Count;
                var array = System.Array.create(null, null, System.String, rows, cols);
                var colIndex = 0;
                $t = Bridge.getEnumerator(columns);
                try {
                    while ($t.moveNext()) {
                        var column = $t.Current;
                        for (var k = 0; k < column.Item2.length; k = (k + 1) | 0) {
                            array.set([k, colIndex], ($t1 = column.Item2)[System.Array.index(k, $t1)]);
                        }
                        for (var k1 = column.Item2.length; k1 < rows; k1 = (k1 + 1) | 0) {
                            array.set([k1, colIndex], "");
                        }
                        colIndex = (colIndex + 1) | 0;
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                return array;
            },
            FormatCompleteColumn: function (offset, height, formatValue) {
                var c = System.Array.init(height, null, System.String);
                var index = 0;
                for (var k = 0; k < height; k = (k + 1) | 0) {
                    c[System.Array.index(Bridge.identity(index, ((index = (index + 1) | 0))), c)] = formatValue(this.At(((offset + k) | 0)));
                }
                var w = System.Linq.Enumerable.from(c, System.String).max(function (x) {
                        return x.length;
                    });
                return { Item1: w, Item2: c };
            },
            /**
             * Returns a string that represents the content of this vector, column by column.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {number}         maxPerColumn          Maximum number of entries and thus lines per column. Typical value: 12; Minimum: 3.
             * @param   {number}         maxCharactersWidth    Maximum number of characters per line over all columns. Typical value: 80; Minimum: 16.
             * @param   {string}         ellipsis              Character to use to print if there is not enough space to print all entries. Typical value: "..".
             * @param   {string}         columnSeparator       Character to use to separate two columns on a line. Typical value: "  " (2 spaces).
             * @param   {string}         rowSeparator          Character to use to separate two rows/lines. Typical value: Environment.NewLine.
             * @param   {System.Func}    formatValue           Function to provide a string for any given entry value.
             * @return  {string}
             */
            ToVectorString$1: function (maxPerColumn, maxCharactersWidth, ellipsis, columnSeparator, rowSeparator, formatValue) {
                return MathNet.Numerics.LinearAlgebra.Vector$1(T).FormatStringArrayToString(this.ToVectorStringArray(maxPerColumn, maxCharactersWidth, columnSeparator.length, ellipsis, formatValue), columnSeparator, rowSeparator);
            },
            /**
             * Returns a string that represents the content of this vector, column by column.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {number}                    maxPerColumn          Maximum number of entries and thus lines per column. Typical value: 12; Minimum: 3.
             * @param   {number}                    maxCharactersWidth    Maximum number of characters per line over all columns. Typical value: 80; Minimum: 16.
             * @param   {string}                    format                Floating point format string. Can be null. Default value: G6.
             * @param   {System.IFormatProvider}    provider              Format provider or culture. Can be null.
             * @return  {string}
             */
            ToVectorString: function (maxPerColumn, maxCharactersWidth, format, provider) {
                if (format === void 0) { format = null; }
                if (provider === void 0) { provider = null; }
                if (format == null) {
                    format = "G6";
                }

                return this.ToVectorString$1(maxPerColumn, maxCharactersWidth, "..", "  ", "\n", function (x) {
                    return Bridge.toString(x);
                });
            },
            /**
             * Returns a string that represents the content of this vector, column by column.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {string}                    format      Floating point format string. Can be null. Default value: G6.
             * @param   {System.IFormatProvider}    provider    Format provider or culture. Can be null.
             * @return  {string}
             */
            ToVectorString$2: function (format, provider) {
                if (format === void 0) { format = null; }
                if (provider === void 0) { provider = null; }
                if (format == null) {
                    format = "G6";
                }

                return this.ToVectorString$1(12, 80, "..", "  ", "\n", function (x) {
                    return Bridge.toString(x);
                });
            },
            /**
             * Returns a string that summarizes this vector, column by column and with a type header.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {number}                    maxPerColumn          Maximum number of entries and thus lines per column. Typical value: 12; Minimum: 3.
             * @param   {number}                    maxCharactersWidth    Maximum number of characters per line over all columns. Typical value: 80; Minimum: 16.
             * @param   {string}                    format                Floating point format string. Can be null. Default value: G6.
             * @param   {System.IFormatProvider}    provider              Format provider or culture. Can be null.
             * @return  {string}
             */
            ToString: function (maxPerColumn, maxCharactersWidth, format, provider) {
                if (format === void 0) { format = null; }
                if (provider === void 0) { provider = null; }
                return System.String.concat(this.ToTypeString(), "\n", this.ToVectorString(maxPerColumn, maxCharactersWidth, format, provider));
            },
            /**
             * Returns a string that summarizes this vector.
             The maximum number of cells can be configured in the {@link } class.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {string}
             */
            toString: function () {
                return System.String.concat(this.ToTypeString(), "\n", this.ToVectorString$2());
            },
            /**
             * Returns a string that summarizes this vector.
             The maximum number of cells can be configured in the {@link } class.
             The format string is ignored.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {string}                    format            
             * @param   {System.IFormatProvider}    formatProvider
             * @return  {string}
             */
            format: function (format, formatProvider) {
                if (format === void 0) { format = null; }
                if (formatProvider === void 0) { formatProvider = null; }
                return System.String.concat(this.ToTypeString(), "\n", this.ToVectorString$2(format, formatProvider));
            },
            /**
             * Gets the value at the given <b /> without range checking..
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {number}    index    The index of the value to get or set.
             * @return  {T}                  The value of the vector at the given <b />.
             */
            At: function (index) {
                return this.Storage.At(index);
            },
            /**
             * Sets the <b /> at the given <b /> without range checking..
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {number}    index    The index of the value to get or set.
             * @param   {T}         value    The value to set.
             * @return  {void}
             */
            At$1: function (index, value) {
                this.Storage.At$1(index, value);
            },
            /**
             * Resets all values to zero.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {void}
             */
            clear: function () {
                this.Storage.Clear();
            },
            /**
             * Sets all values of a subvector to zero.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {number}    index    
             * @param   {number}    count
             * @return  {void}
             */
            ClearSubVector: function (index, count) {
                if (count < 1) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("count", "Resources.ArgumentMustBePositive");
                }

                if (((index + count) | 0) > this.Count || index < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("index");
                }

                this.Storage.Clear$1(index, count);
            },
            /**
             * Set all values that meet the predicate to zero, in-place.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {System.Func}    zeroPredicate
             * @return  {void}
             */
            CoerceZero$1: function (zeroPredicate) {
                this.MapInplace(function (x) {
                    return zeroPredicate(x) ? MathNet.Numerics.LinearAlgebra.Vector$1(T).Zero : x;
                }, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            /**
             * Set the values of this vector to the given values.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If <b /> is {@link ArgumentNullException}.
             * @throws If <b /> is not the same size as this vector.
             * @param   {Array.<T>}    values    The array containing the values to use.
             * @return  {void}
             */
            SetValues: function (values) {
                var source = new (MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(T)).$ctor1(this.Count, values);
                source.CopyTo(this.Storage);
            },
            /**
             * Creates a vector containing specified elements.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws 
             * @throws If <b /> is not positive.
             * @param   {number}                                     index    The first element to begin copying from.
             * @param   {number}                                     count    The number of elements to copy.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}             A vector containing a copy of the specified elements.
             */
            SubVector: function (index, count) {
                var target = this.v_builder.SameAs$5(T, this, count);
                this.Storage.CopySubVectorTo(target.Storage, index, 0, count, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                return target;
            },
            /**
             * Copies the values of a given vector into a region in this vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @throws If <b /> is {@link ArgumentNullException}
             * @param   {number}                                     index        The field to start copying to
             * @param   {number}                                     count        The number of fields to copy. Must be positive.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    subVector    The sub-vector to copy from.
             * @return  {void}
             */
            SetSubVector: function (index, count, subVector) {
                if (subVector == null) {
                    throw new System.ArgumentNullException.$ctor1("subVector");
                }

                subVector.Storage.CopySubVectorTo(this.Storage, 0, index, count);
            },
            /**
             * Copies the requested elements from this vector to another.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    destination    The vector to copy the elements to.
             * @param   {number}                                     sourceIndex    The element to start copying from.
             * @param   {number}                                     targetIndex    The element to start copying to.
             * @param   {number}                                     count          The number of elements to copy.
             * @return  {void}
             */
            CopySubVectorTo: function (destination, sourceIndex, targetIndex, count) {
                if (destination == null) {
                    throw new System.ArgumentNullException.$ctor1("destination");
                }

                this.Storage.CopySubVectorTo(destination.Storage, sourceIndex, targetIndex, count);
            },
            /**
             * Returns the data contained in the vector as an array.
             The returned array will be independent from this vector.
             A new memory block will be allocated for the array.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {Array.<T>}        The vector's data as an array.
             */
            ToArray: function () {
                return this.Storage.ToArray();
            },
            /**
             * Returns the internal array of this vector if, and only if, this vector is stored by such an array internally.
             Otherwise returns null. Changes to the returned array and the vector will affect each other.
             Use ToArray instead if you always need an independent array.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {Array.<T>}
             */
            AsArray: function () {
                return this.Storage.AsArray();
            },
            /**
             * Create a matrix based on this vector in column form (one single column).
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}        This vector as a column matrix.
             */
            ToColumnMatrix: function () {
                var result = this.m_builder.SameAs$2(this, this.Count, 1);
                this.Storage.CopyToColumnUnchecked(result.Storage, 0, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                return result;
            },
            /**
             * Create a matrix based on this vector in row form (one single row).
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}        This vector as a row matrix.
             */
            ToRowMatrix: function () {
                var result = this.m_builder.SameAs$2(this, 1, this.Count);
                this.Storage.CopyToRowUnchecked(result.Storage, 0, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                return result;
            },
            /**
             * Returns an IEnumerable that can be used to iterate through all values of the vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {System.Collections.Generic.IEnumerable$1}
             */
            Enumerate: function () {
                return this.Storage.Enumerate();
            },
            /**
             * Returns an IEnumerable that can be used to iterate through all values of the vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}        zeros
             * @return  {System.Collections.Generic.IEnumerable$1}
             */
            Enumerate$1: function (zeros) {
                if (zeros === void 0) { zeros = 1; }
                switch (zeros) {
                    case MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip: 
                        return this.Storage.EnumerateNonZero();
                    default: 
                        return this.Storage.Enumerate();
                }
            },
            /**
             * Returns an IEnumerable that can be used to iterate through all values of the vector and their index.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @return  {System.Collections.Generic.IEnumerable$1}
             */
            EnumerateIndexed: function () {
                return this.Storage.EnumerateIndexed();
            },
            /**
             * Returns an IEnumerable that can be used to iterate through all values of the vector and their index.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}        zeros
             * @return  {System.Collections.Generic.IEnumerable$1}
             */
            EnumerateIndexed$1: function (zeros) {
                if (zeros === void 0) { zeros = 1; }
                switch (zeros) {
                    case MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip: 
                        return this.Storage.EnumerateNonZeroIndexed();
                    default: 
                        return this.Storage.EnumerateIndexed();
                }
            },
            /**
             * Applies a function to each value of this vector and replaces the value with its result.
             If forceMapZero is not set to true, zero values may or may not be skipped depending
             on the actual data storage implementation (relevant mostly for sparse vectors).
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {System.Func}                             f        
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}    zeros
             * @return  {void}
             */
            MapInplace: function (f, zeros) {
                if (zeros === void 0) { zeros = 0; }
                this.Storage.MapInplace(f, zeros);
            },
            /**
             * Applies a function to each value of this vector and replaces the value with its result.
             The index of each value (zero-based) is passed as first argument to the function.
             If forceMapZero is not set to true, zero values may or may not be skipped depending
             on the actual data storage implementation (relevant mostly for sparse vectors).
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {System.Func}                             f        
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}    zeros
             * @return  {void}
             */
            MapIndexedInplace: function (f, zeros) {
                if (zeros === void 0) { zeros = 0; }
                this.Storage.MapIndexedInplace(f, zeros);
            },
            /**
             * Applies a function to each value of this vector and replaces the value in the result vector.
             If forceMapZero is not set to true, zero values may or may not be skipped depending
             on the actual data storage implementation (relevant mostly for sparse vectors).
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {System.Func}                                f         
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}       zeros
             * @return  {void}
             */
            Map$1: function (f, result, zeros) {
                if (zeros === void 0) { zeros = 0; }
                if (Bridge.referenceEquals(this, result)) {
                    this.Storage.MapInplace(f, zeros);
                } else {
                    this.Storage.MapTo(T, result.Storage, f, zeros, zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include ? MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros : MathNet.Numerics.LinearAlgebra.ExistingData.Clear);
                }
            },
            /**
             * Applies a function to each value of this vector and returns the results as a new vector.
             If forceMapZero is not set to true, zero values may or may not be skipped depending
             on the actual data storage implementation (relevant mostly for sparse vectors).
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {Function}                                   TU       
             * @param   {System.Func}                                f        
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}       zeros
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            Map: function (TU, f, zeros) {
                if (zeros === void 0) { zeros = 0; }
                var v_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(TU).Vector;
                var result = v_builder.SameAs$4(T, this);
                this.Storage.MapToUnchecked(TU, result.Storage, f, zeros, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                return result;
            },
            /**
             * Applies a function to each value of this vector and replaces the value in the result vector.
             The index of each value (zero-based) is passed as first argument to the function.
             If forceMapZero is not set to true, zero values may or may not be skipped depending
             on the actual data storage implementation (relevant mostly for sparse vectors).
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {System.Func}                                f         
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}       zeros
             * @return  {void}
             */
            MapIndexed$1: function (f, result, zeros) {
                if (zeros === void 0) { zeros = 0; }
                if (Bridge.referenceEquals(this, result)) {
                    this.Storage.MapIndexedInplace(f, zeros);
                } else {
                    this.Storage.MapIndexedTo(T, result.Storage, f, zeros, zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include ? MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros : MathNet.Numerics.LinearAlgebra.ExistingData.Clear);
                }
            },
            /**
             * Applies a function to each value of this vector and returns the results as a new vector.
             The index of each value (zero-based) is passed as first argument to the function.
             If forceMapZero is not set to true, zero values may or may not be skipped depending
             on the actual data storage implementation (relevant mostly for sparse vectors).
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {Function}                                   TU       
             * @param   {System.Func}                                f        
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}       zeros
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            MapIndexed: function (TU, f, zeros) {
                if (zeros === void 0) { zeros = 0; }
                var v_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(TU).Vector;
                var result = v_builder.SameAs$4(T, this);
                this.Storage.MapIndexedToUnchecked(TU, result.Storage, f, zeros, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                return result;
            },
            /**
             * Applies a function to each value of this vector and replaces the value in the result vector.
             If forceMapZero is not set to true, zero values may or may not be skipped depending
             on the actual data storage implementation (relevant mostly for sparse vectors).
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {Function}                                   TU        
             * @param   {System.Func}                                f         
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}       zeros
             * @return  {void}
             */
            MapConvert: function (TU, f, result, zeros) {
                if (zeros === void 0) { zeros = 0; }
                this.Storage.MapTo(TU, result.Storage, f, zeros, zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include ? MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros : MathNet.Numerics.LinearAlgebra.ExistingData.Clear);
            },
            /**
             * Applies a function to each value of this vector and replaces the value in the result vector.
             The index of each value (zero-based) is passed as first argument to the function.
             If forceMapZero is not set to true, zero values may or may not be skipped depending
             on the actual data storage implementation (relevant mostly for sparse vectors).
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {Function}                                   TU        
             * @param   {System.Func}                                f         
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}       zeros
             * @return  {void}
             */
            MapIndexedConvert: function (TU, f, result, zeros) {
                if (zeros === void 0) { zeros = 0; }
                this.Storage.MapIndexedTo(TU, result.Storage, f, zeros, zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include ? MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros : MathNet.Numerics.LinearAlgebra.ExistingData.Clear);
            },
            /**
             * Applies a function to each value pair of two vectors and replaces the value in the result vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {System.Func}                                f         
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other     
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}       zeros
             * @return  {void}
             */
            Map2$1: function (f, other, result, zeros) {
                if (zeros === void 0) { zeros = 0; }
                this.Storage.Map2To(result.Storage, other.Storage, f, zeros, MathNet.Numerics.LinearAlgebra.ExistingData.Clear);
            },
            /**
             * Applies a function to each value pair of two vectors and returns the results as a new vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {System.Func}                                f        
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other    
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}       zeros
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            Map2: function (f, other, zeros) {
                if (zeros === void 0) { zeros = 0; }
                var result = this.v_builder.SameAs$4(T, this);
                this.Storage.Map2To(result.Storage, other.Storage, f, zeros, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                return result;
            },
            /**
             * Applies a function to update the status with each value pair of two vectors and returns the resulting status.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {Function}                                   TOther    
             * @param   {Function}                                   TState    
             * @param   {System.Func}                                f         
             * @param   {TState}                                     state     
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other     
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}       zeros
             * @return  {TState}
             */
            Fold2: function (TOther, TState, f, state, other, zeros) {
                if (zeros === void 0) { zeros = 0; }
                return this.Storage.Fold2(TOther, TState, other.Storage, f, state, zeros);
            },
            /**
             * Returns a tuple with the index and value of the first element satisfying a predicate, or null if none is found.
             Zero elements may be skipped on sparse data structures if allowed (default).
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {System.Func}                             predicate    
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}    zeros
             * @return  {System.Tuple$2}
             */
            Find: function (predicate, zeros) {
                if (zeros === void 0) { zeros = 0; }
                return this.Storage.Find(predicate, zeros);
            },
            /**
             * Returns a tuple with the index and values of the first element pair of two vectors of the same size satisfying a predicate, or null if none is found.
             Zero elements may be skipped on sparse data structures if allowed (default).
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {Function}                                   TOther       
             * @param   {System.Func}                                predicate    
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other        
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}       zeros
             * @return  {System.Tuple$3}
             */
            Find2: function (TOther, predicate, other, zeros) {
                if (zeros === void 0) { zeros = 0; }
                return this.Storage.Find2(TOther, other.Storage, predicate, zeros);
            },
            /**
             * Returns true if at least one element satisfies a predicate.
             Zero elements may be skipped on sparse data structures if allowed (default).
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {System.Func}                             predicate    
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}    zeros
             * @return  {boolean}
             */
            Exists: function (predicate, zeros) {
                if (zeros === void 0) { zeros = 0; }
                return this.Storage.Find(predicate, zeros) != null;
            },
            /**
             * Returns true if at least one element pairs of two vectors of the same size satisfies a predicate.
             Zero elements may be skipped on sparse data structures if allowed (default).
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {Function}                                   TOther       
             * @param   {System.Func}                                predicate    
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other        
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}       zeros
             * @return  {boolean}
             */
            Exists2: function (TOther, predicate, other, zeros) {
                if (zeros === void 0) { zeros = 0; }
                return this.Storage.Find2(TOther, other.Storage, predicate, zeros) != null;
            },
            /**
             * Returns true if all elements satisfy a predicate.
             Zero elements may be skipped on sparse data structures if allowed (default).
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {System.Func}                             predicate    
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}    zeros
             * @return  {boolean}
             */
            ForAll: function (predicate, zeros) {
                if (zeros === void 0) { zeros = 0; }
                return this.Storage.Find(function (x) {
                    return !predicate(x);
                }, zeros) == null;
            },
            /**
             * Returns true if all element pairs of two vectors of the same size satisfy a predicate.
             Zero elements may be skipped on sparse data structures if allowed (default).
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Vector$1
             * @memberof MathNet.Numerics.LinearAlgebra.Vector$1
             * @param   {Function}                                   TOther       
             * @param   {System.Func}                                predicate    
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other        
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}       zeros
             * @return  {boolean}
             */
            ForAll2: function (TOther, predicate, other, zeros) {
                if (zeros === void 0) { zeros = 0; }
                return this.Storage.Find2(TOther, other.Storage, function (x, y) {
                    return !predicate(x, y);
                }, zeros) == null;
            }
        }
    }; });

    /** @namespace MathNet.Numerics.LinearAlgebra.Factorization */

    /**
     * Classes that solves a system of linear equations, <pre><code>AX = B</code></pre>.
     *
     * @abstract
     * @public
     * @class MathNet.Numerics.LinearAlgebra.Factorization.ISolver$1
     * @param   {Function}    [name]    Supported data types are double, single, {@link }, and {@link }.
     */
    Bridge.definei("MathNet.Numerics.LinearAlgebra.Factorization.ISolver$1", function (T) { return {
        $kind: "interface"
    }; });

    Bridge.define("MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1", function (T) { return {
        statics: {
            fields: {
                _singleton: null
            },
            props: {
                Matrix: {
                    get: function () {
                        return MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T)._singleton.Item1;
                    }
                },
                Vector: {
                    get: function () {
                        return MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T)._singleton.Item2;
                    }
                }
            },
            ctors: {
                init: function () {
                    this._singleton = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Create();
                }
            },
            methods: {
                Create: function () {


                    if (Bridge.referenceEquals(T, System.Double)) {
                        return { Item1: Bridge.cast(new MathNet.Numerics.LinearAlgebra.Double.MatrixBuilder(), MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1(T)), Item2: Bridge.cast(new MathNet.Numerics.LinearAlgebra.Double.VectorBuilder(), MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1(T)) };
                    }



                    throw new System.NotSupportedException.$ctor1(System.String.format("Matrices and vectors of type '{0}' are not supported. Only Double, Single, Complex or Complex32 are supported at this point.", [Bridge.Reflection.getTypeName(T)]));
                },
                Register: function (matrixBuilder, vectorBuilder) {
                    MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T)._singleton = { Item1: matrixBuilder, Item2: vectorBuilder };
                }
            }
        }
    }; });

    /** @namespace MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra */

    /**
     * Generic linear algebra type builder, for situations where a matrix or vector
     must be created in a generic way. Usage of generic builders should not be
     required in normal user code.
     *
     * @abstract
     * @public
     * @class MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
     */
    Bridge.define("MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1", function (T) { return {
        methods: {
            /**
             * Create a new matrix straight from an initialized matrix storage instance.
             If you have an instance of a discrete storage type instead, use their direct methods instead.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1}    storage
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            OfStorage: function (storage) {
                if (storage == null) {
                    throw new System.ArgumentNullException.$ctor1("storage");
                }

                var dense = Bridge.as(storage, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T));
                if (dense != null) {
                    return this.Dense(dense);
                }

                var sparse = Bridge.as(storage, MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T));
                if (sparse != null) {
                    return this.Sparse(sparse);
                }

                var diagonal = Bridge.as(storage, MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(T));
                if (diagonal != null) {
                    return this.Diagonal$1(diagonal);
                }

                throw new System.NotSupportedException.$ctor1(System.String.format("Matrix storage type '{0}' is not supported. Only DenseColumnMajorMatrixStorage, SparseCompressedRowMatrixStorage and DiagonalMatrixStorage are supported as this point.", [Bridge.Reflection.getTypeName(Bridge.getType(storage))]));
            },
            /**
             * Create a new matrix with the same kind of the provided example.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {Function}                                   TU              
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    example         
             * @param   {number}                                     rows            
             * @param   {number}                                     columns         
             * @param   {boolean}                                    fullyMutable
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            SameAs$4: function (TU, example, rows, columns, fullyMutable) {
                if (fullyMutable === void 0) { fullyMutable = false; }
                var storage = example.Storage;
                if (Bridge.is(storage, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T))) {
                    return this.Dense$1(rows, columns);
                }
                if (Bridge.is(storage, MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(T))) {
                    return fullyMutable ? this.Sparse$1(rows, columns) : this.Diagonal$2(rows, columns);
                }
                if (Bridge.is(storage, MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T))) {
                    return this.Sparse$1(rows, columns);
                }
                return this.Dense$1(rows, columns);
            },
            /**
             * Create a new matrix with the same kind and dimensions of the provided example.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {Function}                                   TU         
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    example
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            SameAs$3: function (TU, example) {
                return this.SameAs$4(TU, example, example.RowCount, example.ColumnCount);
            },
            /**
             * Create a new matrix with the same kind of the provided example.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    example    
             * @param   {number}                                     rows       
             * @param   {number}                                     columns
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            SameAs$2: function (example, rows, columns) {
                return example.Storage.IsDense ? this.Dense$1(rows, columns) : this.Sparse$1(rows, columns);
            },
            /**
             * Create a new matrix with a type that can represent and is closest to both provided samples.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    example         
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    otherExample    
             * @param   {number}                                     rows            
             * @param   {number}                                     columns         
             * @param   {boolean}                                    fullyMutable
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            SameAs$1: function (example, otherExample, rows, columns, fullyMutable) {
                if (fullyMutable === void 0) { fullyMutable = false; }
                var storage1 = example.Storage;
                var storage2 = otherExample.Storage;
                if (Bridge.is(storage1, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T)) || Bridge.is(storage2, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T))) {
                    return this.Dense$1(rows, columns);
                }
                if (Bridge.is(storage1, MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(T)) && Bridge.is(storage2, MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(T))) {
                    return fullyMutable ? this.Sparse$1(rows, columns) : this.Diagonal$2(rows, columns);
                }
                if (Bridge.is(storage1, MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T)) || Bridge.is(storage2, MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T))) {
                    return this.Sparse$1(rows, columns);
                }
                return this.Dense$1(rows, columns);
            },
            /**
             * Create a new matrix with a type that can represent and is closest to both provided samples and the dimensions of example.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    example         
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    otherExample
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            SameAs: function (example, otherExample) {
                return this.SameAs$1(example, otherExample, example.RowCount, example.ColumnCount);
            },
            /**
             * Create a new dense matrix with the given number of rows and columns.
             All cells of the matrix will be initialized to zero.
             Zero-length matrices are not supported.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                     rows       
             * @param   {number}                                     columns
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            Dense$1: function (rows, columns) {
                return this.Dense(new (MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T)).ctor(rows, columns));
            },
            /**
             * Create a new dense matrix with the given number of rows and columns directly binding to a raw array.
             The array is assumed to be in column-major order (column by column) and is used directly without copying.
             Very efficient, but changes to the array and the matrix will affect each other.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                     rows       
             * @param   {number}                                     columns    
             * @param   {Array.<T>}                                  storage
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             * @see {@link }
             */
            Dense$3: function (rows, columns, storage) {
                return this.Dense(new (MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T)).$ctor1(rows, columns, storage));
            },
            /**
             * Create a new dense matrix and initialize each value to the same provided value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                     rows       
             * @param   {number}                                     columns    
             * @param   {T}                                          value
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            Dense$2: function (rows, columns, value) {
                if (Bridge.equalsT(this.Zero, value, T)) {
                    return this.Dense$1(rows, columns);
                }
                return this.Dense(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T).OfValue(rows, columns, value));
            },
            /**
             * Create a new dense matrix and initialize each value using the provided init function.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                     rows       
             * @param   {number}                                     columns    
             * @param   {System.Func}                                init
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            Dense$4: function (rows, columns, init) {
                return this.Dense(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T).OfInit(rows, columns, init));
            },
            /**
             * Create a new diagonal dense matrix and initialize each diagonal value to the same provided value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                     rows       
             * @param   {number}                                     columns    
             * @param   {T}                                          value
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DenseDiagonal$1: function (rows, columns, value) {
                if (Bridge.equalsT(this.Zero, value, T)) {
                    return this.Dense$1(rows, columns);
                }
                return this.Dense(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T).OfDiagonalInit(rows, columns, function (i) {
                    return value;
                }));
            },
            /**
             * Create a new diagonal dense matrix and initialize each diagonal value to the same provided value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                     order    
             * @param   {T}                                          value
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DenseDiagonal: function (order, value) {
                if (Bridge.equalsT(this.Zero, value, T)) {
                    return this.Dense$1(order, order);
                }
                return this.Dense(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T).OfDiagonalInit(order, order, function (i) {
                    return value;
                }));
            },
            /**
             * Create a new diagonal dense matrix and initialize each diagonal value using the provided init function.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                     rows       
             * @param   {number}                                     columns    
             * @param   {System.Func}                                init
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DenseDiagonal$2: function (rows, columns, init) {
                return this.Dense(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T).OfDiagonalInit(rows, columns, init));
            },
            /**
             * Create a new diagonal dense identity matrix with a one-diagonal.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                     rows       
             * @param   {number}                                     columns
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DenseIdentity$1: function (rows, columns) {
                return this.Dense(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T).OfDiagonalInit(rows, columns, Bridge.fn.bind(this, function (i) {
                    return this.One;
                })));
            },
            /**
             * Create a new diagonal dense identity matrix with a one-diagonal.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                     order
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DenseIdentity: function (order) {
                return this.Dense(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T).OfDiagonalInit(order, order, Bridge.fn.bind(this, function (i) {
                    return this.One;
                })));
            },
            /**
             * Create a new dense matrix as a copy of the given other matrix.
             This new matrix will be independent from the other matrix.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    matrix
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DenseOfMatrix: function (matrix) {
                return this.Dense(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T).OfMatrix(matrix.Storage));
            },
            /**
             * Create a new dense matrix as a copy of the given two-dimensional array.
             This new matrix will be independent from the provided array.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {Array.<T>}                                  array
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DenseOfArray: function (array) {
                return this.Dense(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T).OfArray(array));
            },
            /**
             * Create a new dense matrix as a copy of the given indexed enumerable.
             Keys must be provided at most once, zero is assumed if a key is omitted.
             This new matrix will be independent from the enumerable.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                      rows          
             * @param   {number}                                      columns       
             * @param   {System.Collections.Generic.IEnumerable$1}    enumerable
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DenseOfIndexed: function (rows, columns, enumerable) {
                return this.Dense(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T).OfIndexedEnumerable(rows, columns, enumerable));
            },
            /**
             * Create a new dense matrix as a copy of the given enumerable.
             The enumerable is assumed to be in column-major order (column by column).
             This new matrix will be independent from the enumerable.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                      rows           
             * @param   {number}                                      columns        
             * @param   {System.Collections.Generic.IEnumerable$1}    columnMajor
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DenseOfColumnMajor: function (rows, columns, columnMajor) {
                return this.Dense(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T).OfColumnMajorEnumerable(rows, columns, columnMajor));
            },
            /**
             * Create a new dense matrix as a copy of the given enumerable of enumerable columns.
             Each enumerable in the master enumerable specifies a column.
             This new matrix will be independent from the enumerables.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {System.Collections.Generic.IEnumerable$1}    data
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DenseOfColumns: function (data) {
                return this.Dense(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T).OfColumnArrays(System.Linq.Enumerable.from(data, System.Collections.Generic.IEnumerable$1(T)).select(function (v) {
                        var $t;
                        return (Bridge.as(v, System.Array.type(T))) || ($t = T, System.Linq.Enumerable.from(v, $t).ToArray($t));
                    }).ToArray(System.Array.type(T))));
            },
            /**
             * Create a new dense matrix as a copy of the given enumerable of enumerable columns.
             Each enumerable in the master enumerable specifies a column.
             This new matrix will be independent from the enumerables.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                      rows       
             * @param   {number}                                      columns    
             * @param   {System.Collections.Generic.IEnumerable$1}    data
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DenseOfColumns$1: function (rows, columns, data) {
                return this.Dense(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T).OfColumnEnumerables(rows, columns, data));
            },
            /**
             * Create a new dense matrix of T as a copy of the given column arrays.
             This new matrix will be independent from the arrays.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {Array.<Array.<T>>}                          columns
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DenseOfColumnArrays: function (columns) {
                if (columns === void 0) { columns = []; }
                return this.Dense(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T).OfColumnArrays(columns));
            },
            /**
             * Create a new dense matrix of T as a copy of the given column arrays.
             This new matrix will be independent from the arrays.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {System.Collections.Generic.IEnumerable$1}    columns
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DenseOfColumnArrays$1: function (columns) {
                var $t;
                return this.Dense(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T).OfColumnArrays((Bridge.as(columns, System.Array.type(System.Array.type(T)))) || ($t = System.Array.type(T), System.Linq.Enumerable.from(columns, $t).ToArray($t))));
            },
            /**
             * Create a new dense matrix as a copy of the given column vectors.
             This new matrix will be independent from the vectors.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {Array.<MathNet.Numerics.LinearAlgebra.Vector$1>}    columns
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DenseOfColumnVectors: function (columns) {
                if (columns === void 0) { columns = []; }
                var storage = System.Array.init(columns.length, null, MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T));
                for (var i = 0; i < columns.length; i = (i + 1) | 0) {
                    storage[System.Array.index(i, storage)] = columns[System.Array.index(i, columns)].Storage;
                }
                return this.Dense(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T).OfColumnVectors(storage));
            },
            /**
             * Create a new dense matrix as a copy of the given column vectors.
             This new matrix will be independent from the vectors.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {System.Collections.Generic.IEnumerable$1}    columns
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DenseOfColumnVectors$1: function (columns) {
                return this.Dense(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T).OfColumnVectors(System.Linq.Enumerable.from(columns, MathNet.Numerics.LinearAlgebra.Vector$1(T)).select(function (c) {
                        return c.Storage;
                    }).ToArray(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T))));
            },
            /**
             * Create a new dense matrix as a copy of the given enumerable.
             The enumerable is assumed to be in row-major order (row by row).
             This new matrix will be independent from the enumerable.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                      rows           
             * @param   {number}                                      columns        
             * @param   {System.Collections.Generic.IEnumerable$1}    columnMajor
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DenseOfRowMajor: function (rows, columns, columnMajor) {
                return this.Dense(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T).OfRowMajorEnumerable(rows, columns, columnMajor));
            },
            /**
             * Create a new dense matrix as a copy of the given enumerable of enumerable rows.
             Each enumerable in the master enumerable specifies a row.
             This new matrix will be independent from the enumerables.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {System.Collections.Generic.IEnumerable$1}    data
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DenseOfRows: function (data) {
                return this.Dense(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T).OfRowArrays(System.Linq.Enumerable.from(data, System.Collections.Generic.IEnumerable$1(T)).select(function (v) {
                        var $t;
                        return (Bridge.as(v, System.Array.type(T))) || ($t = T, System.Linq.Enumerable.from(v, $t).ToArray($t));
                    }).ToArray(System.Array.type(T))));
            },
            /**
             * Create a new dense matrix as a copy of the given enumerable of enumerable rows.
             Each enumerable in the master enumerable specifies a row.
             This new matrix will be independent from the enumerables.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                      rows       
             * @param   {number}                                      columns    
             * @param   {System.Collections.Generic.IEnumerable$1}    data
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DenseOfRows$1: function (rows, columns, data) {
                return this.Dense(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T).OfRowEnumerables(rows, columns, data));
            },
            /**
             * Create a new dense matrix of T as a copy of the given row arrays.
             This new matrix will be independent from the arrays.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {Array.<Array.<T>>}                          rows
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DenseOfRowArrays: function (rows) {
                if (rows === void 0) { rows = []; }
                return this.Dense(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T).OfRowArrays(rows));
            },
            /**
             * Create a new dense matrix of T as a copy of the given row arrays.
             This new matrix will be independent from the arrays.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {System.Collections.Generic.IEnumerable$1}    rows
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DenseOfRowArrays$1: function (rows) {
                var $t;
                return this.Dense(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T).OfRowArrays((Bridge.as(rows, System.Array.type(System.Array.type(T)))) || ($t = System.Array.type(T), System.Linq.Enumerable.from(rows, $t).ToArray($t))));
            },
            /**
             * Create a new dense matrix as a copy of the given row vectors.
             This new matrix will be independent from the vectors.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {Array.<MathNet.Numerics.LinearAlgebra.Vector$1>}    rows
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DenseOfRowVectors: function (rows) {
                if (rows === void 0) { rows = []; }
                var storage = System.Array.init(rows.length, null, MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T));
                for (var i = 0; i < rows.length; i = (i + 1) | 0) {
                    storage[System.Array.index(i, storage)] = rows[System.Array.index(i, rows)].Storage;
                }
                return this.Dense(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T).OfRowVectors(storage));
            },
            /**
             * Create a new dense matrix as a copy of the given row vectors.
             This new matrix will be independent from the vectors.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {System.Collections.Generic.IEnumerable$1}    rows
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DenseOfRowVectors$1: function (rows) {
                return this.Dense(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T).OfRowVectors(System.Linq.Enumerable.from(rows, MathNet.Numerics.LinearAlgebra.Vector$1(T)).select(function (r) {
                        return r.Storage;
                    }).ToArray(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T))));
            },
            /**
             * Create a new dense matrix with the diagonal as a copy of the given vector.
             This new matrix will be independent from the vector.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    diagonal
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DenseOfDiagonalVector: function (diagonal) {
                var m = this.Dense$1(diagonal.Count, diagonal.Count);
                m.SetDiagonal$1(diagonal);
                return m;
            },
            /**
             * Create a new dense matrix with the diagonal as a copy of the given vector.
             This new matrix will be independent from the vector.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                     rows        
             * @param   {number}                                     columns     
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    diagonal
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DenseOfDiagonalVector$1: function (rows, columns, diagonal) {
                var m = this.Dense$1(rows, columns);
                m.SetDiagonal$1(diagonal);
                return m;
            },
            /**
             * Create a new dense matrix with the diagonal as a copy of the given array.
             This new matrix will be independent from the array.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {Array.<T>}                                  diagonal
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DenseOfDiagonalArray: function (diagonal) {
                var m = this.Dense$1(diagonal.length, diagonal.length);
                m.SetDiagonal(diagonal);
                return m;
            },
            /**
             * Create a new dense matrix with the diagonal as a copy of the given array.
             This new matrix will be independent from the array.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                     rows        
             * @param   {number}                                     columns     
             * @param   {Array.<T>}                                  diagonal
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DenseOfDiagonalArray$1: function (rows, columns, diagonal) {
                var m = this.Dense$1(rows, columns);
                m.SetDiagonal(diagonal);
                return m;
            },
            /**
             * Create a new dense matrix from a 2D array of existing matrices.
             The matrices in the array are not required to be dense already.
             If the matrices do not align properly, they are placed on the top left
             corner of their cell with the remaining fields left zero.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {Array.<MathNet.Numerics.LinearAlgebra.Matrix$1>}    matrices
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DenseOfMatrixArray: function (matrices) {
                var rowspans = System.Array.init(System.Array.getLength(matrices, 0), 0, System.Int32);
                var colspans = System.Array.init(System.Array.getLength(matrices, 1), 0, System.Int32);
                for (var i = 0; i < rowspans.length; i = (i + 1) | 0) {
                    for (var j = 0; j < colspans.length; j = (j + 1) | 0) {
                        rowspans[System.Array.index(i, rowspans)] = Math.max(rowspans[System.Array.index(i, rowspans)], matrices.get([i, j]).RowCount);
                        colspans[System.Array.index(j, colspans)] = Math.max(colspans[System.Array.index(j, colspans)], matrices.get([i, j]).ColumnCount);
                    }
                }
                var m = this.Dense$1(System.Linq.Enumerable.from(rowspans, System.Int32).sum(), System.Linq.Enumerable.from(colspans, System.Int32).sum());
                var rowoffset = 0;
                for (var i1 = 0; i1 < rowspans.length; i1 = (i1 + 1) | 0) {
                    var coloffset = 0;
                    for (var j1 = 0; j1 < colspans.length; j1 = (j1 + 1) | 0) {
                        m.SetSubMatrix(rowoffset, coloffset, matrices.get([i1, j1]));
                        coloffset = (coloffset + colspans[System.Array.index(j1, colspans)]) | 0;
                    }
                    rowoffset = (rowoffset + rowspans[System.Array.index(i1, rowspans)]) | 0;
                }
                return m;
            },
            /**
             * Create a sparse matrix of T with the given number of rows and columns.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                     rows       The number of rows.
             * @param   {number}                                     columns    The number of columns.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            Sparse$1: function (rows, columns) {
                return this.Sparse(new (MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T))(rows, columns));
            },
            /**
             * Create a new sparse matrix and initialize each value to the same provided value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                     rows       
             * @param   {number}                                     columns    
             * @param   {T}                                          value
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            Sparse$2: function (rows, columns, value) {
                if (Bridge.equalsT(this.Zero, value, T)) {
                    return this.Sparse$1(rows, columns);
                }
                return this.Sparse(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T).OfValue(rows, columns, value));
            },
            /**
             * Create a new sparse matrix and initialize each value using the provided init function.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                     rows       
             * @param   {number}                                     columns    
             * @param   {System.Func}                                init
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            Sparse$3: function (rows, columns, init) {
                return this.Sparse(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T).OfInit(rows, columns, init));
            },
            /**
             * Create a new diagonal sparse matrix and initialize each diagonal value to the same provided value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                     rows       
             * @param   {number}                                     columns    
             * @param   {T}                                          value
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            SparseDiagonal$1: function (rows, columns, value) {
                if (Bridge.equalsT(this.Zero, value, T)) {
                    return this.Sparse$1(rows, columns);
                }
                return this.Sparse(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T).OfDiagonalInit(rows, columns, function (i) {
                    return value;
                }));
            },
            /**
             * Create a new diagonal sparse matrix and initialize each diagonal value to the same provided value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                     order    
             * @param   {T}                                          value
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            SparseDiagonal: function (order, value) {
                if (Bridge.equalsT(this.Zero, value, T)) {
                    return this.Sparse$1(order, order);
                }
                return this.Sparse(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T).OfDiagonalInit(order, order, function (i) {
                    return value;
                }));
            },
            /**
             * Create a new diagonal sparse matrix and initialize each diagonal value using the provided init function.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                     rows       
             * @param   {number}                                     columns    
             * @param   {System.Func}                                init
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            SparseDiagonal$2: function (rows, columns, init) {
                return this.Sparse(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T).OfDiagonalInit(rows, columns, init));
            },
            /**
             * Create a new diagonal dense identity matrix with a one-diagonal.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                     rows       
             * @param   {number}                                     columns
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            SparseIdentity$1: function (rows, columns) {
                return this.Sparse(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T).OfDiagonalInit(rows, columns, Bridge.fn.bind(this, function (i) {
                    return this.One;
                })));
            },
            /**
             * Create a new diagonal dense identity matrix with a one-diagonal.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                     order
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            SparseIdentity: function (order) {
                return this.Sparse(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T).OfDiagonalInit(order, order, Bridge.fn.bind(this, function (i) {
                    return this.One;
                })));
            },
            /**
             * Create a new sparse matrix as a copy of the given other matrix.
             This new matrix will be independent from the other matrix.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    matrix
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            SparseOfMatrix: function (matrix) {
                return this.Sparse(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T).OfMatrix(matrix.Storage));
            },
            /**
             * Create a new sparse matrix as a copy of the given two-dimensional array.
             This new matrix will be independent from the provided array.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {Array.<T>}                                  array
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            SparseOfArray: function (array) {
                return this.Sparse(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T).OfArray(array));
            },
            /**
             * Create a new sparse matrix as a copy of the given indexed enumerable.
             Keys must be provided at most once, zero is assumed if a key is omitted.
             This new matrix will be independent from the enumerable.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                      rows          
             * @param   {number}                                      columns       
             * @param   {System.Collections.Generic.IEnumerable$1}    enumerable
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            SparseOfIndexed: function (rows, columns, enumerable) {
                return this.Sparse(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T).OfIndexedEnumerable(rows, columns, enumerable));
            },
            /**
             * Create a new sparse matrix as a copy of the given enumerable.
             The enumerable is assumed to be in row-major order (row by row).
             This new matrix will be independent from the enumerable.
             A new memory block will be allocated for storing the vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                      rows        
             * @param   {number}                                      columns     
             * @param   {System.Collections.Generic.IEnumerable$1}    rowMajor
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             * @see {@link }
             */
            SparseOfRowMajor: function (rows, columns, rowMajor) {
                return this.Sparse(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T).OfRowMajorEnumerable(rows, columns, rowMajor));
            },
            /**
             * Create a new sparse matrix with the given number of rows and columns as a copy of the given array.
             The array is assumed to be in column-major order (column by column).
             This new matrix will be independent from the provided array.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                     rows           
             * @param   {number}                                     columns        
             * @param   {System.Collections.Generic.IList$1}         columnMajor
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             * @see {@link }
             */
            SparseOfColumnMajor: function (rows, columns, columnMajor) {
                return this.Sparse(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T).OfColumnMajorList(rows, columns, columnMajor));
            },
            /**
             * Create a new sparse matrix as a copy of the given enumerable of enumerable columns.
             Each enumerable in the master enumerable specifies a column.
             This new matrix will be independent from the enumerables.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {System.Collections.Generic.IEnumerable$1}    data
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            SparseOfColumns: function (data) {
                return this.Sparse(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T).OfColumnArrays(System.Linq.Enumerable.from(data, System.Collections.Generic.IEnumerable$1(T)).select(function (v) {
                        var $t;
                        return (Bridge.as(v, System.Array.type(T))) || ($t = T, System.Linq.Enumerable.from(v, $t).ToArray($t));
                    }).ToArray(System.Array.type(T))));
            },
            /**
             * Create a new sparse matrix as a copy of the given enumerable of enumerable columns.
             Each enumerable in the master enumerable specifies a column.
             This new matrix will be independent from the enumerables.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                      rows       
             * @param   {number}                                      columns    
             * @param   {System.Collections.Generic.IEnumerable$1}    data
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            SparseOfColumns$1: function (rows, columns, data) {
                return this.Sparse(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T).OfColumnEnumerables(rows, columns, data));
            },
            /**
             * Create a new sparse matrix as a copy of the given column arrays.
             This new matrix will be independent from the arrays.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {Array.<Array.<T>>}                          columns
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            SparseOfColumnArrays: function (columns) {
                if (columns === void 0) { columns = []; }
                return this.Sparse(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T).OfColumnArrays(columns));
            },
            /**
             * Create a new sparse matrix as a copy of the given column arrays.
             This new matrix will be independent from the arrays.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {System.Collections.Generic.IEnumerable$1}    columns
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            SparseOfColumnArrays$1: function (columns) {
                var $t;
                return this.Sparse(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T).OfColumnArrays((Bridge.as(columns, System.Array.type(System.Array.type(T)))) || ($t = System.Array.type(T), System.Linq.Enumerable.from(columns, $t).ToArray($t))));
            },
            /**
             * Create a new sparse matrix as a copy of the given column vectors.
             This new matrix will be independent from the vectors.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {Array.<MathNet.Numerics.LinearAlgebra.Vector$1>}    columns
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            SparseOfColumnVectors: function (columns) {
                if (columns === void 0) { columns = []; }
                var storage = System.Array.init(columns.length, null, MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T));
                for (var i = 0; i < columns.length; i = (i + 1) | 0) {
                    storage[System.Array.index(i, storage)] = columns[System.Array.index(i, columns)].Storage;
                }
                return this.Sparse(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T).OfColumnVectors(storage));
            },
            /**
             * Create a new sparse matrix as a copy of the given column vectors.
             This new matrix will be independent from the vectors.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {System.Collections.Generic.IEnumerable$1}    columns
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            SparseOfColumnVectors$1: function (columns) {
                return this.Sparse(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T).OfColumnVectors(System.Linq.Enumerable.from(columns, MathNet.Numerics.LinearAlgebra.Vector$1(T)).select(function (c) {
                        return c.Storage;
                    }).ToArray(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T))));
            },
            /**
             * Create a new sparse matrix as a copy of the given enumerable of enumerable rows.
             Each enumerable in the master enumerable specifies a row.
             This new matrix will be independent from the enumerables.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {System.Collections.Generic.IEnumerable$1}    data
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            SparseOfRows: function (data) {
                return this.Sparse(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T).OfRowArrays(System.Linq.Enumerable.from(data, System.Collections.Generic.IEnumerable$1(T)).select(function (v) {
                        var $t;
                        return (Bridge.as(v, System.Array.type(T))) || ($t = T, System.Linq.Enumerable.from(v, $t).ToArray($t));
                    }).ToArray(System.Array.type(T))));
            },
            /**
             * Create a new sparse matrix as a copy of the given enumerable of enumerable rows.
             Each enumerable in the master enumerable specifies a row.
             This new matrix will be independent from the enumerables.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                      rows       
             * @param   {number}                                      columns    
             * @param   {System.Collections.Generic.IEnumerable$1}    data
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            SparseOfRows$1: function (rows, columns, data) {
                return this.Sparse(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T).OfRowEnumerables(rows, columns, data));
            },
            /**
             * Create a new sparse matrix as a copy of the given row arrays.
             This new matrix will be independent from the arrays.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {Array.<Array.<T>>}                          rows
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            SparseOfRowArrays: function (rows) {
                if (rows === void 0) { rows = []; }
                return this.Sparse(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T).OfRowArrays(rows));
            },
            /**
             * Create a new sparse matrix as a copy of the given row arrays.
             This new matrix will be independent from the arrays.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {System.Collections.Generic.IEnumerable$1}    rows
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            SparseOfRowArrays$1: function (rows) {
                var $t;
                return this.Sparse(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T).OfRowArrays((Bridge.as(rows, System.Array.type(System.Array.type(T)))) || ($t = System.Array.type(T), System.Linq.Enumerable.from(rows, $t).ToArray($t))));
            },
            /**
             * Create a new sparse matrix as a copy of the given row vectors.
             This new matrix will be independent from the vectors.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {Array.<MathNet.Numerics.LinearAlgebra.Vector$1>}    rows
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            SparseOfRowVectors: function (rows) {
                if (rows === void 0) { rows = []; }
                var storage = System.Array.init(rows.length, null, MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T));
                for (var i = 0; i < rows.length; i = (i + 1) | 0) {
                    storage[System.Array.index(i, storage)] = rows[System.Array.index(i, rows)].Storage;
                }
                return this.Sparse(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T).OfRowVectors(storage));
            },
            /**
             * Create a new sparse matrix as a copy of the given row vectors.
             This new matrix will be independent from the vectors.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {System.Collections.Generic.IEnumerable$1}    rows
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            SparseOfRowVectors$1: function (rows) {
                return this.Sparse(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T).OfRowVectors(System.Linq.Enumerable.from(rows, MathNet.Numerics.LinearAlgebra.Vector$1(T)).select(function (r) {
                        return r.Storage;
                    }).ToArray(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T))));
            },
            /**
             * Create a new sparse matrix with the diagonal as a copy of the given vector.
             This new matrix will be independent from the vector.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    diagonal
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            SparseOfDiagonalVector: function (diagonal) {
                var m = this.Sparse$1(diagonal.Count, diagonal.Count);
                m.SetDiagonal$1(diagonal);
                return m;
            },
            /**
             * Create a new sparse matrix with the diagonal as a copy of the given vector.
             This new matrix will be independent from the vector.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                     rows        
             * @param   {number}                                     columns     
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    diagonal
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            SparseOfDiagonalVector$1: function (rows, columns, diagonal) {
                var m = this.Sparse$1(rows, columns);
                m.SetDiagonal$1(diagonal);
                return m;
            },
            /**
             * Create a new sparse matrix with the diagonal as a copy of the given array.
             This new matrix will be independent from the array.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {Array.<T>}                                  diagonal
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            SparseOfDiagonalArray: function (diagonal) {
                var m = this.Sparse$1(diagonal.length, diagonal.length);
                m.SetDiagonal(diagonal);
                return m;
            },
            /**
             * Create a new sparse matrix with the diagonal as a copy of the given array.
             This new matrix will be independent from the array.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                     rows        
             * @param   {number}                                     columns     
             * @param   {Array.<T>}                                  diagonal
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            SparseOfDiagonalArray$1: function (rows, columns, diagonal) {
                var m = this.Sparse$1(rows, columns);
                m.SetDiagonal(diagonal);
                return m;
            },
            /**
             * Create a new sparse matrix from a 2D array of existing matrices.
             The matrices in the array are not required to be sparse already.
             If the matrices do not align properly, they are placed on the top left
             corner of their cell with the remaining fields left zero.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {Array.<MathNet.Numerics.LinearAlgebra.Matrix$1>}    matrices
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            SparseOfMatrixArray: function (matrices) {
                var rowspans = System.Array.init(System.Array.getLength(matrices, 0), 0, System.Int32);
                var colspans = System.Array.init(System.Array.getLength(matrices, 1), 0, System.Int32);
                for (var i = 0; i < rowspans.length; i = (i + 1) | 0) {
                    for (var j = 0; j < colspans.length; j = (j + 1) | 0) {
                        rowspans[System.Array.index(i, rowspans)] = Math.max(rowspans[System.Array.index(i, rowspans)], matrices.get([i, j]).RowCount);
                        colspans[System.Array.index(j, colspans)] = Math.max(colspans[System.Array.index(j, colspans)], matrices.get([i, j]).ColumnCount);
                    }
                }
                var m = this.Sparse$1(System.Linq.Enumerable.from(rowspans, System.Int32).sum(), System.Linq.Enumerable.from(colspans, System.Int32).sum());
                var rowoffset = 0;
                for (var i1 = 0; i1 < rowspans.length; i1 = (i1 + 1) | 0) {
                    var coloffset = 0;
                    for (var j1 = 0; j1 < colspans.length; j1 = (j1 + 1) | 0) {
                        m.SetSubMatrix(rowoffset, coloffset, matrices.get([i1, j1]));
                        coloffset = (coloffset + colspans[System.Array.index(j1, colspans)]) | 0;
                    }
                    rowoffset = (rowoffset + rowspans[System.Array.index(i1, rowspans)]) | 0;
                }
                return m;
            },
            /**
             * Create a new diagonal matrix with the given number of rows and columns.
             All cells of the matrix will be initialized to zero.
             Zero-length matrices are not supported.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                     rows       
             * @param   {number}                                     columns
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            Diagonal$2: function (rows, columns) {
                return this.Diagonal$1(new (MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(T)).ctor(rows, columns));
            },
            /**
             * Create a new diagonal matrix with the given number of rows and columns directly binding to a raw array.
             The array is assumed to represent the diagonal values and is used directly without copying.
             Very efficient, but changes to the array and the matrix will affect each other.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                     rows       
             * @param   {number}                                     columns    
             * @param   {Array.<T>}                                  storage
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            Diagonal$4: function (rows, columns, storage) {
                return this.Diagonal$1(new (MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(T)).$ctor1(rows, columns, storage));
            },
            /**
             * Create a new square diagonal matrix directly binding to a raw array.
             The array is assumed to represent the diagonal values and is used directly without copying.
             Very efficient, but changes to the array and the matrix will affect each other.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {Array.<T>}                                  storage
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            Diagonal: function (storage) {
                return this.Diagonal$1(new (MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(T)).$ctor1(storage.length, storage.length, storage));
            },
            /**
             * Create a new diagonal matrix and initialize each diagonal value to the same provided value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                     rows       
             * @param   {number}                                     columns    
             * @param   {T}                                          value
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            Diagonal$3: function (rows, columns, value) {
                if (Bridge.equalsT(this.Zero, value, T)) {
                    return this.Diagonal$2(rows, columns);
                }
                return this.Diagonal$1(MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(T).OfValue(rows, columns, value));
            },
            /**
             * Create a new diagonal matrix and initialize each diagonal value using the provided init function.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                     rows       
             * @param   {number}                                     columns    
             * @param   {System.Func}                                init
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            Diagonal$5: function (rows, columns, init) {
                return this.Diagonal$1(MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(T).OfInit(rows, columns, init));
            },
            /**
             * Create a new diagonal identity matrix with a one-diagonal.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                     rows       
             * @param   {number}                                     columns
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DiagonalIdentity$1: function (rows, columns) {
                return this.Diagonal$1(MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(T).OfValue(rows, columns, this.One));
            },
            /**
             * Create a new diagonal identity matrix with a one-diagonal.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                     order
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DiagonalIdentity: function (order) {
                return this.Diagonal$1(MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(T).OfValue(order, order, this.One));
            },
            /**
             * Create a new diagonal matrix with the diagonal as a copy of the given vector.
             This new matrix will be independent from the vector.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    diagonal
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DiagonalOfDiagonalVector: function (diagonal) {
                var m = this.Diagonal$2(diagonal.Count, diagonal.Count);
                m.SetDiagonal$1(diagonal);
                return m;
            },
            /**
             * Create a new diagonal matrix with the diagonal as a copy of the given vector.
             This new matrix will be independent from the vector.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                     rows        
             * @param   {number}                                     columns     
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    diagonal
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DiagonalOfDiagonalVector$1: function (rows, columns, diagonal) {
                var m = this.Diagonal$2(rows, columns);
                m.SetDiagonal$1(diagonal);
                return m;
            },
            /**
             * Create a new diagonal matrix with the diagonal as a copy of the given array.
             This new matrix will be independent from the array.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {Array.<T>}                                  diagonal
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DiagonalOfDiagonalArray: function (diagonal) {
                var m = this.Diagonal$2(diagonal.length, diagonal.length);
                m.SetDiagonal(diagonal);
                return m;
            },
            /**
             * Create a new diagonal matrix with the diagonal as a copy of the given array.
             This new matrix will be independent from the array.
             A new memory block will be allocated for storing the matrix.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1
             * @param   {number}                                     rows        
             * @param   {number}                                     columns     
             * @param   {Array.<T>}                                  diagonal
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            DiagonalOfDiagonalArray$1: function (rows, columns, diagonal) {
                var m = this.Diagonal$2(rows, columns);
                m.SetDiagonal(diagonal);
                return m;
            }
        }
    }; });

    /**
     * Generic linear algebra type builder, for situations where a matrix or vector
     must be created in a generic way. Usage of generic builders should not be
     required in normal user code.
     *
     * @abstract
     * @public
     * @class MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
     */
    Bridge.define("MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1", function (T) { return {
        methods: {
            /**
             * Create a new vector straight from an initialized matrix storage instance.
             If you have an instance of a discrete storage type instead, use their direct methods instead.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @param   {MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1}    storage
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            OfStorage: function (storage) {
                if (storage == null) {
                    throw new System.ArgumentNullException.$ctor1("storage");
                }

                var dense = Bridge.as(storage, MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(T));
                if (dense != null) {
                    return this.Dense$1(dense);
                }

                var sparse = Bridge.as(storage, MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(T));
                if (sparse != null) {
                    return this.Sparse(sparse);
                }

                throw new System.NotSupportedException.$ctor1(System.String.format("Vector storage type '{0}' is not supported. Only DenseVectorStorage and SparseVectorStorage are supported as this point.", [Bridge.Reflection.getTypeName(Bridge.getType(storage))]));
            },
            /**
             * Create a new vector with the same kind of the provided example.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @param   {Function}                                   TU         
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    example    
             * @param   {number}                                     length
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            SameAs$5: function (TU, example, length) {
                return example.Storage.IsDense ? this.Dense$2(length) : this.Sparse$1(length);
            },
            /**
             * Create a new vector with the same kind and dimension of the provided example.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @param   {Function}                                   TU         
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    example
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            SameAs$4: function (TU, example) {
                return example.Storage.IsDense ? this.Dense$2(example.Count) : this.Sparse$1(example.Count);
            },
            /**
             * Create a new vector with the same kind of the provided example.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @param   {Function}                                   TU         
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    example    
             * @param   {number}                                     length
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            SameAs$3: function (TU, example, length) {
                return example.Storage.IsDense ? this.Dense$2(length) : this.Sparse$1(length);
            },
            /**
             * Create a new vector with a type that can represent and is closest to both provided samples.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    example         
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    otherExample    
             * @param   {number}                                     length
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            SameAs$2: function (example, otherExample, length) {
                return example.Storage.IsDense || otherExample.Storage.IsDense ? this.Dense$2(length) : this.Sparse$1(length);
            },
            /**
             * Create a new vector with a type that can represent and is closest to both provided samples and the dimensions of example.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    example         
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    otherExample
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            SameAs$1: function (example, otherExample) {
                return example.Storage.IsDense || otherExample.Storage.IsDense ? this.Dense$2(example.Count) : this.Sparse$1(example.Count);
            },
            /**
             * Create a new vector with a type that can represent and is closest to both provided samples.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    matrix    
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    vector    
             * @param   {number}                                     length
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            SameAs: function (matrix, vector, length) {
                return matrix.Storage.IsDense || vector.Storage.IsDense ? this.Dense$2(length) : this.Sparse$1(length);
            },
            /**
             * Create a dense vector of T with the given size.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @param   {number}                                     size    The size of the vector.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            Dense$2: function (size) {
                return this.Dense$1(new (MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(T)).ctor(size));
            },
            /**
             * Create a dense vector of T that is directly bound to the specified array.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @param   {Array.<T>}                                  array
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            Dense: function (array) {
                return this.Dense$1(new (MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(T)).$ctor1(array.length, array));
            },
            /**
             * Create a new dense vector and initialize each value using the provided value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @param   {number}                                     length    
             * @param   {T}                                          value
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            Dense$3: function (length, value) {
                if (Bridge.equalsT(this.Zero, value, T)) {
                    return this.Dense$2(length);
                }
                return this.Dense$1(MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(T).OfValue(length, value));
            },
            /**
             * Create a new dense vector and initialize each value using the provided init function.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @param   {number}                                     length    
             * @param   {System.Func}                                init
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            Dense$4: function (length, init) {
                return this.Dense$1(MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(T).OfInit(length, init));
            },
            /**
             * Create a new dense vector as a copy of the given other vector.
             This new vector will be independent from the other vector.
             A new memory block will be allocated for storing the vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    vector
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            DenseOfVector: function (vector) {
                return this.Dense$1(MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(T).OfVector(vector.Storage));
            },
            /**
             * Create a new dense vector as a copy of the given array.
             This new vector will be independent from the array.
             A new memory block will be allocated for storing the vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @param   {Array.<T>}                                  array
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            DenseOfArray: function (array) {
                return this.Dense$1(MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(T).OfVector(new (MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(T)).$ctor1(array.length, array)));
            },
            /**
             * Create a new dense vector as a copy of the given enumerable.
             This new vector will be independent from the enumerable.
             A new memory block will be allocated for storing the vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @param   {System.Collections.Generic.IEnumerable$1}    enumerable
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            DenseOfEnumerable: function (enumerable) {
                return this.Dense$1(MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(T).OfEnumerable(enumerable));
            },
            /**
             * Create a new dense vector as a copy of the given indexed enumerable.
             Keys must be provided at most once, zero is assumed if a key is omitted.
             This new vector will be independent from the enumerable.
             A new memory block will be allocated for storing the vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @param   {number}                                      length        
             * @param   {System.Collections.Generic.IEnumerable$1}    enumerable
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            DenseOfIndexed: function (length, enumerable) {
                return this.Dense$1(MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(T).OfIndexedEnumerable(length, enumerable));
            },
            /**
             * Create a sparse vector of T with the given size.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @param   {number}                                     size    The size of the vector.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            Sparse$1: function (size) {
                return this.Sparse(new (MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(T))(size));
            },
            /**
             * Create a new sparse vector and initialize each value using the provided value.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @param   {number}                                     length    
             * @param   {T}                                          value
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            Sparse$2: function (length, value) {
                if (Bridge.equalsT(this.Zero, value, T)) {
                    return this.Sparse$1(length);
                }
                return this.Sparse(MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(T).OfValue(length, value));
            },
            /**
             * Create a new sparse vector and initialize each value using the provided init function.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @param   {number}                                     length    
             * @param   {System.Func}                                init
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            Sparse$3: function (length, init) {
                return this.Sparse(MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(T).OfInit(length, init));
            },
            /**
             * Create a new sparse vector as a copy of the given other vector.
             This new vector will be independent from the other vector.
             A new memory block will be allocated for storing the vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    vector
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            SparseOfVector: function (vector) {
                return this.Sparse(MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(T).OfVector(vector.Storage));
            },
            /**
             * Create a new sparse vector as a copy of the given array.
             This new vector will be independent from the array.
             A new memory block will be allocated for storing the vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @param   {Array.<T>}                                  array
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            SparseOfArray: function (array) {
                return this.Sparse(MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(T).OfEnumerable(array));
            },
            /**
             * Create a new sparse vector as a copy of the given enumerable.
             This new vector will be independent from the enumerable.
             A new memory block will be allocated for storing the vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @param   {System.Collections.Generic.IEnumerable$1}    enumerable
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            SparseOfEnumerable: function (enumerable) {
                return this.Sparse(MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(T).OfEnumerable(enumerable));
            },
            /**
             * Create a new sparse vector as a copy of the given indexed enumerable.
             Keys must be provided at most once, zero is assumed if a key is omitted.
             This new vector will be independent from the enumerable.
             A new memory block will be allocated for storing the vector.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @memberof MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
             * @param   {number}                                      length        
             * @param   {System.Collections.Generic.IEnumerable$1}    enumerable
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            SparseOfIndexed: function (length, enumerable) {
                return this.Sparse(MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(T).OfIndexedEnumerable(length, enumerable));
            }
        }
    }; });

    Bridge.define("MathNet.Numerics.LinearAlgebra.ExistingData", {
        $kind: "enum",
        statics: {
            fields: {
                /**
                 * Existing data may not be all zeros, so clearing may be necessary
                 if not all of it will be overwritten anyway.
                 *
                 * @static
                 * @public
                 * @memberof MathNet.Numerics.LinearAlgebra.ExistingData
                 * @constant
                 * @default 0
                 * @type MathNet.Numerics.LinearAlgebra.ExistingData
                 */
                Clear: 0,
                /**
                 * If existing data is assumed to be all zeros already,
                 clearing it may be skipped if applicable.
                 *
                 * @static
                 * @public
                 * @memberof MathNet.Numerics.LinearAlgebra.ExistingData
                 * @constant
                 * @default 1
                 * @type MathNet.Numerics.LinearAlgebra.ExistingData
                 */
                AssumeZeros: 1
            }
        }
    });

    Bridge.define("MathNet.Numerics.LinearAlgebra.MatrixExtensions", {
        statics: {
            methods: {
                /**
                 * Converts a matrix to single precision.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.MatrixExtensions
                 * @memberof MathNet.Numerics.LinearAlgebra.MatrixExtensions
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    matrix
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                ToSingle: function (matrix) {
                    return matrix.Map(System.Single, function (x) {
                        return x;
                    }, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                },
                /**
                 * Converts a matrix to double precision.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.MatrixExtensions
                 * @memberof MathNet.Numerics.LinearAlgebra.MatrixExtensions
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    matrix
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                ToDouble: function (matrix) {
                    return matrix.Map(System.Double, function (x) {
                        return x;
                    }, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                },
                /**
                 * Converts a matrix to single precision complex numbers.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.MatrixExtensions
                 * @memberof MathNet.Numerics.LinearAlgebra.MatrixExtensions
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    matrix
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                ToComplex32: function (matrix) {
                    return matrix.Map(mathnetnumericsbridge.Complex32, function (x) {
                        return new mathnetnumericsbridge.Complex32.$ctor1(x.Real, x.Imaginary);
                    }, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                },
                /**
                 * Gets a single precision complex matrix with the real parts from the given matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.MatrixExtensions
                 * @memberof MathNet.Numerics.LinearAlgebra.MatrixExtensions
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    matrix
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                ToComplex32$1: function (matrix) {
                    return matrix.Map(mathnetnumericsbridge.Complex32, function (x) {
                        return new mathnetnumericsbridge.Complex32.$ctor1(x, 0.0);
                    }, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                },
                /**
                 * Converts a matrix to double precision complex numbers.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.MatrixExtensions
                 * @memberof MathNet.Numerics.LinearAlgebra.MatrixExtensions
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    matrix
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                ToComplex: function (matrix) {
                    return matrix.Map(mathnetnumericsbridge.Complex, function (x) {
                        return new mathnetnumericsbridge.Complex.$ctor1(x.Real, x.Imaginary);
                    }, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                },
                /**
                 * Gets a double precision complex matrix with the real parts from the given matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.MatrixExtensions
                 * @memberof MathNet.Numerics.LinearAlgebra.MatrixExtensions
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    matrix
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                ToComplex$1: function (matrix) {
                    return matrix.Map(mathnetnumericsbridge.Complex, function (x) {
                        return new mathnetnumericsbridge.Complex.$ctor1(x, 0.0);
                    }, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                },
                /**
                 * Gets a real matrix representing the real parts of a complex matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.MatrixExtensions
                 * @memberof MathNet.Numerics.LinearAlgebra.MatrixExtensions
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    matrix
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Real: function (matrix) {
                    return matrix.Map(System.Double, function (x) {
                        return x.Real;
                    }, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                },
                /**
                 * Gets a real matrix representing the real parts of a complex matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.MatrixExtensions
                 * @memberof MathNet.Numerics.LinearAlgebra.MatrixExtensions
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    matrix
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Real$1: function (matrix) {
                    return matrix.Map(System.Single, function (x) {
                        return x.Real;
                    }, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                },
                /**
                 * Gets a real matrix representing the imaginary parts of a complex matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.MatrixExtensions
                 * @memberof MathNet.Numerics.LinearAlgebra.MatrixExtensions
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    matrix
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Imaginary: function (matrix) {
                    return matrix.Map(System.Double, function (x) {
                        return x.Imaginary;
                    }, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                },
                /**
                 * Gets a real matrix representing the imaginary parts of a complex matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.MatrixExtensions
                 * @memberof MathNet.Numerics.LinearAlgebra.MatrixExtensions
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    matrix
                 * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
                 */
                Imaginary$1: function (matrix) {
                    return matrix.Map(System.Single, function (x) {
                        return x.Imaginary;
                    }, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                }
            }
        }
    });

    Bridge.define("MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1", function (T) { return {
        inherits: function () { return [System.IEquatable$1(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T))]; },
        statics: {
            fields: {
                Zero: null
            },
            ctors: {
                init: function () {
                    this.Zero = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix.Zero;
                }
            }
        },
        fields: {
            RowCount: 0,
            ColumnCount: 0
        },
        alias: ["equalsT", "System$IEquatable$1$MathNet$Numerics$LinearAlgebra$Storage$MatrixStorage$1$" + Bridge.getTypeAlias(T) + "$equalsT"],
        ctors: {
            ctor: function (rowCount, columnCount) {
                this.$initialize();
                if (rowCount <= 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("rowCount", "Resources.MatrixRowsMustBePositive");
                }

                if (columnCount <= 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("columnCount", "Resources.MatrixColumnsMustBePositive");
                }

                this.RowCount = rowCount;
                this.ColumnCount = columnCount;
            }
        },
        methods: {
            /**
             * Gets or sets the value at the given row and column, with range checking.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1
             * @param   {number}    row       The row of the element.
             * @param   {number}    column    The column of the element.
             * @return  {T}
             */
            getItem: function (row, column) {
                this.ValidateRange(row, column);
                return this.At(row, column);
            },
            /**
             * Gets or sets the value at the given row and column, with range checking.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1
             * @param   {number}    row       The row of the element.
             * @param   {number}    column    The column of the element.
             * @param   {T}         value     The value to get or set.
             * @return  {void}
             */
            setItem: function (row, column, value) {
                this.ValidateRange(row, column);
                this.At$1(row, column, value);
            },
            /**
             * Indicates whether the current object is equal to another object of the same type.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1
             * @param   {MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1}    other    An object to compare with this object.
             * @return  {boolean}                                                            <pre><code>true</code></pre> if the current object is equal to the <b /> parameter; otherwise, <pre><code>false</code></pre>.
             */
            equalsT: function (other) {
                if (other == null) {
                    return false;
                }
                if (this.ColumnCount !== other.ColumnCount || this.RowCount !== other.RowCount) {
                    return false;
                }

                if (Bridge.referenceEquals(this, other)) {
                    return true;
                }

                return this.Find2Unchecked(T, other, function (a, b) {
                    return !Bridge.equalsT(a, b, T);
                }, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip) == null;
            },
            /**
             * Determines whether the specified {@link } is equal to the current {@link }.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1
             * @param   {System.Object}    obj    The {@link } to compare with the current {@link }.
             * @return  {boolean}                 true if the specified {@link } is equal to the current {@link }; otherwise, false.
             */
            equals: function (obj) {
                return this.equalsT(Bridge.as(obj, MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T)));
            },
            /**
             * Serves as a hash function for a particular type.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1
             * @return  {number}        A hash code for the current {@link }.
             */
            getHashCode: function () {
                var hashNum = Math.min(Bridge.Int.mul(this.RowCount, this.ColumnCount), 25);
                var hash = 17;
                for (var i = 0; i < hashNum; i = (i + 1) | 0) {
                    var col = { };
                    var row = Bridge.Math.divRem(i, this.ColumnCount, col);
                    hash = (Bridge.Int.mul(hash, 31) + Bridge.getHashCode(this.At(row, col.v))) | 0;
                }
                return hash;
            },
            Clear: function () {
                for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                    for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                        this.At$1(i, j, MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero);
                    }
                }
            },
            Clear$1: function (rowIndex, rowCount, columnIndex, columnCount) {
                if (rowCount < 1 || columnCount < 1) {
                    return;
                }

                if (((rowIndex + rowCount) | 0) > this.RowCount || rowIndex < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("rowIndex");
                }

                if (((columnIndex + columnCount) | 0) > this.ColumnCount || columnIndex < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("columnIndex");
                }

                this.ClearUnchecked(rowIndex, rowCount, columnIndex, columnCount);
            },
            ClearUnchecked: function (rowIndex, rowCount, columnIndex, columnCount) {
                for (var i = rowIndex; i < ((rowIndex + rowCount) | 0); i = (i + 1) | 0) {
                    for (var j = columnIndex; j < ((columnIndex + columnCount) | 0); j = (j + 1) | 0) {
                        this.At$1(i, j, MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero);
                    }
                }
            },
            ClearRows: function (rowIndices) {
                if (rowIndices.length === 0) {
                    return;
                }

                for (var k = 0; k < rowIndices.length; k = (k + 1) | 0) {
                    if (rowIndices[System.Array.index(k, rowIndices)] < 0 || rowIndices[System.Array.index(k, rowIndices)] >= this.RowCount) {
                        throw new System.ArgumentOutOfRangeException.$ctor1("rowIndices");
                    }
                }

                this.ClearRowsUnchecked(rowIndices);
            },
            ClearColumns: function (columnIndices) {
                if (columnIndices.length === 0) {
                    return;
                }

                for (var k = 0; k < columnIndices.length; k = (k + 1) | 0) {
                    if (((columnIndices[System.Array.index(k, columnIndices)]) >>> 0) >= (this.ColumnCount >>> 0)) {
                        throw new System.ArgumentOutOfRangeException.$ctor1("columnIndices");
                    }
                }

                this.ClearColumnsUnchecked(columnIndices);
            },
            ClearRowsUnchecked: function (rowIndices) {
                for (var k = 0; k < rowIndices.length; k = (k + 1) | 0) {
                    var row = rowIndices[System.Array.index(k, rowIndices)];
                    for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                        this.At$1(row, j, MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero);
                    }
                }
            },
            ClearColumnsUnchecked: function (columnIndices) {
                for (var k = 0; k < columnIndices.length; k = (k + 1) | 0) {
                    var column = columnIndices[System.Array.index(k, columnIndices)];
                    for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                        this.At$1(i, column, MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero);
                    }
                }
            },
            CopyTo: function (target, existingData) {
                if (existingData === void 0) { existingData = 0; }
                if (target == null) {
                    throw new System.ArgumentNullException.$ctor1("target");
                }

                if (Bridge.referenceEquals(this, target)) {
                    return;
                }

                if (this.RowCount !== target.RowCount || this.ColumnCount !== target.ColumnCount) {
                    var message = System.String.format("Resources.ArgumentMatrixDimensions2, RowCount + x + ColumnCount, target.RowCount + x + target.ColumnCount", null);
                    throw new System.ArgumentException.$ctor3(message, "target");
                }

                this.CopyToUnchecked(target, existingData);
            },
            CopyToUnchecked: function (target, existingData) {
                for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                    for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                        target.At$1(i, j, this.At(i, j));
                    }
                }
            },
            CopySubMatrixTo: function (target, sourceRowIndex, targetRowIndex, rowCount, sourceColumnIndex, targetColumnIndex, columnCount, existingData) {
                if (existingData === void 0) { existingData = 0; }
                if (target == null) {
                    throw new System.ArgumentNullException.$ctor1("target");
                }

                if (rowCount === 0 || columnCount === 0) {
                    return;
                }

                if (Bridge.referenceEquals(this, target)) {
                    throw new System.NotSupportedException.ctor();
                }

                this.ValidateSubMatrixRange(T, target, sourceRowIndex, targetRowIndex, rowCount, sourceColumnIndex, targetColumnIndex, columnCount);

                this.CopySubMatrixToUnchecked(target, sourceRowIndex, targetRowIndex, rowCount, sourceColumnIndex, targetColumnIndex, columnCount, existingData);
            },
            CopySubMatrixToUnchecked: function (target, sourceRowIndex, targetRowIndex, rowCount, sourceColumnIndex, targetColumnIndex, columnCount, existingData) {
                for (var j = sourceColumnIndex, jj = targetColumnIndex; j < ((sourceColumnIndex + columnCount) | 0); j = (j + 1) | 0, jj = (jj + 1) | 0) {
                    for (var i = sourceRowIndex, ii = targetRowIndex; i < ((sourceRowIndex + rowCount) | 0); i = (i + 1) | 0, ii = (ii + 1) | 0) {
                        target.At$1(ii, jj, this.At(i, j));
                    }
                }
            },
            CopyRowTo: function (target, rowIndex, existingData) {
                if (existingData === void 0) { existingData = 0; }
                if (target == null) {
                    throw new System.ArgumentNullException.$ctor1("target");
                }

                this.ValidateRowRange(T, target, rowIndex);
                this.CopySubRowToUnchecked(target, rowIndex, 0, 0, this.ColumnCount, existingData);
            },
            CopySubRowTo: function (target, rowIndex, sourceColumnIndex, targetColumnIndex, columnCount, existingData) {
                if (existingData === void 0) { existingData = 0; }
                if (target == null) {
                    throw new System.ArgumentNullException.$ctor1("target");
                }

                if (columnCount === 0) {
                    return;
                }

                this.ValidateSubRowRange(T, target, rowIndex, sourceColumnIndex, targetColumnIndex, columnCount);
                this.CopySubRowToUnchecked(target, rowIndex, sourceColumnIndex, targetColumnIndex, columnCount, existingData);
            },
            CopySubRowToUnchecked: function (target, rowIndex, sourceColumnIndex, targetColumnIndex, columnCount, existingData) {
                for (var j = sourceColumnIndex, jj = targetColumnIndex; j < ((sourceColumnIndex + columnCount) | 0); j = (j + 1) | 0, jj = (jj + 1) | 0) {
                    target.At$1(jj, this.At(rowIndex, j));
                }
            },
            CopyColumnTo: function (target, columnIndex, existingData) {
                if (existingData === void 0) { existingData = 0; }
                if (target == null) {
                    throw new System.ArgumentNullException.$ctor1("target");
                }

                this.ValidateColumnRange(T, target, columnIndex);
                this.CopySubColumnToUnchecked(target, columnIndex, 0, 0, this.RowCount, existingData);
            },
            CopySubColumnTo: function (target, columnIndex, sourceRowIndex, targetRowIndex, rowCount, existingData) {
                if (existingData === void 0) { existingData = 0; }
                if (target == null) {
                    throw new System.ArgumentNullException.$ctor1("target");
                }

                if (rowCount === 0) {
                    return;
                }

                this.ValidateSubColumnRange(T, target, columnIndex, sourceRowIndex, targetRowIndex, rowCount);
                this.CopySubColumnToUnchecked(target, columnIndex, sourceRowIndex, targetRowIndex, rowCount, existingData);
            },
            CopySubColumnToUnchecked: function (target, columnIndex, sourceRowIndex, targetRowIndex, rowCount, existingData) {
                for (var i = sourceRowIndex, ii = targetRowIndex; i < ((sourceRowIndex + rowCount) | 0); i = (i + 1) | 0, ii = (ii + 1) | 0) {
                    target.At$1(ii, this.At(i, columnIndex));
                }
            },
            TransposeTo: function (target, existingData) {
                if (existingData === void 0) { existingData = 0; }
                if (target == null) {
                    throw new System.ArgumentNullException.$ctor1("target");
                }

                if (this.RowCount !== target.ColumnCount || this.ColumnCount !== target.RowCount) {
                    var message = System.String.format("Resources.ArgumentMatrixDimensions2, RowCount + x + ColumnCount, target.RowCount + x + target.ColumnCount", null);
                    throw new System.ArgumentException.$ctor3(message, "target");
                }

                if (Bridge.referenceEquals(this, target)) {
                    this.TransposeSquareInplaceUnchecked();
                    return;
                }

                this.TransposeToUnchecked(target, existingData);
            },
            TransposeToUnchecked: function (target, existingData) {
                for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                    for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                        target.At$1(j, i, this.At(i, j));
                    }
                }
            },
            TransposeSquareInplaceUnchecked: function () {
                for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                    for (var i = 0; i < j; i = (i + 1) | 0) {
                        var swap = this.At(i, j);
                        this.At$1(i, j, this.At(j, i));
                        this.At$1(j, i, swap);
                    }
                }
            },
            ToRowMajorArray: function () {
                var ret = System.Array.init(Bridge.Int.mul(this.RowCount, this.ColumnCount), function (){
                    return Bridge.getDefaultValue(T);
                }, T);
                for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                    var offset = Bridge.Int.mul(i, this.ColumnCount);
                    for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                        ret[System.Array.index(((offset + j) | 0), ret)] = this.At(i, j);
                    }
                }
                return ret;
            },
            ToColumnMajorArray: function () {
                var ret = System.Array.init(Bridge.Int.mul(this.RowCount, this.ColumnCount), function (){
                    return Bridge.getDefaultValue(T);
                }, T);
                for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                    var offset = Bridge.Int.mul(j, this.RowCount);
                    for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                        ret[System.Array.index(((offset + i) | 0), ret)] = this.At(i, j);
                    }
                }
                return ret;
            },
            ToRowArrays: function () {
                var ret = System.Array.init(this.RowCount, null, System.Array.type(T));
                for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                    var row = System.Array.init(this.ColumnCount, function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                    for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                        row[System.Array.index(j, row)] = this.At(i, j);
                    }
                    ret[System.Array.index(i, ret)] = row;
                }
                return ret;
            },
            ToColumnArrays: function () {
                var ret = System.Array.init(this.ColumnCount, null, System.Array.type(T));
                for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                    var column = System.Array.init(this.RowCount, function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                    for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                        column[System.Array.index(i, column)] = this.At(i, j);
                    }
                    ret[System.Array.index(j, ret)] = column;
                }
                return ret;
            },
            ToArray: function () {
                var ret = System.Array.create(function (){
                    return Bridge.getDefaultValue(T);
                }, null, T, this.RowCount, this.ColumnCount);
                for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                    for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                        ret.set([i, j], this.At(i, j));
                    }
                }
                return ret;
            },
            AsRowMajorArray: function () {
                return null;
            },
            AsColumnMajorArray: function () {
                return null;
            },
            AsRowArrays: function () {
                return null;
            },
            AsColumnArrays: function () {
                return null;
            },
            AsArray: function () {
                return null;
            },
            Enumerate: function () {
                return new (Bridge.GeneratorEnumerable$1(T))(Bridge.fn.bind(this, function ()  {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        i,
                        j,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(T))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        i = 0;
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ( i < this.RowCount ) {
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 9;
                                        continue;
                                    }
                                    case 2: {
                                        j = 0;
                                            $step = 3;
                                            continue;
                                    }
                                    case 3: {
                                        if ( j < this.ColumnCount ) {
                                                $step = 4;
                                                continue;
                                            }
                                        $step = 7;
                                        continue;
                                    }
                                    case 4: {
                                        $enumerator.current = this.At(i, j);
                                            $step = 5;
                                            return true;
                                    }
                                    case 5: {
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        j = (j + 1) | 0;
                                        $step = 3;
                                        continue;
                                    }
                                    case 7: {
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        i = (i + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 9: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }));
            },
            EnumerateIndexed: function () {
                return new (Bridge.GeneratorEnumerable$1(System.Tuple$3(System.Int32,System.Int32,T)))(Bridge.fn.bind(this, function ()  {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        i,
                        j,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Tuple$3(System.Int32,System.Int32,T)))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        i = 0;
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ( i < this.RowCount ) {
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 9;
                                        continue;
                                    }
                                    case 2: {
                                        j = 0;
                                            $step = 3;
                                            continue;
                                    }
                                    case 3: {
                                        if ( j < this.ColumnCount ) {
                                                $step = 4;
                                                continue;
                                            }
                                        $step = 7;
                                        continue;
                                    }
                                    case 4: {
                                        $enumerator.current = { Item1: i, Item2: j, Item3: this.At(i, j) };
                                            $step = 5;
                                            return true;
                                    }
                                    case 5: {
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        j = (j + 1) | 0;
                                        $step = 3;
                                        continue;
                                    }
                                    case 7: {
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        i = (i + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 9: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }));
            },
            EnumerateNonZero: function () {
                return new (Bridge.GeneratorEnumerable$1(T))(Bridge.fn.bind(this, function ()  {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        i,
                        j,
                        x,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(T))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        i = 0;
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ( i < this.RowCount ) {
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 11;
                                        continue;
                                    }
                                    case 2: {
                                        j = 0;
                                            $step = 3;
                                            continue;
                                    }
                                    case 3: {
                                        if ( j < this.ColumnCount ) {
                                                $step = 4;
                                                continue;
                                            }
                                        $step = 9;
                                        continue;
                                    }
                                    case 4: {
                                        x = this.At(i, j);
                                            if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, x, T)) {
                                                $step = 5;
                                                continue;
                                            } 
                                            $step = 7;
                                            continue;
                                    }
                                    case 5: {
                                        $enumerator.current = x;
                                            $step = 6;
                                            return true;
                                    }
                                    case 6: {
                                        $step = 7;
                                        continue;
                                    }
                                    case 7: {
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        j = (j + 1) | 0;
                                        $step = 3;
                                        continue;
                                    }
                                    case 9: {
                                        $step = 10;
                                        continue;
                                    }
                                    case 10: {
                                        i = (i + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 11: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }));
            },
            EnumerateNonZeroIndexed: function () {
                return new (Bridge.GeneratorEnumerable$1(System.Tuple$3(System.Int32,System.Int32,T)))(Bridge.fn.bind(this, function ()  {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        i,
                        j,
                        x,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Tuple$3(System.Int32,System.Int32,T)))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        i = 0;
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ( i < this.RowCount ) {
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 11;
                                        continue;
                                    }
                                    case 2: {
                                        j = 0;
                                            $step = 3;
                                            continue;
                                    }
                                    case 3: {
                                        if ( j < this.ColumnCount ) {
                                                $step = 4;
                                                continue;
                                            }
                                        $step = 9;
                                        continue;
                                    }
                                    case 4: {
                                        x = this.At(i, j);
                                            if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, x, T)) {
                                                $step = 5;
                                                continue;
                                            } 
                                            $step = 7;
                                            continue;
                                    }
                                    case 5: {
                                        $enumerator.current = { Item1: i, Item2: j, Item3: x };
                                            $step = 6;
                                            return true;
                                    }
                                    case 6: {
                                        $step = 7;
                                        continue;
                                    }
                                    case 7: {
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        j = (j + 1) | 0;
                                        $step = 3;
                                        continue;
                                    }
                                    case 9: {
                                        $step = 10;
                                        continue;
                                    }
                                    case 10: {
                                        i = (i + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 11: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }));
            },
            Find: function (predicate, zeros) {
                for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                    for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                        var item = this.At(i, j);
                        if (predicate(item)) {
                            return { Item1: i, Item2: j, Item3: item };
                        }
                    }
                }
                return null;
            },
            Find2: function (TOther, other, predicate, zeros) {
                if (other == null) {
                    throw new System.ArgumentNullException.$ctor1("other");
                }

                if (this.RowCount !== other.RowCount || this.ColumnCount !== other.ColumnCount) {
                    var message = System.String.format("Resources.ArgumentMatrixDimensions2, RowCount + x + ColumnCount, other.RowCount + x + other.ColumnCount", null);
                    throw new System.ArgumentException.$ctor3(message, "other");
                }

                return this.Find2Unchecked(TOther, other, predicate, zeros);
            },
            Find2Unchecked: function (TOther, other, predicate, zeros) {
                for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                    for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                        var item = this.At(i, j);
                        var otherItem = other.At(i, j);
                        if (predicate(item, otherItem)) {
                            return { Item1: i, Item2: j, Item3: item, Item4: otherItem };
                        }
                    }
                }
                return null;
            },
            MapInplace: function (f, zeros) {
                for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                    for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                        this.At$1(i, j, f(this.At(i, j)));
                    }
                }
            },
            MapIndexedInplace: function (f, zeros) {
                for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                    for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                        this.At$1(i, j, f(i, j, this.At(i, j)));
                    }
                }
            },
            MapTo: function (TU, target, f, zeros, existingData) {
                if (target == null) {
                    throw new System.ArgumentNullException.$ctor1("target");
                }

                if (this.RowCount !== target.RowCount || this.ColumnCount !== target.ColumnCount) {
                    var message = System.String.format("Resources.ArgumentMatrixDimensions2, RowCount + x + ColumnCount, target.RowCount + x + target.ColumnCount", null);
                    throw new System.ArgumentException.$ctor3(message, "target");
                }

                this.MapToUnchecked(TU, target, f, zeros, existingData);
            },
            MapToUnchecked: function (TU, target, f, zeros, existingData) {
                for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                    for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                        target.At$1(i, j, f(this.At(i, j)));
                    }
                }
            },
            MapIndexedTo: function (TU, target, f, zeros, existingData) {
                if (target == null) {
                    throw new System.ArgumentNullException.$ctor1("target");
                }

                if (this.RowCount !== target.RowCount || this.ColumnCount !== target.ColumnCount) {
                    var message = System.String.format("Resources.ArgumentMatrixDimensions2, RowCount + x + ColumnCount, target.RowCount + x + target.ColumnCount", null);
                    throw new System.ArgumentException.$ctor3(message, "target");
                }

                this.MapIndexedToUnchecked(TU, target, f, zeros, existingData);
            },
            MapIndexedToUnchecked: function (TU, target, f, zeros, existingData) {
                for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                    for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                        target.At$1(i, j, f(i, j, this.At(i, j)));
                    }
                }
            },
            MapSubMatrixIndexedTo: function (TU, target, f, sourceRowIndex, targetRowIndex, rowCount, sourceColumnIndex, targetColumnIndex, columnCount, zeros, existingData) {
                if (target == null) {
                    throw new System.ArgumentNullException.$ctor1("target");
                }

                if (rowCount === 0 || columnCount === 0) {
                    return;
                }

                if (Bridge.referenceEquals(this, target)) {
                    throw new System.NotSupportedException.ctor();
                }

                this.ValidateSubMatrixRange(TU, target, sourceRowIndex, targetRowIndex, rowCount, sourceColumnIndex, targetColumnIndex, columnCount);

                this.MapSubMatrixIndexedToUnchecked(TU, target, f, sourceRowIndex, targetRowIndex, rowCount, sourceColumnIndex, targetColumnIndex, columnCount, zeros, existingData);
            },
            MapSubMatrixIndexedToUnchecked: function (TU, target, f, sourceRowIndex, targetRowIndex, rowCount, sourceColumnIndex, targetColumnIndex, columnCount, zeros, existingData) {
                for (var j = sourceColumnIndex, jj = targetColumnIndex; j < ((sourceColumnIndex + columnCount) | 0); j = (j + 1) | 0, jj = (jj + 1) | 0) {
                    for (var i = sourceRowIndex, ii = targetRowIndex; i < ((sourceRowIndex + rowCount) | 0); i = (i + 1) | 0, ii = (ii + 1) | 0) {
                        target.At$1(ii, jj, f(ii, jj, this.At(i, j)));
                    }
                }
            },
            Map2To: function (target, other, f, zeros, existingData) {
                if (target == null) {
                    throw new System.ArgumentNullException.$ctor1("target");
                }

                if (other == null) {
                    throw new System.ArgumentNullException.$ctor1("other");
                }

                if (this.RowCount !== target.RowCount || this.ColumnCount !== target.ColumnCount) {
                    var message = System.String.format("Resources.ArgumentMatrixDimensions2, RowCount + x + ColumnCount, target.RowCount + x + target.ColumnCount", null);
                    throw new System.ArgumentException.$ctor3(message, "target");
                }

                if (this.RowCount !== other.RowCount || this.ColumnCount !== other.ColumnCount) {
                    var message1 = System.String.format("Resources.ArgumentMatrixDimensions2, RowCount + x + ColumnCount, other.RowCount + x + other.ColumnCount", null);
                    throw new System.ArgumentException.$ctor3(message1, "other");
                }

                this.Map2ToUnchecked(target, other, f, zeros, existingData);
            },
            Map2ToUnchecked: function (target, other, f, zeros, existingData) {
                for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                    for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                        target.At$1(i, j, f(this.At(i, j), other.At(i, j)));
                    }
                }
            },
            /**
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1
             * @param   {Function}                                TU          
             * @param   {Array.<TU>}                              target      
             * @param   {System.Func}                             f           
             * @param   {System.Func}                             finalize    
             * @param   {Array.<TU>}                              state       
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}    zeros
             * @return  {void}
             */
            FoldByRow: function (TU, target, f, finalize, state, zeros) {
                if (target == null) {
                    throw new System.ArgumentNullException.$ctor1("target");
                }
                if (target.length !== this.RowCount) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "target");
                }

                if (state == null) {
                    throw new System.ArgumentNullException.$ctor1("state");
                }
                if (state.length !== this.RowCount) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "state");
                }

                this.FoldByRowUnchecked(TU, target, f, finalize, state, zeros);
            },
            /**
             * @instance
             * @this MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1
             * @param   {Function}                                TU          
             * @param   {Array.<TU>}                              target      
             * @param   {System.Func}                             f           
             * @param   {System.Func}                             finalize    
             * @param   {Array.<TU>}                              state       
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}    zeros
             * @return  {void}
             */
            FoldByRowUnchecked: function (TU, target, f, finalize, state, zeros) {
                for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                    var s = state[System.Array.index(i, state)];
                    for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                        s = f(s, this.At(i, j));
                    }
                    target[System.Array.index(i, target)] = finalize(s, this.ColumnCount);
                }
            },
            /**
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1
             * @param   {Function}                                TU          
             * @param   {Array.<TU>}                              target      
             * @param   {System.Func}                             f           
             * @param   {System.Func}                             finalize    
             * @param   {Array.<TU>}                              state       
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}    zeros
             * @return  {void}
             */
            FoldByColumn: function (TU, target, f, finalize, state, zeros) {
                if (target == null) {
                    throw new System.ArgumentNullException.$ctor1("target");
                }
                if (target.length !== this.ColumnCount) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "target");
                }

                if (state == null) {
                    throw new System.ArgumentNullException.$ctor1("state");
                }
                if (state.length !== this.ColumnCount) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "state");
                }

                this.FoldByColumnUnchecked(TU, target, f, finalize, state, zeros);
            },
            /**
             * @instance
             * @this MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1
             * @param   {Function}                                TU          
             * @param   {Array.<TU>}                              target      
             * @param   {System.Func}                             f           
             * @param   {System.Func}                             finalize    
             * @param   {Array.<TU>}                              state       
             * @param   {MathNet.Numerics.LinearAlgebra.Zeros}    zeros
             * @return  {void}
             */
            FoldByColumnUnchecked: function (TU, target, f, finalize, state, zeros) {
                for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                    var s = state[System.Array.index(j, state)];
                    for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                        s = f(s, this.At(i, j));
                    }
                    target[System.Array.index(j, target)] = finalize(s, this.RowCount);
                }
            },
            Fold2: function (TOther, TState, other, f, state, zeros) {
                if (other == null) {
                    throw new System.ArgumentNullException.$ctor1("other");
                }

                if (this.RowCount !== other.RowCount || this.ColumnCount !== other.ColumnCount) {
                    var message = System.String.format("Resources.ArgumentMatrixDimensions2, RowCount + x + ColumnCount, other.RowCount + x + other.ColumnCount", null);
                    throw new System.ArgumentException.$ctor3(message, "other");
                }

                return this.Fold2Unchecked(TOther, TState, other, f, state, zeros);
            },
            Fold2Unchecked: function (TOther, TState, other, f, state, zeros) {
                for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                    for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                        state = f(state, this.At(i, j), other.At(i, j));
                    }
                }

                return state;
            },
            ValidateRange: function (row, column) {
                if ((row >>> 0) >= (this.RowCount >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("row");
                }

                if ((column >>> 0) >= (this.ColumnCount >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("column");
                }
            },
            ValidateSubMatrixRange: function (TU, target, sourceRowIndex, targetRowIndex, rowCount, sourceColumnIndex, targetColumnIndex, columnCount) {
                if (rowCount < 1) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("rowCount", "Resources.ArgumentMustBePositive");
                }

                if (columnCount < 1) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("columnCount", "Resources.ArgumentMustBePositive");
                }


                if ((sourceRowIndex >>> 0) >= (this.RowCount >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("sourceRowIndex");
                }

                if ((sourceColumnIndex >>> 0) >= (this.ColumnCount >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("sourceColumnIndex");
                }

                var sourceRowMax = (sourceRowIndex + rowCount) | 0;
                var sourceColumnMax = (sourceColumnIndex + columnCount) | 0;

                if (sourceRowMax > this.RowCount) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("rowCount");
                }

                if (sourceColumnMax > this.ColumnCount) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("columnCount");
                }


                if ((targetRowIndex >>> 0) >= (target.RowCount >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("targetRowIndex");
                }

                if ((targetColumnIndex >>> 0) >= (target.ColumnCount >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("targetColumnIndex");
                }

                var targetRowMax = (targetRowIndex + rowCount) | 0;
                var targetColumnMax = (targetColumnIndex + columnCount) | 0;

                if (targetRowMax > target.RowCount) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("rowCount");
                }

                if (targetColumnMax > target.ColumnCount) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("columnCount");
                }
            },
            ValidateRowRange: function (TU, target, rowIndex) {
                if ((rowIndex >>> 0) >= (this.RowCount >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("rowIndex");
                }

                if (this.ColumnCount !== target.Length) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentMatrixSameRowDimension", "target");
                }
            },
            ValidateColumnRange: function (TU, target, columnIndex) {
                if ((columnIndex >>> 0) >= (this.ColumnCount >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("columnIndex");
                }

                if (this.RowCount !== target.Length) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentMatrixSameColumnDimension", "target");
                }
            },
            ValidateSubRowRange: function (TU, target, rowIndex, sourceColumnIndex, targetColumnIndex, columnCount) {
                if (columnCount < 1) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("columnCount", "Resources.ArgumentMustBePositive");
                }


                if ((rowIndex >>> 0) >= (this.RowCount >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("rowIndex");
                }

                if ((sourceColumnIndex >>> 0) >= (this.ColumnCount >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("sourceColumnIndex");
                }

                if (((sourceColumnIndex + columnCount) | 0) > this.ColumnCount) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("columnCount");
                }


                if ((targetColumnIndex >>> 0) >= (target.Length >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("targetColumnIndex");
                }

                if (((targetColumnIndex + columnCount) | 0) > target.Length) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("columnCount");
                }
            },
            ValidateSubColumnRange: function (TU, target, columnIndex, sourceRowIndex, targetRowIndex, rowCount) {
                if (rowCount < 1) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("rowCount", "Resources.ArgumentMustBePositive");
                }


                if ((columnIndex >>> 0) >= (this.ColumnCount >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("columnIndex");
                }

                if ((sourceRowIndex >>> 0) >= (this.RowCount >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("sourceRowIndex");
                }

                if (((sourceRowIndex + rowCount) | 0) > this.RowCount) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("rowCount");
                }


                if ((targetRowIndex >>> 0) >= (target.Length >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("targetRowIndex");
                }

                if (((targetRowIndex + rowCount) | 0) > target.Length) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("rowCount");
                }
            }
        }
    }; });

    Bridge.define("MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1", function (T) { return {
        inherits: function () { return [System.IEquatable$1(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T))]; },
        statics: {
            fields: {
                Zero: null
            },
            ctors: {
                init: function () {
                    this.Zero = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Vector.Zero;
                }
            }
        },
        fields: {
            Length: 0
        },
        alias: ["equalsT", "System$IEquatable$1$MathNet$Numerics$LinearAlgebra$Storage$VectorStorage$1$" + Bridge.getTypeAlias(T) + "$equalsT"],
        ctors: {
            ctor: function (length) {
                this.$initialize();
                if (length <= 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("length", "Resources.ArgumentMustBePositive");
                }

                this.Length = length;
            }
        },
        methods: {
            /**
             * Gets or sets the value at the given index, with range checking.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1
             * @param   {number}    index    The index of the element.
             * @return  {T}
             */
            getItem: function (index) {
                this.ValidateRange(index);
                return this.At(index);
            },
            /**
             * Gets or sets the value at the given index, with range checking.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1
             * @param   {number}    index    The index of the element.
             * @param   {T}         value    The value to get or set.
             * @return  {void}
             */
            setItem: function (index, value) {
                this.ValidateRange(index);
                this.At$1(index, value);
            },
            /**
             * Indicates whether the current object is equal to another object of the same type.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1
             * @param   {MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1}    other    An object to compare with this object.
             * @return  {boolean}                                                            <pre><code>true</code></pre> if the current object is equal to the <b /> parameter; otherwise, <pre><code>false</code></pre>.
             */
            equalsT: function (other) {
                if (other == null) {
                    return false;
                }
                if (this.Length !== other.Length) {
                    return false;
                }

                if (Bridge.referenceEquals(this, other)) {
                    return true;
                }

                for (var index = 0; index < this.Length; index = (index + 1) | 0) {
                    if (!Bridge.equalsT(this.At(index), other.At(index), T)) {
                        return false;
                    }
                }

                return true;
            },
            /**
             * Determines whether the specified {@link } is equal to the current {@link }.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1
             * @param   {System.Object}    obj    The {@link } to compare with the current {@link }.
             * @return  {boolean}                 true if the specified {@link } is equal to the current {@link }; otherwise, false.
             */
            equals: function (obj) {
                return this.equalsT(Bridge.as(obj, MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T)));
            },
            /**
             * Serves as a hash function for a particular type.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1
             * @return  {number}        A hash code for the current {@link }.
             */
            getHashCode: function () {
                var hashNum = Math.min(this.Length, 25);
                var hash = 17;
                for (var i = 0; i < hashNum; i = (i + 1) | 0) {
                    hash = (Bridge.Int.mul(hash, 31) + Bridge.getHashCode(this.At(i))) | 0;
                }
                return hash;
            },
            Clear: function () {
                for (var i = 0; i < this.Length; i = (i + 1) | 0) {
                    this.At$1(i, MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero);
                }
            },
            Clear$1: function (index, count) {
                for (var i = index; i < ((index + count) | 0); i = (i + 1) | 0) {
                    this.At$1(i, MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero);
                }
            },
            CopyTo: function (target, existingData) {
                if (existingData === void 0) { existingData = 0; }
                if (target == null) {
                    throw new System.ArgumentNullException.$ctor1("target");
                }

                if (Bridge.referenceEquals(this, target)) {
                    return;
                }

                if (this.Length !== target.Length) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "target");
                }

                this.CopyToUnchecked(target, existingData);
            },
            CopyToUnchecked: function (target, existingData) {
                for (var i = 0; i < this.Length; i = (i + 1) | 0) {
                    target.At$1(i, this.At(i));
                }
            },
            CopyToRow: function (target, rowIndex, existingData) {
                if (existingData === void 0) { existingData = 0; }
                if (target == null) {
                    throw new System.ArgumentNullException.$ctor1("target");
                }

                if (this.Length !== target.ColumnCount) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "target");
                }

                this.ValidateRowRange(target, rowIndex);
                this.CopyToRowUnchecked(target, rowIndex, existingData);
            },
            CopyToRowUnchecked: function (target, rowIndex, existingData) {
                for (var j = 0; j < this.Length; j = (j + 1) | 0) {
                    target.At$1(rowIndex, j, this.At(j));
                }
            },
            CopyToColumn: function (target, columnIndex, existingData) {
                if (existingData === void 0) { existingData = 0; }
                if (target == null) {
                    throw new System.ArgumentNullException.$ctor1("target");
                }

                if (this.Length !== target.RowCount) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "target");
                }

                this.ValidateColumnRange(target, columnIndex);
                this.CopyToColumnUnchecked(target, columnIndex, existingData);
            },
            CopyToColumnUnchecked: function (target, columnIndex, existingData) {
                for (var i = 0; i < this.Length; i = (i + 1) | 0) {
                    target.At$1(i, columnIndex, this.At(i));
                }
            },
            CopySubVectorTo: function (target, sourceIndex, targetIndex, count, existingData) {
                if (existingData === void 0) { existingData = 0; }
                if (target == null) {
                    throw new System.ArgumentNullException.$ctor1("target");
                }

                if (count === 0) {
                    return;
                }

                this.ValidateSubVectorRange(target, sourceIndex, targetIndex, count);
                this.CopySubVectorToUnchecked(target, sourceIndex, targetIndex, count, existingData);
            },
            CopySubVectorToUnchecked: function (target, sourceIndex, targetIndex, count, existingData) {
                if (Bridge.referenceEquals(this, target)) {
                    var tmp = System.Array.init(count, function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                    for (var i = 0; i < tmp.length; i = (i + 1) | 0) {
                        tmp[System.Array.index(i, tmp)] = this.At(((i + sourceIndex) | 0));
                    }
                    for (var i1 = 0; i1 < tmp.length; i1 = (i1 + 1) | 0) {
                        this.At$1(((i1 + targetIndex) | 0), tmp[System.Array.index(i1, tmp)]);
                    }

                    return;
                }

                for (var i2 = sourceIndex, ii = targetIndex; i2 < ((sourceIndex + count) | 0); i2 = (i2 + 1) | 0, ii = (ii + 1) | 0) {
                    target.At$1(ii, this.At(i2));
                }
            },
            CopyToSubRow: function (target, rowIndex, sourceColumnIndex, targetColumnIndex, columnCount, existingData) {
                if (existingData === void 0) { existingData = 0; }
                if (target == null) {
                    throw new System.ArgumentNullException.$ctor1("target");
                }

                if (columnCount === 0) {
                    return;
                }

                this.ValidateSubRowRange(target, rowIndex, sourceColumnIndex, targetColumnIndex, columnCount);
                this.CopyToSubRowUnchecked(target, rowIndex, sourceColumnIndex, targetColumnIndex, columnCount, existingData);
            },
            CopyToSubRowUnchecked: function (target, rowIndex, sourceColumnIndex, targetColumnIndex, columnCount, existingData) {
                for (var j = sourceColumnIndex, jj = targetColumnIndex; j < ((sourceColumnIndex + columnCount) | 0); j = (j + 1) | 0, jj = (jj + 1) | 0) {
                    target.At$1(rowIndex, jj, this.At(j));
                }
            },
            CopyToSubColumn: function (target, columnIndex, sourceRowIndex, targetRowIndex, rowCount, existingData) {
                if (existingData === void 0) { existingData = 0; }
                if (target == null) {
                    throw new System.ArgumentNullException.$ctor1("target");
                }

                if (rowCount === 0) {
                    return;
                }

                this.ValidateSubColumnRange(target, columnIndex, sourceRowIndex, targetRowIndex, rowCount);
                this.CopyToSubColumnUnchecked(target, columnIndex, sourceRowIndex, targetRowIndex, rowCount, existingData);
            },
            CopyToSubColumnUnchecked: function (target, columnIndex, sourceRowIndex, targetRowIndex, rowCount, existingData) {
                for (var i = sourceRowIndex, ii = targetRowIndex; i < ((sourceRowIndex + rowCount) | 0); i = (i + 1) | 0, ii = (ii + 1) | 0) {
                    target.At$1(ii, columnIndex, this.At(i));
                }
            },
            ToArray: function () {
                var ret = System.Array.init(this.Length, function (){
                    return Bridge.getDefaultValue(T);
                }, T);
                for (var i = 0; i < ret.length; i = (i + 1) | 0) {
                    ret[System.Array.index(i, ret)] = this.At(i);
                }
                return ret;
            },
            AsArray: function () {
                return null;
            },
            Enumerate: function () {
                return new (Bridge.GeneratorEnumerable$1(T))(Bridge.fn.bind(this, function ()  {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        i,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(T))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        i = 0;
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ( i < this.Length ) {
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 5;
                                        continue;
                                    }
                                    case 2: {
                                        $enumerator.current = this.At(i);
                                            $step = 3;
                                            return true;
                                    }
                                    case 3: {
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        i = (i + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 5: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }));
            },
            EnumerateIndexed: function () {
                return new (Bridge.GeneratorEnumerable$1(System.Tuple$2(System.Int32,T)))(Bridge.fn.bind(this, function ()  {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        i,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Tuple$2(System.Int32,T)))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        i = 0;
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ( i < this.Length ) {
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 5;
                                        continue;
                                    }
                                    case 2: {
                                        $enumerator.current = { Item1: i, Item2: this.At(i) };
                                            $step = 3;
                                            return true;
                                    }
                                    case 3: {
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        i = (i + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 5: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }));
            },
            EnumerateNonZero: function () {
                return new (Bridge.GeneratorEnumerable$1(T))(Bridge.fn.bind(this, function ()  {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        i,
                        x,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(T))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        i = 0;
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ( i < this.Length ) {
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 7;
                                        continue;
                                    }
                                    case 2: {
                                        x = this.At(i);
                                            if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, x, T)) {
                                                $step = 3;
                                                continue;
                                            } 
                                            $step = 5;
                                            continue;
                                    }
                                    case 3: {
                                        $enumerator.current = x;
                                            $step = 4;
                                            return true;
                                    }
                                    case 4: {
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        i = (i + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 7: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }));
            },
            EnumerateNonZeroIndexed: function () {
                return new (Bridge.GeneratorEnumerable$1(System.Tuple$2(System.Int32,T)))(Bridge.fn.bind(this, function ()  {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        i,
                        x,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Tuple$2(System.Int32,T)))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        i = 0;
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ( i < this.Length ) {
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 7;
                                        continue;
                                    }
                                    case 2: {
                                        x = this.At(i);
                                            if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, x, T)) {
                                                $step = 3;
                                                continue;
                                            } 
                                            $step = 5;
                                            continue;
                                    }
                                    case 3: {
                                        $enumerator.current = { Item1: i, Item2: x };
                                            $step = 4;
                                            return true;
                                    }
                                    case 4: {
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        i = (i + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 7: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }));
            },
            Find: function (predicate, zeros) {
                for (var i = 0; i < this.Length; i = (i + 1) | 0) {
                    var item = this.At(i);
                    if (predicate(item)) {
                        return { Item1: i, Item2: item };
                    }
                }
                return null;
            },
            Find2: function (TOther, other, predicate, zeros) {
                if (other == null) {
                    throw new System.ArgumentNullException.$ctor1("other");
                }

                if (this.Length !== other.Length) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "other");
                }

                return this.Find2Unchecked(TOther, other, predicate, zeros);
            },
            Find2Unchecked: function (TOther, other, predicate, zeros) {
                for (var i = 0; i < this.Length; i = (i + 1) | 0) {
                    var item = this.At(i);
                    var otherItem = other.At(i);
                    if (predicate(item, otherItem)) {
                        return { Item1: i, Item2: item, Item3: otherItem };
                    }
                }
                return null;
            },
            MapInplace: function (f, zeros) {
                for (var i = 0; i < this.Length; i = (i + 1) | 0) {
                    this.At$1(i, f(this.At(i)));
                }
            },
            MapIndexedInplace: function (f, zeros) {
                for (var i = 0; i < this.Length; i = (i + 1) | 0) {
                    this.At$1(i, f(i, this.At(i)));
                }
            },
            MapTo: function (TU, target, f, zeros, existingData) {
                if (target == null) {
                    throw new System.ArgumentNullException.$ctor1("target");
                }

                if (this.Length !== target.Length) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "target");
                }

                this.MapToUnchecked(TU, target, f, zeros, existingData);
            },
            MapToUnchecked: function (TU, target, f, zeros, existingData) {
                for (var i = 0; i < this.Length; i = (i + 1) | 0) {
                    target.At$1(i, f(this.At(i)));
                }
            },
            MapIndexedTo: function (TU, target, f, zeros, existingData) {
                if (target == null) {
                    throw new System.ArgumentNullException.$ctor1("target");
                }

                if (this.Length !== target.Length) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "target");
                }

                this.MapIndexedToUnchecked(TU, target, f, zeros, existingData);
            },
            MapIndexedToUnchecked: function (TU, target, f, zeros, existingData) {
                for (var i = 0; i < this.Length; i = (i + 1) | 0) {
                    target.At$1(i, f(i, this.At(i)));
                }
            },
            Map2To: function (target, other, f, zeros, existingData) {
                if (target == null) {
                    throw new System.ArgumentNullException.$ctor1("target");
                }

                if (other == null) {
                    throw new System.ArgumentNullException.$ctor1("other");
                }

                if (this.Length !== target.Length) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "target");
                }

                if (this.Length !== other.Length) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "other");
                }

                this.Map2ToUnchecked(target, other, f, zeros, existingData);
            },
            Map2ToUnchecked: function (target, other, f, zeros, existingData) {
                for (var i = 0; i < this.Length; i = (i + 1) | 0) {
                    target.At$1(i, f(this.At(i), other.At(i)));
                }
            },
            Fold2: function (TOther, TState, other, f, state, zeros) {
                if (other == null) {
                    throw new System.ArgumentNullException.$ctor1("other");
                }

                if (this.Length !== other.Length) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "other");
                }

                return this.Fold2Unchecked(TOther, TState, other, f, state, zeros);
            },
            Fold2Unchecked: function (TOther, TState, other, f, state, zeros) {
                for (var i = 0; i < this.Length; i = (i + 1) | 0) {
                    state = f(state, this.At(i), other.At(i));
                }

                return state;
            },
            ValidateRange: function (index) {
                if ((index >>> 0) >= (this.Length >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("index");
                }
            },
            ValidateSubVectorRange: function (target, sourceIndex, targetIndex, count) {
                if (count < 1) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("count", "Resources.ArgumentMustBePositive");
                }


                if ((sourceIndex >>> 0) >= (this.Length >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("sourceIndex");
                }

                var sourceMax = (sourceIndex + count) | 0;

                if (sourceMax > this.Length) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("count");
                }


                if ((targetIndex >>> 0) >= (target.Length >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("targetIndex");
                }

                var targetMax = (targetIndex + count) | 0;

                if (targetMax > target.Length) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("count");
                }
            },
            ValidateRowRange: function (target, rowIndex) {
                if ((rowIndex >>> 0) >= (target.RowCount >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("rowIndex");
                }

                if (target.ColumnCount !== this.Length) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentMatrixSameRowDimension", "target");
                }
            },
            ValidateColumnRange: function (target, columnIndex) {
                if ((columnIndex >>> 0) >= (target.ColumnCount >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("columnIndex");
                }

                if (target.RowCount !== this.Length) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentMatrixSameColumnDimension", "target");
                }
            },
            ValidateSubRowRange: function (target, rowIndex, sourceColumnIndex, targetColumnIndex, columnCount) {
                if (columnCount < 1) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("columnCount", "Resources.ArgumentMustBePositive");
                }


                if ((sourceColumnIndex >>> 0) >= (this.Length >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("sourceColumnIndex");
                }

                if (((sourceColumnIndex + columnCount) | 0) > this.Length) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("columnCount");
                }


                if ((rowIndex >>> 0) >= (target.RowCount >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("rowIndex");
                }

                if ((targetColumnIndex >>> 0) >= (target.ColumnCount >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("targetColumnIndex");
                }

                if (((targetColumnIndex + columnCount) | 0) > target.ColumnCount) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("columnCount");
                }
            },
            ValidateSubColumnRange: function (target, columnIndex, sourceRowIndex, targetRowIndex, rowCount) {
                if (rowCount < 1) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("rowCount", "Resources.ArgumentMustBePositive");
                }


                if ((sourceRowIndex >>> 0) >= (this.Length >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("sourceRowIndex");
                }

                if (((sourceRowIndex + rowCount) | 0) > this.Length) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("rowCount");
                }


                if ((columnIndex >>> 0) >= (target.ColumnCount >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("columnIndex");
                }

                if ((targetRowIndex >>> 0) >= (target.RowCount >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("targetRowIndex");
                }

                if (((targetRowIndex + rowCount) | 0) > target.RowCount) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("rowCount");
                }
            }
        }
    }; });

    Bridge.define("MathNet.Numerics.LinearAlgebra.Symmetricity", {
        $kind: "enum",
        statics: {
            fields: {
                /**
                 * It is not known yet whether a matrix is symmetric or not.
                 *
                 * @static
                 * @public
                 * @memberof MathNet.Numerics.LinearAlgebra.Symmetricity
                 * @constant
                 * @default 0
                 * @type MathNet.Numerics.LinearAlgebra.Symmetricity
                 */
                Unknown: 0,
                /**
                 * A matrix is symmetric
                 *
                 * @static
                 * @public
                 * @memberof MathNet.Numerics.LinearAlgebra.Symmetricity
                 * @constant
                 * @default 1
                 * @type MathNet.Numerics.LinearAlgebra.Symmetricity
                 */
                Symmetric: 1,
                /**
                 * A matrix is Hermitian (conjugate symmetric).
                 *
                 * @static
                 * @public
                 * @memberof MathNet.Numerics.LinearAlgebra.Symmetricity
                 * @constant
                 * @default 2
                 * @type MathNet.Numerics.LinearAlgebra.Symmetricity
                 */
                Hermitian: 2,
                /**
                 * A matrix is not symmetric
                 *
                 * @static
                 * @public
                 * @memberof MathNet.Numerics.LinearAlgebra.Symmetricity
                 * @constant
                 * @default 3
                 * @type MathNet.Numerics.LinearAlgebra.Symmetricity
                 */
                Asymmetric: 3
            }
        }
    });

    Bridge.define("MathNet.Numerics.LinearAlgebra.VectorExtensions", {
        statics: {
            methods: {
                /**
                 * Converts a vector to single precision.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.VectorExtensions
                 * @memberof MathNet.Numerics.LinearAlgebra.VectorExtensions
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    vector
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                ToSingle: function (vector) {
                    return vector.Map(System.Single, function (x) {
                        return x;
                    }, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                },
                /**
                 * Converts a vector to double precision.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.VectorExtensions
                 * @memberof MathNet.Numerics.LinearAlgebra.VectorExtensions
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    vector
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                ToDouble: function (vector) {
                    return vector.Map(System.Double, function (x) {
                        return x;
                    }, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                },
                /**
                 * Converts a vector to single precision complex numbers.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.VectorExtensions
                 * @memberof MathNet.Numerics.LinearAlgebra.VectorExtensions
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    vector
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                ToComplex32: function (vector) {
                    return vector.Map(mathnetnumericsbridge.Complex32, function (x) {
                        return new mathnetnumericsbridge.Complex32.$ctor1(x.Real, x.Imaginary);
                    }, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                },
                /**
                 * Gets a single precision complex vector with the real parts from the given vector.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.VectorExtensions
                 * @memberof MathNet.Numerics.LinearAlgebra.VectorExtensions
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    vector
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                ToComplex32$1: function (vector) {
                    return vector.Map(mathnetnumericsbridge.Complex32, function (x) {
                        return new mathnetnumericsbridge.Complex32.$ctor1(x, 0.0);
                    }, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                },
                /**
                 * Converts a vector to double precision complex numbers.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.VectorExtensions
                 * @memberof MathNet.Numerics.LinearAlgebra.VectorExtensions
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    vector
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                ToComplex: function (vector) {
                    return vector.Map(mathnetnumericsbridge.Complex, function (x) {
                        return new mathnetnumericsbridge.Complex.$ctor1(x.Real, x.Imaginary);
                    }, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                },
                /**
                 * Gets a double precision complex vector with the real parts from the given vector.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.VectorExtensions
                 * @memberof MathNet.Numerics.LinearAlgebra.VectorExtensions
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    vector
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                ToComplex$1: function (vector) {
                    return vector.Map(mathnetnumericsbridge.Complex, function (x) {
                        return new mathnetnumericsbridge.Complex.$ctor1(x, 0.0);
                    }, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                },
                /**
                 * Gets a real vector representing the real parts of a complex vector.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.VectorExtensions
                 * @memberof MathNet.Numerics.LinearAlgebra.VectorExtensions
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    vector
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                Real: function (vector) {
                    return vector.Map(System.Double, function (x) {
                        return x.Real;
                    }, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                },
                /**
                 * Gets a real vector representing the real parts of a complex vector.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.VectorExtensions
                 * @memberof MathNet.Numerics.LinearAlgebra.VectorExtensions
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    vector
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                Real$1: function (vector) {
                    return vector.Map(System.Single, function (x) {
                        return x.Real;
                    }, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                },
                /**
                 * Gets a real vector representing the imaginary parts of a complex vector.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.VectorExtensions
                 * @memberof MathNet.Numerics.LinearAlgebra.VectorExtensions
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    vector
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                Imaginary: function (vector) {
                    return vector.Map(System.Double, function (x) {
                        return x.Imaginary;
                    }, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                },
                /**
                 * Gets a real vector representing the imaginary parts of a complex vector.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.VectorExtensions
                 * @memberof MathNet.Numerics.LinearAlgebra.VectorExtensions
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    vector
                 * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
                 */
                Imaginary$1: function (vector) {
                    return vector.Map(System.Single, function (x) {
                        return x.Imaginary;
                    }, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                }
            }
        }
    });

    Bridge.define("MathNet.Numerics.LinearAlgebra.Zeros", {
        $kind: "enum",
        statics: {
            fields: {
                /**
                 * Allow skipping zero entries (without enforcing skipping them).
                 When enumerating sparse matrices this can significantly speed up operations.
                 *
                 * @static
                 * @public
                 * @memberof MathNet.Numerics.LinearAlgebra.Zeros
                 * @constant
                 * @default 0
                 * @type MathNet.Numerics.LinearAlgebra.Zeros
                 */
                AllowSkip: 0,
                /**
                 * Force applying the operation to all fields even if they are zero.
                 *
                 * @static
                 * @public
                 * @memberof MathNet.Numerics.LinearAlgebra.Zeros
                 * @constant
                 * @default 1
                 * @type MathNet.Numerics.LinearAlgebra.Zeros
                 */
                Include: 1
            }
        }
    });

    /**
     * Class to represent a permutation for a subset of the natural numbers.
     *
     * @public
     * @class MathNet.Numerics.Permutation
     */
    Bridge.define("MathNet.Numerics.Permutation", {
        statics: {
            methods: {
                /**
                 * Construct an array from a sequence of inversions.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Permutation
                 * @memberof MathNet.Numerics.Permutation
                 * @example From wikipedia: the permutation 12043 has the inversions (0,2), (1,2) and (3,4). This would be
                 encoded using the array [22244].
                 *
                 *
                 * @param   {Array.<number>}                  inv    The set of inversions to construct the permutation from.
                 * @return  {MathNet.Numerics.Permutation}           A permutation generated from a sequence of inversions.
                 */
                FromInversions: function (inv) {
                    var idx = System.Array.init(inv.length, 0, System.Int32);
                    for (var i = 0; i < inv.length; i = (i + 1) | 0) {
                        idx[System.Array.index(i, idx)] = i;
                    }

                    for (var i1 = (inv.length - 1) | 0; i1 >= 0; i1 = (i1 - 1) | 0) {
                        if (idx[System.Array.index(i1, idx)] !== inv[System.Array.index(i1, inv)]) {
                            var t = idx[System.Array.index(i1, idx)];
                            idx[System.Array.index(i1, idx)] = idx[System.Array.index(inv[System.Array.index(i1, inv)], idx)];
                            idx[System.Array.index(inv[System.Array.index(i1, inv)], idx)] = t;
                        }
                    }

                    return new MathNet.Numerics.Permutation(idx);
                },
                /**
                 * Checks whether the <b /> array represents a proper permutation.
                 *
                 * @static
                 * @private
                 * @this MathNet.Numerics.Permutation
                 * @memberof MathNet.Numerics.Permutation
                 * @param   {Array.<number>}    indices    An array which represents where each integer is permuted too: indices[i] represents that integer i
                 is permuted to location indices[i].
                 * @return  {boolean}                      True if <b /> represents a proper permutation, <pre><code>false</code></pre> otherwise.
                 */
                CheckForProperPermutation: function (indices) {
                    var idxCheck = System.Array.init(indices.length, false, System.Boolean);

                    for (var i = 0; i < indices.length; i = (i + 1) | 0) {
                        if (indices[System.Array.index(i, indices)] >= indices.length || indices[System.Array.index(i, indices)] < 0) {
                            return false;
                        }

                        idxCheck[System.Array.index(indices[System.Array.index(i, indices)], idxCheck)] = true;
                    }

                    for (var i1 = 0; i1 < indices.length; i1 = (i1 + 1) | 0) {
                        if (idxCheck[System.Array.index(i1, idxCheck)] === false) {
                            return false;
                        }
                    }

                    return true;
                }
            }
        },
        fields: {
            /**
             * Entry _indices[i] represents the location to which i is permuted to.
             *
             * @instance
             * @private
             * @readonly
             * @memberof MathNet.Numerics.Permutation
             * @type Array.<number>
             */
            _indices: null
        },
        props: {
            /**
             * Gets the number of elements this permutation is over.
             *
             * @instance
             * @public
             * @readonly
             * @memberof MathNet.Numerics.Permutation
             * @function Dimension
             * @type number
             */
            Dimension: {
                get: function () {
                    return this._indices.length;
                }
            }
        },
        ctors: {
            /**
             * Initializes a new instance of the Permutation class.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.Permutation
             * @memberof MathNet.Numerics.Permutation
             * @param   {Array.<number>}    indices    An array which represents where each integer is permuted too: indices[i] represents that integer i
             is permuted to location indices[i].
             * @return  {void}
             */
            ctor: function (indices) {
                this.$initialize();
                if (!MathNet.Numerics.Permutation.CheckForProperPermutation(indices)) {
                    throw new System.ArgumentException.$ctor3("Resources.PermutationAsIntArrayInvalid", "indices");
                }

                this._indices = Bridge.cast(System.Array.clone(indices), System.Array.type(System.Int32));
            }
        },
        methods: {
            /**
             * Computes where <b /> permutes too.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.Permutation
             * @memberof MathNet.Numerics.Permutation
             * @param   {number}    idx    The index to permute from.
             * @return  {number}           The index which is permuted to.
             */
            getItem: function (idx) {
                return this._indices[System.Array.index(idx, this._indices)];
            },
            /**
             * Computes the inverse of the permutation.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.Permutation
             * @memberof MathNet.Numerics.Permutation
             * @return  {MathNet.Numerics.Permutation}        The inverse of the permutation.
             */
            Inverse: function () {
                var invIdx = System.Array.init(this.Dimension, 0, System.Int32);
                for (var i = 0; i < invIdx.length; i = (i + 1) | 0) {
                    invIdx[System.Array.index(this._indices[System.Array.index(i, this._indices)], invIdx)] = i;
                }

                return new MathNet.Numerics.Permutation(invIdx);
            },
            /**
             * Construct a sequence of inversions from the permutation.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.Permutation
             * @memberof MathNet.Numerics.Permutation
             * @example From wikipedia: the permutation 12043 has the inversions (0,2), (1,2) and (3,4). This would be
             encoded using the array [22244].
             *
             *
             * @return  {Array.<number>}        A sequence of inversions.
             */
            ToInversions: function () {
                var idx = Bridge.cast(System.Array.clone(this._indices), System.Array.type(System.Int32));

                for (var i = 0; i < idx.length; i = (i + 1) | 0) {
                    if (idx[System.Array.index(i, idx)] !== i) {
                        var q = System.Array.findIndex(idx, ((i + 1) | 0), function (x) {
                                return x === i;
                            });
                        var t = idx[System.Array.index(i, idx)];
                        idx[System.Array.index(i, idx)] = q;
                        idx[System.Array.index(q, idx)] = t;
                    }
                }

                return idx;
            }
        }
    });

    /**
     * Sorting algorithms for single, tuple and triple lists.
     *
     * @static
     * @abstract
     * @public
     * @class MathNet.Numerics.Sorting
     */
    Bridge.define("MathNet.Numerics.Sorting", {
        statics: {
            methods: {
                /**
                 * Sort a list of keys, in place using the quick sort algorithm using the quick sort algorithm.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Sorting
                 * @memberof MathNet.Numerics.Sorting
                 * @param   {Function}                                  T           The type of elements in the key list.
                 * @param   {System.Collections.Generic.IList$1}        keys        List to sort.
                 * @param   {System.Collections.Generic.IComparer$1}    comparer    Comparison, defining the sort order.
                 * @return  {void}
                 */
                Sort: function (T, keys, comparer) {
                    if (comparer === void 0) { comparer = null; }
                    var count = System.Array.getCount(keys, T);
                    if (count <= 1) {
                        return;
                    }

                    if (null == comparer) {
                        comparer = new (System.Collections.Generic.Comparer$1(T))(System.Collections.Generic.Comparer$1.$default.fn);
                    }

                    if (count === 2) {
                        if (comparer[Bridge.geti(comparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T) + "$compare", "System$Collections$Generic$IComparer$1$compare")](System.Array.getItem(keys, 0, T), System.Array.getItem(keys, 1, T)) > 0) {
                            MathNet.Numerics.Sorting.Swap(T, keys, 0, 1);
                        }
                        return;
                    }

                    if (count <= 10) {
                        for (var i = 1; i < count; i = (i + 1) | 0) {
                            var key = System.Array.getItem(keys, i, T);
                            var j = (i - 1) | 0;
                            while (j >= 0 && comparer[Bridge.geti(comparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T) + "$compare", "System$Collections$Generic$IComparer$1$compare")](System.Array.getItem(keys, j, T), key) > 0) {
                                System.Array.setItem(keys, ((j + 1) | 0), System.Array.getItem(keys, j, T), T);
                                j = (j - 1) | 0;
                            }
                            System.Array.setItem(keys, ((j + 1) | 0), key, T);
                        }
                        return;
                    }

                    var keysArray = Bridge.as(keys, System.Array.type(T));
                    if (null != keysArray) {
                        System.Array.sort(keysArray, comparer);
                        return;
                    }

                    var keysList = Bridge.as(keys, System.Collections.Generic.List$1(T));
                    if (null != keysList) {
                        keysList.Sort$1(comparer);
                        return;
                    }

                    MathNet.Numerics.Sorting.QuickSort(T, keys, comparer, 0, ((count - 1) | 0));
                },
                /**
                 * Sort a list of keys and items with respect to the keys, in place using the quick sort algorithm.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Sorting
                 * @memberof MathNet.Numerics.Sorting
                 * @param   {Function}                                  TKey        The type of elements in the key list.
                 * @param   {Function}                                  TItem       The type of elements in the item list.
                 * @param   {System.Collections.Generic.IList$1}        keys        List to sort.
                 * @param   {System.Collections.Generic.IList$1}        items       List to permute the same way as the key list.
                 * @param   {System.Collections.Generic.IComparer$1}    comparer    Comparison, defining the sort order.
                 * @return  {void}
                 */
                Sort$2: function (TKey, TItem, keys, items, comparer) {
                    if (comparer === void 0) { comparer = null; }
                    var count = System.Array.getCount(keys, TKey);
                    if (count <= 1) {
                        return;
                    }

                    if (null == comparer) {
                        comparer = new (System.Collections.Generic.Comparer$1(TKey))(System.Collections.Generic.Comparer$1.$default.fn);
                    }

                    if (count === 2) {
                        if (comparer[Bridge.geti(comparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(TKey) + "$compare", "System$Collections$Generic$IComparer$1$compare")](System.Array.getItem(keys, 0, TKey), System.Array.getItem(keys, 1, TKey)) > 0) {
                            MathNet.Numerics.Sorting.Swap(TKey, keys, 0, 1);
                            MathNet.Numerics.Sorting.Swap(TItem, items, 0, 1);
                        }
                        return;
                    }

                    if (count <= 10) {
                        for (var i = 1; i < count; i = (i + 1) | 0) {
                            var key = System.Array.getItem(keys, i, TKey);
                            var item = System.Array.getItem(items, i, TItem);
                            var j = (i - 1) | 0;
                            while (j >= 0 && comparer[Bridge.geti(comparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(TKey) + "$compare", "System$Collections$Generic$IComparer$1$compare")](System.Array.getItem(keys, j, TKey), key) > 0) {
                                System.Array.setItem(keys, ((j + 1) | 0), System.Array.getItem(keys, j, TKey), TKey);
                                System.Array.setItem(items, ((j + 1) | 0), System.Array.getItem(items, j, TItem), TItem);
                                j = (j - 1) | 0;
                            }
                            System.Array.setItem(keys, ((j + 1) | 0), key, TKey);
                            System.Array.setItem(items, ((j + 1) | 0), item, TItem);
                        }
                        return;
                    }

                    var keysArray = Bridge.as(keys, System.Array.type(TKey));
                    var itemsArray = Bridge.as(items, System.Array.type(TItem));
                    if ((null != keysArray) && (null != itemsArray)) {
                        System.Array.sortDict(keysArray, itemsArray, 0, null, comparer);
                        return;
                    }

                    MathNet.Numerics.Sorting.QuickSort$1(TKey, TItem, keys, items, comparer, 0, ((count - 1) | 0));
                },
                /**
                 * Sort a list of keys, items1 and items2 with respect to the keys, in place using the quick sort algorithm.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Sorting
                 * @memberof MathNet.Numerics.Sorting
                 * @param   {Function}                                  TKey        The type of elements in the key list.
                 * @param   {Function}                                  TItem1      The type of elements in the first item list.
                 * @param   {Function}                                  TItem2      The type of elements in the second item list.
                 * @param   {System.Collections.Generic.IList$1}        keys        List to sort.
                 * @param   {System.Collections.Generic.IList$1}        items1      First list to permute the same way as the key list.
                 * @param   {System.Collections.Generic.IList$1}        items2      Second list to permute the same way as the key list.
                 * @param   {System.Collections.Generic.IComparer$1}    comparer    Comparison, defining the sort order.
                 * @return  {void}
                 */
                Sort$4: function (TKey, TItem1, TItem2, keys, items1, items2, comparer) {
                    if (comparer === void 0) { comparer = null; }
                    var count = System.Array.getCount(keys, TKey);
                    if (count <= 1) {
                        return;
                    }

                    if (null == comparer) {
                        comparer = new (System.Collections.Generic.Comparer$1(TKey))(System.Collections.Generic.Comparer$1.$default.fn);
                    }

                    if (count === 2) {
                        if (comparer[Bridge.geti(comparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(TKey) + "$compare", "System$Collections$Generic$IComparer$1$compare")](System.Array.getItem(keys, 0, TKey), System.Array.getItem(keys, 1, TKey)) > 0) {
                            MathNet.Numerics.Sorting.Swap(TKey, keys, 0, 1);
                            MathNet.Numerics.Sorting.Swap(TItem1, items1, 0, 1);
                            MathNet.Numerics.Sorting.Swap(TItem2, items2, 0, 1);
                        }
                        return;
                    }

                    if (count <= 10) {
                        for (var i = 1; i < count; i = (i + 1) | 0) {
                            var key = System.Array.getItem(keys, i, TKey);
                            var item1 = System.Array.getItem(items1, i, TItem1);
                            var item2 = System.Array.getItem(items2, i, TItem2);
                            var j = (i - 1) | 0;
                            while (j >= 0 && comparer[Bridge.geti(comparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(TKey) + "$compare", "System$Collections$Generic$IComparer$1$compare")](System.Array.getItem(keys, j, TKey), key) > 0) {
                                System.Array.setItem(keys, ((j + 1) | 0), System.Array.getItem(keys, j, TKey), TKey);
                                System.Array.setItem(items1, ((j + 1) | 0), System.Array.getItem(items1, j, TItem1), TItem1);
                                System.Array.setItem(items2, ((j + 1) | 0), System.Array.getItem(items2, j, TItem2), TItem2);
                                j = (j - 1) | 0;
                            }
                            System.Array.setItem(keys, ((j + 1) | 0), key, TKey);
                            System.Array.setItem(items1, ((j + 1) | 0), item1, TItem1);
                            System.Array.setItem(items2, ((j + 1) | 0), item2, TItem2);
                        }
                        return;
                    }

                    MathNet.Numerics.Sorting.QuickSort$2(TKey, TItem1, TItem2, keys, items1, items2, comparer, 0, ((count - 1) | 0));
                },
                /**
                 * Sort a range of a list of keys, in place using the quick sort algorithm.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Sorting
                 * @memberof MathNet.Numerics.Sorting
                 * @param   {Function}                                  T           The type of element in the list.
                 * @param   {System.Collections.Generic.IList$1}        keys        List to sort.
                 * @param   {number}                                    index       The zero-based starting index of the range to sort.
                 * @param   {number}                                    count       The length of the range to sort.
                 * @param   {System.Collections.Generic.IComparer$1}    comparer    Comparison, defining the sort order.
                 * @return  {void}
                 */
                Sort$1: function (T, keys, index, count, comparer) {
                    if (comparer === void 0) { comparer = null; }
                    if (index < 0) {
                        throw new System.ArgumentOutOfRangeException.$ctor1("index");
                    }

                    if (count < 0 || ((index + count) | 0) > System.Array.getCount(keys, T)) {
                        throw new System.ArgumentOutOfRangeException.$ctor1("count");
                    }

                    if (count <= 1) {
                        return;
                    }

                    if (null == comparer) {
                        comparer = new (System.Collections.Generic.Comparer$1(T))(System.Collections.Generic.Comparer$1.$default.fn);
                    }

                    if (count === 2) {
                        if (comparer[Bridge.geti(comparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T) + "$compare", "System$Collections$Generic$IComparer$1$compare")](System.Array.getItem(keys, index, T), System.Array.getItem(keys, ((index + 1) | 0), T)) > 0) {
                            MathNet.Numerics.Sorting.Swap(T, keys, index, ((index + 1) | 0));
                        }
                        return;
                    }

                    if (count <= 10) {
                        var to = (index + count) | 0;
                        for (var i = (index + 1) | 0; i < to; i = (i + 1) | 0) {
                            var key = System.Array.getItem(keys, i, T);
                            var j = (i - 1) | 0;
                            while (j >= index && comparer[Bridge.geti(comparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T) + "$compare", "System$Collections$Generic$IComparer$1$compare")](System.Array.getItem(keys, j, T), key) > 0) {
                                System.Array.setItem(keys, ((j + 1) | 0), System.Array.getItem(keys, j, T), T);
                                j = (j - 1) | 0;
                            }
                            System.Array.setItem(keys, ((j + 1) | 0), key, T);
                        }
                        return;
                    }

                    var keysArray = Bridge.as(keys, System.Array.type(T));
                    if (null != keysArray) {
                        System.Array.sort(keysArray, index, count, comparer);
                        return;
                    }

                    var keysList = Bridge.as(keys, System.Collections.Generic.List$1(T));
                    if (null != keysList) {
                        keysList.Sort$3(index, count, comparer);
                        return;
                    }

                    MathNet.Numerics.Sorting.QuickSort(T, keys, comparer, index, ((count - 1) | 0));
                },
                /**
                 * Sort a list of keys and items with respect to the keys, in place using the quick sort algorithm.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Sorting
                 * @memberof MathNet.Numerics.Sorting
                 * @param   {Function}                                  TKey        The type of elements in the key list.
                 * @param   {Function}                                  TItem       The type of elements in the item list.
                 * @param   {System.Collections.Generic.IList$1}        keys        List to sort.
                 * @param   {System.Collections.Generic.IList$1}        items       List to permute the same way as the key list.
                 * @param   {number}                                    index       The zero-based starting index of the range to sort.
                 * @param   {number}                                    count       The length of the range to sort.
                 * @param   {System.Collections.Generic.IComparer$1}    comparer    Comparison, defining the sort order.
                 * @return  {void}
                 */
                Sort$3: function (TKey, TItem, keys, items, index, count, comparer) {
                    if (comparer === void 0) { comparer = null; }
                    if (index < 0) {
                        throw new System.ArgumentOutOfRangeException.$ctor1("index");
                    }

                    if (count < 0 || ((index + count) | 0) > System.Array.getCount(keys, TKey)) {
                        throw new System.ArgumentOutOfRangeException.$ctor1("count");
                    }

                    if (count <= 1) {
                        return;
                    }

                    if (null == comparer) {
                        comparer = new (System.Collections.Generic.Comparer$1(TKey))(System.Collections.Generic.Comparer$1.$default.fn);
                    }

                    if (count === 2) {
                        if (comparer[Bridge.geti(comparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(TKey) + "$compare", "System$Collections$Generic$IComparer$1$compare")](System.Array.getItem(keys, index, TKey), System.Array.getItem(keys, ((index + 1) | 0), TKey)) > 0) {
                            MathNet.Numerics.Sorting.Swap(TKey, keys, index, ((index + 1) | 0));
                            MathNet.Numerics.Sorting.Swap(TItem, items, index, ((index + 1) | 0));
                        }
                        return;
                    }

                    if (count <= 10) {
                        var to = (index + count) | 0;
                        for (var i = (index + 1) | 0; i < to; i = (i + 1) | 0) {
                            var key = System.Array.getItem(keys, i, TKey);
                            var item = System.Array.getItem(items, i, TItem);
                            var j = (i - 1) | 0;
                            while (j >= index && comparer[Bridge.geti(comparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(TKey) + "$compare", "System$Collections$Generic$IComparer$1$compare")](System.Array.getItem(keys, j, TKey), key) > 0) {
                                System.Array.setItem(keys, ((j + 1) | 0), System.Array.getItem(keys, j, TKey), TKey);
                                System.Array.setItem(items, ((j + 1) | 0), System.Array.getItem(items, j, TItem), TItem);
                                j = (j - 1) | 0;
                            }
                            System.Array.setItem(keys, ((j + 1) | 0), key, TKey);
                            System.Array.setItem(items, ((j + 1) | 0), item, TItem);
                        }
                        return;
                    }

                    var keysArray = Bridge.as(keys, System.Array.type(TKey));
                    var itemsArray = Bridge.as(items, System.Array.type(TItem));
                    if ((null != keysArray) && (null != itemsArray)) {
                        System.Array.sortDict(keysArray, itemsArray, index, count, comparer);
                        return;
                    }

                    MathNet.Numerics.Sorting.QuickSort$1(TKey, TItem, keys, items, comparer, index, ((count - 1) | 0));
                },
                /**
                 * Sort a list of keys, items1 and items2 with respect to the keys, in place using the quick sort algorithm.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Sorting
                 * @memberof MathNet.Numerics.Sorting
                 * @param   {Function}                                  TKey        The type of elements in the key list.
                 * @param   {Function}                                  TItem1      The type of elements in the first item list.
                 * @param   {Function}                                  TItem2      The type of elements in the second item list.
                 * @param   {System.Collections.Generic.IList$1}        keys        List to sort.
                 * @param   {System.Collections.Generic.IList$1}        items1      First list to permute the same way as the key list.
                 * @param   {System.Collections.Generic.IList$1}        items2      Second list to permute the same way as the key list.
                 * @param   {number}                                    index       The zero-based starting index of the range to sort.
                 * @param   {number}                                    count       The length of the range to sort.
                 * @param   {System.Collections.Generic.IComparer$1}    comparer    Comparison, defining the sort order.
                 * @return  {void}
                 */
                Sort$5: function (TKey, TItem1, TItem2, keys, items1, items2, index, count, comparer) {
                    if (comparer === void 0) { comparer = null; }
                    if (index < 0) {
                        throw new System.ArgumentOutOfRangeException.$ctor1("index");
                    }

                    if (count < 0 || ((index + count) | 0) > System.Array.getCount(keys, TKey)) {
                        throw new System.ArgumentOutOfRangeException.$ctor1("count");
                    }

                    if (count <= 1) {
                        return;
                    }

                    if (null == comparer) {
                        comparer = new (System.Collections.Generic.Comparer$1(TKey))(System.Collections.Generic.Comparer$1.$default.fn);
                    }

                    if (count === 2) {
                        if (comparer[Bridge.geti(comparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(TKey) + "$compare", "System$Collections$Generic$IComparer$1$compare")](System.Array.getItem(keys, index, TKey), System.Array.getItem(keys, ((index + 1) | 0), TKey)) > 0) {
                            MathNet.Numerics.Sorting.Swap(TKey, keys, index, ((index + 1) | 0));
                            MathNet.Numerics.Sorting.Swap(TItem1, items1, index, ((index + 1) | 0));
                            MathNet.Numerics.Sorting.Swap(TItem2, items2, index, ((index + 1) | 0));
                        }
                        return;
                    }

                    if (count <= 10) {
                        var to = (index + count) | 0;
                        for (var i = (index + 1) | 0; i < to; i = (i + 1) | 0) {
                            var key = System.Array.getItem(keys, i, TKey);
                            var item1 = System.Array.getItem(items1, i, TItem1);
                            var item2 = System.Array.getItem(items2, i, TItem2);
                            var j = (i - 1) | 0;
                            while (j >= index && comparer[Bridge.geti(comparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(TKey) + "$compare", "System$Collections$Generic$IComparer$1$compare")](System.Array.getItem(keys, j, TKey), key) > 0) {
                                System.Array.setItem(keys, ((j + 1) | 0), System.Array.getItem(keys, j, TKey), TKey);
                                System.Array.setItem(items1, ((j + 1) | 0), System.Array.getItem(items1, j, TItem1), TItem1);
                                System.Array.setItem(items2, ((j + 1) | 0), System.Array.getItem(items2, j, TItem2), TItem2);
                                j = (j - 1) | 0;
                            }
                            System.Array.setItem(keys, ((j + 1) | 0), key, TKey);
                            System.Array.setItem(items1, ((j + 1) | 0), item1, TItem1);
                            System.Array.setItem(items2, ((j + 1) | 0), item2, TItem2);
                        }
                        return;
                    }

                    MathNet.Numerics.Sorting.QuickSort$2(TKey, TItem1, TItem2, keys, items1, items2, comparer, index, ((count - 1) | 0));
                },
                /**
                 * Sort a list of keys and items with respect to the keys, in place using the quick sort algorithm.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.Sorting
                 * @memberof MathNet.Numerics.Sorting
                 * @param   {Function}                                  T1                   The type of elements in the primary list.
                 * @param   {Function}                                  T2                   The type of elements in the secondary list.
                 * @param   {System.Collections.Generic.IList$1}        primary              List to sort.
                 * @param   {System.Collections.Generic.IList$1}        secondary            List to sort on duplicate primary items, and permute the same way as the key list.
                 * @param   {System.Collections.Generic.IComparer$1}    primaryComparer      Comparison, defining the primary sort order.
                 * @param   {System.Collections.Generic.IComparer$1}    secondaryComparer    Comparison, defining the secondary sort order.
                 * @return  {void}
                 */
                SortAll: function (T1, T2, primary, secondary, primaryComparer, secondaryComparer) {
                    if (primaryComparer === void 0) { primaryComparer = null; }
                    if (secondaryComparer === void 0) { secondaryComparer = null; }
                    if (null == primaryComparer) {
                        primaryComparer = new (System.Collections.Generic.Comparer$1(T1))(System.Collections.Generic.Comparer$1.$default.fn);
                    }

                    if (null == secondaryComparer) {
                        secondaryComparer = new (System.Collections.Generic.Comparer$1(T2))(System.Collections.Generic.Comparer$1.$default.fn);
                    }

                    MathNet.Numerics.Sorting.QuickSortAll(T1, T2, primary, secondary, primaryComparer, secondaryComparer, 0, ((System.Array.getCount(primary, T1) - 1) | 0));
                },
                /**
                 * Recursive implementation for an in place quick sort on a list.
                 *
                 * @static
                 * @private
                 * @this MathNet.Numerics.Sorting
                 * @memberof MathNet.Numerics.Sorting
                 * @param   {Function}                                  T           The type of the list on which the quick sort is performed.
                 * @param   {System.Collections.Generic.IList$1}        keys        The list which is sorted using quick sort.
                 * @param   {System.Collections.Generic.IComparer$1}    comparer    The method with which to compare two elements of the quick sort.
                 * @param   {number}                                    left        The left boundary of the quick sort.
                 * @param   {number}                                    right       The right boundary of the quick sort.
                 * @return  {void}
                 */
                QuickSort: function (T, keys, comparer, left, right) {
                    do {
                        var a = left;
                        var b = right;
                        var p = (a + ((((b - a) | 0)) >> 1)) | 0;

                        if (comparer[Bridge.geti(comparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T) + "$compare", "System$Collections$Generic$IComparer$1$compare")](System.Array.getItem(keys, a, T), System.Array.getItem(keys, p, T)) > 0) {
                            MathNet.Numerics.Sorting.Swap(T, keys, a, p);
                        }

                        if (comparer[Bridge.geti(comparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T) + "$compare", "System$Collections$Generic$IComparer$1$compare")](System.Array.getItem(keys, a, T), System.Array.getItem(keys, b, T)) > 0) {
                            MathNet.Numerics.Sorting.Swap(T, keys, a, b);
                        }

                        if (comparer[Bridge.geti(comparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T) + "$compare", "System$Collections$Generic$IComparer$1$compare")](System.Array.getItem(keys, p, T), System.Array.getItem(keys, b, T)) > 0) {
                            MathNet.Numerics.Sorting.Swap(T, keys, p, b);
                        }

                        var pivot = System.Array.getItem(keys, p, T);

                        do {
                            while (comparer[Bridge.geti(comparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T) + "$compare", "System$Collections$Generic$IComparer$1$compare")](System.Array.getItem(keys, a, T), pivot) < 0) {
                                a = (a + 1) | 0;
                            }

                            while (comparer[Bridge.geti(comparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T) + "$compare", "System$Collections$Generic$IComparer$1$compare")](pivot, System.Array.getItem(keys, b, T)) < 0) {
                                b = (b - 1) | 0;
                            }

                            if (a > b) {
                                break;
                            }

                            if (a < b) {
                                MathNet.Numerics.Sorting.Swap(T, keys, a, b);
                            }

                            a = (a + 1) | 0;
                            b = (b - 1) | 0;
                        } while (a <= b);

                        if ((((b - left) | 0)) <= (((right - a) | 0))) {
                            if (left < b) {
                                MathNet.Numerics.Sorting.QuickSort(T, keys, comparer, left, b);
                            }

                            left = a;
                        } else {
                            if (a < right) {
                                MathNet.Numerics.Sorting.QuickSort(T, keys, comparer, a, right);
                            }

                            right = b;
                        }
                    } while (left < right);
                },
                /**
                 * Recursive implementation for an in place quick sort on a list while reordering one other list accordingly.
                 *
                 * @static
                 * @private
                 * @this MathNet.Numerics.Sorting
                 * @memberof MathNet.Numerics.Sorting
                 * @param   {Function}                                  T           The type of the list on which the quick sort is performed.
                 * @param   {Function}                                  TItems      The type of the list which is automatically reordered accordingly.
                 * @param   {System.Collections.Generic.IList$1}        keys        The list which is sorted using quick sort.
                 * @param   {System.Collections.Generic.IList$1}        items       The list which is automatically reordered accordingly.
                 * @param   {System.Collections.Generic.IComparer$1}    comparer    The method with which to compare two elements of the quick sort.
                 * @param   {number}                                    left        The left boundary of the quick sort.
                 * @param   {number}                                    right       The right boundary of the quick sort.
                 * @return  {void}
                 */
                QuickSort$1: function (T, TItems, keys, items, comparer, left, right) {
                    do {
                        var a = left;
                        var b = right;
                        var p = (a + ((((b - a) | 0)) >> 1)) | 0;

                        if (comparer[Bridge.geti(comparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T) + "$compare", "System$Collections$Generic$IComparer$1$compare")](System.Array.getItem(keys, a, T), System.Array.getItem(keys, p, T)) > 0) {
                            MathNet.Numerics.Sorting.Swap(T, keys, a, p);
                            MathNet.Numerics.Sorting.Swap(TItems, items, a, p);
                        }

                        if (comparer[Bridge.geti(comparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T) + "$compare", "System$Collections$Generic$IComparer$1$compare")](System.Array.getItem(keys, a, T), System.Array.getItem(keys, b, T)) > 0) {
                            MathNet.Numerics.Sorting.Swap(T, keys, a, b);
                            MathNet.Numerics.Sorting.Swap(TItems, items, a, b);
                        }

                        if (comparer[Bridge.geti(comparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T) + "$compare", "System$Collections$Generic$IComparer$1$compare")](System.Array.getItem(keys, p, T), System.Array.getItem(keys, b, T)) > 0) {
                            MathNet.Numerics.Sorting.Swap(T, keys, p, b);
                            MathNet.Numerics.Sorting.Swap(TItems, items, p, b);
                        }

                        var pivot = System.Array.getItem(keys, p, T);

                        do {
                            while (comparer[Bridge.geti(comparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T) + "$compare", "System$Collections$Generic$IComparer$1$compare")](System.Array.getItem(keys, a, T), pivot) < 0) {
                                a = (a + 1) | 0;
                            }

                            while (comparer[Bridge.geti(comparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T) + "$compare", "System$Collections$Generic$IComparer$1$compare")](pivot, System.Array.getItem(keys, b, T)) < 0) {
                                b = (b - 1) | 0;
                            }

                            if (a > b) {
                                break;
                            }

                            if (a < b) {
                                MathNet.Numerics.Sorting.Swap(T, keys, a, b);
                                MathNet.Numerics.Sorting.Swap(TItems, items, a, b);
                            }

                            a = (a + 1) | 0;
                            b = (b - 1) | 0;
                        } while (a <= b);

                        if ((((b - left) | 0)) <= (((right - a) | 0))) {
                            if (left < b) {
                                MathNet.Numerics.Sorting.QuickSort$1(T, TItems, keys, items, comparer, left, b);
                            }

                            left = a;
                        } else {
                            if (a < right) {
                                MathNet.Numerics.Sorting.QuickSort$1(T, TItems, keys, items, comparer, a, right);
                            }

                            right = b;
                        }
                    } while (left < right);
                },
                /**
                 * Recursive implementation for an in place quick sort on one list while reordering two other lists accordingly.
                 *
                 * @static
                 * @private
                 * @this MathNet.Numerics.Sorting
                 * @memberof MathNet.Numerics.Sorting
                 * @param   {Function}                                  T           The type of the list on which the quick sort is performed.
                 * @param   {Function}                                  TItems1     The type of the first list which is automatically reordered accordingly.
                 * @param   {Function}                                  TItems2     The type of the second list which is automatically reordered accordingly.
                 * @param   {System.Collections.Generic.IList$1}        keys        The list which is sorted using quick sort.
                 * @param   {System.Collections.Generic.IList$1}        items1      The first list which is automatically reordered accordingly.
                 * @param   {System.Collections.Generic.IList$1}        items2      The second list which is automatically reordered accordingly.
                 * @param   {System.Collections.Generic.IComparer$1}    comparer    The method with which to compare two elements of the quick sort.
                 * @param   {number}                                    left        The left boundary of the quick sort.
                 * @param   {number}                                    right       The right boundary of the quick sort.
                 * @return  {void}
                 */
                QuickSort$2: function (T, TItems1, TItems2, keys, items1, items2, comparer, left, right) {
                    do {
                        var a = left;
                        var b = right;
                        var p = (a + ((((b - a) | 0)) >> 1)) | 0;

                        if (comparer[Bridge.geti(comparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T) + "$compare", "System$Collections$Generic$IComparer$1$compare")](System.Array.getItem(keys, a, T), System.Array.getItem(keys, p, T)) > 0) {
                            MathNet.Numerics.Sorting.Swap(T, keys, a, p);
                            MathNet.Numerics.Sorting.Swap(TItems1, items1, a, p);
                            MathNet.Numerics.Sorting.Swap(TItems2, items2, a, p);
                        }

                        if (comparer[Bridge.geti(comparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T) + "$compare", "System$Collections$Generic$IComparer$1$compare")](System.Array.getItem(keys, a, T), System.Array.getItem(keys, b, T)) > 0) {
                            MathNet.Numerics.Sorting.Swap(T, keys, a, b);
                            MathNet.Numerics.Sorting.Swap(TItems1, items1, a, b);
                            MathNet.Numerics.Sorting.Swap(TItems2, items2, a, b);
                        }

                        if (comparer[Bridge.geti(comparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T) + "$compare", "System$Collections$Generic$IComparer$1$compare")](System.Array.getItem(keys, p, T), System.Array.getItem(keys, b, T)) > 0) {
                            MathNet.Numerics.Sorting.Swap(T, keys, p, b);
                            MathNet.Numerics.Sorting.Swap(TItems1, items1, p, b);
                            MathNet.Numerics.Sorting.Swap(TItems2, items2, p, b);
                        }

                        var pivot = System.Array.getItem(keys, p, T);

                        do {
                            while (comparer[Bridge.geti(comparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T) + "$compare", "System$Collections$Generic$IComparer$1$compare")](System.Array.getItem(keys, a, T), pivot) < 0) {
                                a = (a + 1) | 0;
                            }

                            while (comparer[Bridge.geti(comparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T) + "$compare", "System$Collections$Generic$IComparer$1$compare")](pivot, System.Array.getItem(keys, b, T)) < 0) {
                                b = (b - 1) | 0;
                            }

                            if (a > b) {
                                break;
                            }

                            if (a < b) {
                                MathNet.Numerics.Sorting.Swap(T, keys, a, b);
                                MathNet.Numerics.Sorting.Swap(TItems1, items1, a, b);
                                MathNet.Numerics.Sorting.Swap(TItems2, items2, a, b);
                            }

                            a = (a + 1) | 0;
                            b = (b - 1) | 0;
                        } while (a <= b);

                        if ((((b - left) | 0)) <= (((right - a) | 0))) {
                            if (left < b) {
                                MathNet.Numerics.Sorting.QuickSort$2(T, TItems1, TItems2, keys, items1, items2, comparer, left, b);
                            }

                            left = a;
                        } else {
                            if (a < right) {
                                MathNet.Numerics.Sorting.QuickSort$2(T, TItems1, TItems2, keys, items1, items2, comparer, a, right);
                            }

                            right = b;
                        }
                    } while (left < right);
                },
                /**
                 * Recursive implementation for an in place quick sort on the primary and then by the secondary list while reordering one secondary list accordingly.
                 *
                 * @static
                 * @private
                 * @this MathNet.Numerics.Sorting
                 * @memberof MathNet.Numerics.Sorting
                 * @param   {Function}                                  T1                   The type of the primary list.
                 * @param   {Function}                                  T2                   The type of the secondary list.
                 * @param   {System.Collections.Generic.IList$1}        primary              The list which is sorted using quick sort.
                 * @param   {System.Collections.Generic.IList$1}        secondary            The list which is sorted secondarily (on primary duplicates) and automatically reordered accordingly.
                 * @param   {System.Collections.Generic.IComparer$1}    primaryComparer      The method with which to compare two elements of the primary list.
                 * @param   {System.Collections.Generic.IComparer$1}    secondaryComparer    The method with which to compare two elements of the secondary list.
                 * @param   {number}                                    left                 The left boundary of the quick sort.
                 * @param   {number}                                    right                The right boundary of the quick sort.
                 * @return  {void}
                 */
                QuickSortAll: function (T1, T2, primary, secondary, primaryComparer, secondaryComparer, left, right) {
                    do {
                        var a = left;
                        var b = right;
                        var p = (a + ((((b - a) | 0)) >> 1)) | 0;

                        var ap = primaryComparer[Bridge.geti(primaryComparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T1) + "$compare", "System$Collections$Generic$IComparer$1$compare")](System.Array.getItem(primary, a, T1), System.Array.getItem(primary, p, T1));
                        if (ap > 0 || ap === 0 && secondaryComparer[Bridge.geti(secondaryComparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T2) + "$compare", "System$Collections$Generic$IComparer$1$compare")](System.Array.getItem(secondary, a, T2), System.Array.getItem(secondary, p, T2)) > 0) {
                            MathNet.Numerics.Sorting.Swap(T1, primary, a, p);
                            MathNet.Numerics.Sorting.Swap(T2, secondary, a, p);
                        }

                        var ab = primaryComparer[Bridge.geti(primaryComparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T1) + "$compare", "System$Collections$Generic$IComparer$1$compare")](System.Array.getItem(primary, a, T1), System.Array.getItem(primary, b, T1));
                        if (ab > 0 || ab === 0 && secondaryComparer[Bridge.geti(secondaryComparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T2) + "$compare", "System$Collections$Generic$IComparer$1$compare")](System.Array.getItem(secondary, a, T2), System.Array.getItem(secondary, b, T2)) > 0) {
                            MathNet.Numerics.Sorting.Swap(T1, primary, a, b);
                            MathNet.Numerics.Sorting.Swap(T2, secondary, a, b);
                        }

                        var pb = primaryComparer[Bridge.geti(primaryComparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T1) + "$compare", "System$Collections$Generic$IComparer$1$compare")](System.Array.getItem(primary, p, T1), System.Array.getItem(primary, b, T1));
                        if (pb > 0 || pb === 0 && secondaryComparer[Bridge.geti(secondaryComparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T2) + "$compare", "System$Collections$Generic$IComparer$1$compare")](System.Array.getItem(secondary, p, T2), System.Array.getItem(secondary, b, T2)) > 0) {
                            MathNet.Numerics.Sorting.Swap(T1, primary, p, b);
                            MathNet.Numerics.Sorting.Swap(T2, secondary, p, b);
                        }

                        var pivot1 = System.Array.getItem(primary, p, T1);
                        var pivot2 = System.Array.getItem(secondary, p, T2);

                        do {
                            var ax;
                            while (((ax = primaryComparer[Bridge.geti(primaryComparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T1) + "$compare", "System$Collections$Generic$IComparer$1$compare")](System.Array.getItem(primary, a, T1), pivot1))) < 0 || ax === 0 && secondaryComparer[Bridge.geti(secondaryComparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T2) + "$compare", "System$Collections$Generic$IComparer$1$compare")](System.Array.getItem(secondary, a, T2), pivot2) < 0) {
                                a = (a + 1) | 0;
                            }

                            var xb;
                            while (((xb = primaryComparer[Bridge.geti(primaryComparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T1) + "$compare", "System$Collections$Generic$IComparer$1$compare")](pivot1, System.Array.getItem(primary, b, T1)))) < 0 || xb === 0 && secondaryComparer[Bridge.geti(secondaryComparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T2) + "$compare", "System$Collections$Generic$IComparer$1$compare")](pivot2, System.Array.getItem(secondary, b, T2)) < 0) {
                                b = (b - 1) | 0;
                            }

                            if (a > b) {
                                break;
                            }

                            if (a < b) {
                                MathNet.Numerics.Sorting.Swap(T1, primary, a, b);
                                MathNet.Numerics.Sorting.Swap(T2, secondary, a, b);
                            }

                            a = (a + 1) | 0;
                            b = (b - 1) | 0;
                        } while (a <= b);

                        if ((((b - left) | 0)) <= (((right - a) | 0))) {
                            if (left < b) {
                                MathNet.Numerics.Sorting.QuickSortAll(T1, T2, primary, secondary, primaryComparer, secondaryComparer, left, b);
                            }

                            left = a;
                        } else {
                            if (a < right) {
                                MathNet.Numerics.Sorting.QuickSortAll(T1, T2, primary, secondary, primaryComparer, secondaryComparer, a, right);
                            }

                            right = b;
                        }
                    } while (left < right);
                },
                /**
                 * Performs an in place swap of two elements in a list.
                 *
                 * @static
                 * @private
                 * @this MathNet.Numerics.Sorting
                 * @memberof MathNet.Numerics.Sorting
                 * @param   {Function}                              T       The type of elements stored in the list.
                 * @param   {System.Collections.Generic.IList$1}    keys    The list in which the elements are stored.
                 * @param   {number}                                a       The index of the first element of the swap.
                 * @param   {number}                                b       The index of the second element of the swap.
                 * @return  {void}
                 */
                Swap: function (T, keys, a, b) {
                    if (a === b) {
                        return;
                    }

                    var local = System.Array.getItem(keys, a, T);
                    System.Array.setItem(keys, a, System.Array.getItem(keys, b, T), T);
                    System.Array.setItem(keys, b, local, T);
                }
            }
        }
    });

    Bridge.define("MathNetNumerics.App", {
        main: function Main () {
            System.Console.WriteLine("Welcome to Bridge.NET");

            var k = MathNetNumerics.App.v_builder.DenseOfArray(System.Array.init([1.0, 0.0, 0.0], System.Double));
            var I = MathNetNumerics.App.m_builder.DenseIdentity(3);
            var khat = MathNetNumerics.App.Hat(k);
            var khat2 = khat.Multiply$1(khat);
            System.Console.WriteLine(MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double).op_Addition$2(MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double).op_Addition$2(I, khat), khat2));




        },
        statics: {
            fields: {
                v_builder: null,
                m_builder: null
            },
            ctors: {
                init: function () {
                    this.v_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(System.Double).Vector;
                    this.m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(System.Double).Matrix;
                }
            },
            methods: {
                Hat: function (k) {
                    var khat = MathNetNumerics.App.m_builder.Dense$1(3, 3);
                    khat.setItem(0, 1, -k.getItem(2));
                    khat.setItem(0, 2, k.getItem(1));
                    khat.setItem(1, 0, k.getItem(2));
                    khat.setItem(1, 2, -k.getItem(0));
                    khat.setItem(2, 0, -k.getItem(1));
                    khat.setItem(2, 1, k.getItem(0));
                    return khat;
                }
            }
        }
    });

    Bridge.define("MathNetNumerics.Buffer", {
        statics: {
            methods: {
                BlockCopy$2: function (recbuf, v1, newbuf, v2, v3) {
                    System.Array.copy(recbuf, v1, newbuf, v2, v3);
                },
                BlockCopy: function (a, v, membuf, position, bl) {
                    var b = new System.IO.BinaryWriter.$ctor1(new System.IO.MemoryStream.$ctor3(membuf, position, bl));
                    var t = System.Type.getTypeCode((Bridge.getType(a).$elementType || null));
                    switch (t) {
                        case System.TypeCode.Double: 
                            {
                                var a1 = Bridge.cast(a, System.Array.type(System.Double));
                                for (var i = 0; i < ((Bridge.Int.div(bl, 8)) | 0); i = (i + 1) | 0) {
                                    b.Write$8(a1[System.Array.index(((i + v) | 0), a1)]);
                                }
                                break;
                            }
                        case System.TypeCode.Single: 
                            {
                                var a11 = Bridge.cast(a, System.Array.type(System.Single));
                                for (var i1 = 0; i1 < ((Bridge.Int.div(bl, 4)) | 0); i1 = (i1 + 1) | 0) {
                                    b.Write$13(a11[System.Array.index(((i1 + v) | 0), a11)]);
                                }
                                break;
                            }
                        case System.TypeCode.Byte: 
                            {
                                var a12 = Bridge.cast(a, System.Array.type(System.Byte));
                                for (var i2 = 0; i2 < bl; i2 = (i2 + 1) | 0) {
                                    b.Write$1(a12[System.Array.index(((i2 + v) | 0), a12)]);
                                }
                                break;
                            }
                        case System.TypeCode.SByte: 
                            {
                                var a13 = Bridge.cast(a, System.Array.type(System.SByte));
                                for (var i3 = 0; i3 < bl; i3 = (i3 + 1) | 0) {
                                    b.Write$12(a13[System.Array.index(((i3 + v) | 0), a13)]);
                                }
                                break;
                            }
                        case System.TypeCode.UInt16: 
                            {
                                var a14 = Bridge.cast(a, System.Array.type(System.UInt16));
                                for (var i4 = 0; i4 < ((Bridge.Int.div(bl, 2)) | 0); i4 = (i4 + 1) | 0) {
                                    b.Write$15(a14[System.Array.index(((i4 + v) | 0), a14)]);
                                }
                                break;
                            }
                        case System.TypeCode.Int16: 
                            {
                                var a15 = Bridge.cast(a, System.Array.type(System.Int16));
                                for (var i5 = 0; i5 < ((Bridge.Int.div(bl, 2)) | 0); i5 = (i5 + 1) | 0) {
                                    b.Write$9(a15[System.Array.index(((i5 + v) | 0), a15)]);
                                }
                                break;
                            }
                        case System.TypeCode.UInt32: 
                            {
                                var a16 = Bridge.cast(a, System.Array.type(System.UInt32));
                                for (var i6 = 0; i6 < ((Bridge.Int.div(bl, 4)) | 0); i6 = (i6 + 1) | 0) {
                                    b.Write$16(a16[System.Array.index(((i6 + v) | 0), a16)]);
                                }
                                break;
                            }
                        case System.TypeCode.Int32: 
                            {
                                var a17 = Bridge.cast(a, System.Array.type(System.Int32));
                                for (var i7 = 0; i7 < ((Bridge.Int.div(bl, 4)) | 0); i7 = (i7 + 1) | 0) {
                                    b.Write$10(a17[System.Array.index(((i7 + v) | 0), a17)]);
                                }
                                break;
                            }
                        case System.TypeCode.UInt64: 
                            {
                                var a18 = Bridge.cast(a, System.Array.type(System.UInt64));
                                for (var i8 = 0; i8 < ((Bridge.Int.div(bl, 8)) | 0); i8 = (i8 + 1) | 0) {
                                    b.Write$17(a18[System.Array.index(((i8 + v) | 0), a18)]);
                                }
                                break;
                            }
                        case System.TypeCode.Int64: 
                            {
                                var a19 = Bridge.cast(a, System.Array.type(System.Int64));
                                for (var i9 = 0; i9 < ((Bridge.Int.div(bl, 8)) | 0); i9 = (i9 + 1) | 0) {
                                    b.Write$11(a19[System.Array.index(((i9 + v) | 0), a19)]);
                                }
                                break;
                            }
                        case System.TypeCode.Boolean: 
                            {
                                var a110 = Bridge.cast(a, System.Array.type(System.Boolean));
                                for (var i10 = 0; i10 < bl; i10 = (i10 + 1) | 0) {
                                    b.Write(a110[System.Array.index(((i10 + v) | 0), a110)]);
                                }
                                break;
                            }
                        default: 
                            throw new System.ArgumentException.$ctor1("Invalid array type");
                    }
                },
                BlockCopy$1: function (membuf, position, a, v, bl) {
                    var b = new System.IO.BinaryReader.ctor(new System.IO.MemoryStream.$ctor3(membuf, position, bl));
                    var t = System.Type.getTypeCode((Bridge.getType(a).$elementType || null));
                    switch (t) {
                        case System.TypeCode.Double: 
                            {
                                var a1 = Bridge.cast(a, System.Array.type(System.Double));
                                for (var i = 0; i < ((Bridge.Int.div(bl, 8)) | 0); i = (i + 1) | 0) {
                                    a1[System.Array.index(((i + v) | 0), a1)] = b.ReadDouble();
                                }
                                break;
                            }
                        case System.TypeCode.Single: 
                            {
                                var a11 = Bridge.cast(a, System.Array.type(System.Single));
                                for (var i1 = 0; i1 < ((Bridge.Int.div(bl, 4)) | 0); i1 = (i1 + 1) | 0) {
                                    a11[System.Array.index(((i1 + v) | 0), a11)] = b.ReadSingle();
                                }
                                break;
                            }
                        case System.TypeCode.Byte: 
                            {
                                var a12 = Bridge.cast(a, System.Array.type(System.Byte));
                                for (var i2 = 0; i2 < bl; i2 = (i2 + 1) | 0) {
                                    a12[System.Array.index(((i2 + v) | 0), a12)] = b.ReadByte();
                                }
                                break;
                            }
                        case System.TypeCode.SByte: 
                            {
                                var a13 = Bridge.cast(a, System.Array.type(System.SByte));
                                for (var i3 = 0; i3 < bl; i3 = (i3 + 1) | 0) {
                                    a13[System.Array.index(((i3 + v) | 0), a13)] = b.ReadSByte();
                                }
                                break;
                            }
                        case System.TypeCode.UInt16: 
                            {
                                var a14 = Bridge.cast(a, System.Array.type(System.UInt16));
                                for (var i4 = 0; i4 < ((Bridge.Int.div(bl, 2)) | 0); i4 = (i4 + 1) | 0) {
                                    a14[System.Array.index(((i4 + v) | 0), a14)] = b.ReadUInt16();
                                }
                                break;
                            }
                        case System.TypeCode.Int16: 
                            {
                                var a15 = Bridge.cast(a, System.Array.type(System.Int16));
                                for (var i5 = 0; i5 < ((Bridge.Int.div(bl, 2)) | 0); i5 = (i5 + 1) | 0) {
                                    a15[System.Array.index(((i5 + v) | 0), a15)] = b.ReadInt16();
                                }
                                break;
                            }
                        case System.TypeCode.UInt32: 
                            {
                                var a16 = Bridge.cast(a, System.Array.type(System.UInt32));
                                for (var i6 = 0; i6 < ((Bridge.Int.div(bl, 4)) | 0); i6 = (i6 + 1) | 0) {
                                    a16[System.Array.index(((i6 + v) | 0), a16)] = b.ReadUInt32();
                                }
                                break;
                            }
                        case System.TypeCode.Int32: 
                            {
                                var a17 = Bridge.cast(a, System.Array.type(System.Int32));
                                for (var i7 = 0; i7 < ((Bridge.Int.div(bl, 4)) | 0); i7 = (i7 + 1) | 0) {
                                    a17[System.Array.index(((i7 + v) | 0), a17)] = b.ReadInt32();
                                }
                                break;
                            }
                        case System.TypeCode.UInt64: 
                            {
                                var a18 = Bridge.cast(a, System.Array.type(System.UInt64));
                                for (var i8 = 0; i8 < ((Bridge.Int.div(bl, 8)) | 0); i8 = (i8 + 1) | 0) {
                                    a18[System.Array.index(((i8 + v) | 0), a18)] = b.ReadUInt64();
                                }
                                break;
                            }
                        case System.TypeCode.Int64: 
                            {
                                var a19 = Bridge.cast(a, System.Array.type(System.Int64));
                                for (var i9 = 0; i9 < ((Bridge.Int.div(bl, 8)) | 0); i9 = (i9 + 1) | 0) {
                                    a19[System.Array.index(((i9 + v) | 0), a19)] = b.ReadInt64();
                                }
                                break;
                            }
                        case System.TypeCode.Boolean: 
                            {
                                var a110 = Bridge.cast(a, System.Array.type(System.Boolean));
                                for (var i10 = 0; i10 < bl; i10 = (i10 + 1) | 0) {
                                    a110[System.Array.index(((i10 + v) | 0), a110)] = b.ReadBoolean();
                                }
                                break;
                            }
                        default: 
                            throw new System.ArgumentException.$ctor1("Invalid array type");
                    }
                },
                ByteLength: function (a) {
                    var t = System.Type.getTypeCode((Bridge.getType(a).$elementType || null));
                    switch (t) {
                        case System.TypeCode.Double: 
                            return Bridge.Int.mul(8, a.length);
                        case System.TypeCode.Single: 
                            return Bridge.Int.mul(4, a.length);
                        case System.TypeCode.Byte: 
                        case System.TypeCode.SByte: 
                            return a.length;
                        case System.TypeCode.UInt16: 
                        case System.TypeCode.Int16: 
                            return Bridge.Int.mul(2, a.length);
                        case System.TypeCode.UInt32: 
                        case System.TypeCode.Int32: 
                            return Bridge.Int.mul(4, a.length);
                        case System.TypeCode.UInt64: 
                        case System.TypeCode.Int64: 
                            return Bridge.Int.mul(8, a.length);
                        case System.TypeCode.Boolean: 
                            return a.length;
                        default: 
                            throw new System.ArgumentException.$ctor1("Invalid array type");
                    }
                }
            }
        }
    });

    Bridge.define("MathNetNumerics.ManagedLinearAlgebraProvider", {
        statics: {
            methods: {
                Drotg: function (da, db, c, s) {
                    var r, z;

                    var roe = db.v;
                    var absda = Math.abs(da.v);
                    var absdb = Math.abs(db.v);
                    if (absda > absdb) {
                        roe = da.v;
                    }

                    var scale = absda + absdb;
                    if (scale === 0.0) {
                        c.v = 1.0;
                        s.v = 0.0;
                        r = 0.0;
                        z = 0.0;
                    } else {
                        var sda = da.v / scale;
                        var sdb = db.v / scale;
                        r = scale * Math.sqrt((sda * sda) + (sdb * sdb));
                        if (roe < 0.0) {
                            r = -r;
                        }

                        c.v = da.v / r;
                        s.v = db.v / r;
                        z = 1.0;
                        if (absda > absdb) {
                            z = s.v;
                        }

                        if (absdb >= absda && c.v !== 0.0) {
                            z = 1.0 / c.v;
                        }
                    }

                    da.v = r;
                    db.v = z;
                }
            }
        },
        methods: {
            SvdSolveFactored: function (rowsA, columnsA, s, u, vt, b, columnsB, x) {
                if (s == null) {
                    throw new System.ArgumentNullException.$ctor1("s");
                }

                if (u == null) {
                    throw new System.ArgumentNullException.$ctor1("u");
                }

                if (vt == null) {
                    throw new System.ArgumentNullException.$ctor1("vt");
                }

                if (b == null) {
                    throw new System.ArgumentNullException.$ctor1("b");
                }

                if (x == null) {
                    throw new System.ArgumentNullException.$ctor1("x");
                }

                if (u.length !== Bridge.Int.mul(rowsA, rowsA)) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentArraysSameLength", "u");
                }

                if (vt.length !== Bridge.Int.mul(columnsA, columnsA)) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentArraysSameLength", "vt");
                }

                if (s.length !== Math.min(rowsA, columnsA)) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentArraysSameLength", "s");
                }

                if (b.length !== Bridge.Int.mul(rowsA, columnsB)) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentArraysSameLength", "b");
                }

                if (x.length !== Bridge.Int.mul(columnsA, columnsB)) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentArraysSameLength", "b");
                }

                var mn = Math.min(rowsA, columnsA);
                var tmp = System.Array.init(columnsA, 0, System.Double);

                for (var k = 0; k < columnsB; k = (k + 1) | 0) {
                    for (var j = 0; j < columnsA; j = (j + 1) | 0) {
                        var value = 0;
                        if (j < mn) {
                            for (var i = 0; i < rowsA; i = (i + 1) | 0) {
                                value += u[System.Array.index((((Bridge.Int.mul(j, rowsA)) + i) | 0), u)] * b[System.Array.index((((Bridge.Int.mul(k, rowsA)) + i) | 0), b)];
                            }

                            value /= s[System.Array.index(j, s)];
                        }

                        tmp[System.Array.index(j, tmp)] = value;
                    }

                    for (var j1 = 0; j1 < columnsA; j1 = (j1 + 1) | 0) {
                        var value1 = 0;
                        for (var i1 = 0; i1 < columnsA; i1 = (i1 + 1) | 0) {
                            value1 += vt[System.Array.index((((Bridge.Int.mul(j1, columnsA)) + i1) | 0), vt)] * tmp[System.Array.index(i1, tmp)];
                        }

                        x[System.Array.index((((Bridge.Int.mul(k, columnsA)) + j1) | 0), x)] = value1;
                    }
                }
            },
            SingularValueDecomposition: function (computeVectors, a, rowsA, columnsA, s, u, vt) {
                if (a == null) {
                    throw new System.ArgumentNullException.$ctor1("a");
                }

                if (s == null) {
                    throw new System.ArgumentNullException.$ctor1("s");
                }

                if (u == null) {
                    throw new System.ArgumentNullException.$ctor1("u");
                }

                if (vt == null) {
                    throw new System.ArgumentNullException.$ctor1("vt");
                }

                if (u.length !== Bridge.Int.mul(rowsA, rowsA)) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentArraysSameLength", "u");
                }

                if (vt.length !== Bridge.Int.mul(columnsA, columnsA)) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentArraysSameLength", "vt");
                }

                if (s.length !== Math.min(rowsA, columnsA)) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentArraysSameLength", "s");
                }

                var work = System.Array.init(rowsA, 0, System.Double);

                var maxiter = 1000;

                var e = System.Array.init(columnsA, 0, System.Double);
                var v = System.Array.init(vt.length, 0, System.Double);
                var stemp = System.Array.init(Math.min(((rowsA + 1) | 0), columnsA), 0, System.Double);

                var i, j, l, lp1;

                var t;

                var ncu = rowsA;

                var nct = Math.min(((rowsA - 1) | 0), columnsA);
                var nrt = Math.max(0, Math.min(((columnsA - 2) | 0), rowsA));
                var lu = Math.max(nct, nrt);

                for (l = 0; l < lu; l = (l + 1) | 0) {
                    lp1 = (l + 1) | 0;
                    if (l < nct) {
                        var sum = 0.0;
                        for (var i1 = l; i1 < rowsA; i1 = (i1 + 1) | 0) {
                            sum += a[System.Array.index((((Bridge.Int.mul(l, rowsA)) + i1) | 0), a)] * a[System.Array.index((((Bridge.Int.mul(l, rowsA)) + i1) | 0), a)];
                        }

                        stemp[System.Array.index(l, stemp)] = Math.sqrt(sum);

                        if (stemp[System.Array.index(l, stemp)] !== 0.0) {
                            if (a[System.Array.index((((Bridge.Int.mul(l, rowsA)) + l) | 0), a)] !== 0.0) {
                                stemp[System.Array.index(l, stemp)] = Math.abs(stemp[System.Array.index(l, stemp)]) * (a[System.Array.index((((Bridge.Int.mul(l, rowsA)) + l) | 0), a)] / Math.abs(a[System.Array.index((((Bridge.Int.mul(l, rowsA)) + l) | 0), a)]));
                            }

                            for (i = l; i < rowsA; i = (i + 1) | 0) {
                                a[System.Array.index((((Bridge.Int.mul(l, rowsA)) + i) | 0), a)] = a[System.Array.index((((Bridge.Int.mul(l, rowsA)) + i) | 0), a)] * (1.0 / stemp[System.Array.index(l, stemp)]);
                            }

                            a[System.Array.index((((Bridge.Int.mul(l, rowsA)) + l) | 0), a)] = 1.0 + a[System.Array.index((((Bridge.Int.mul(l, rowsA)) + l) | 0), a)];
                        }

                        stemp[System.Array.index(l, stemp)] = -stemp[System.Array.index(l, stemp)];
                    }

                    for (j = lp1; j < columnsA; j = (j + 1) | 0) {
                        if (l < nct) {
                            if (stemp[System.Array.index(l, stemp)] !== 0.0) {
                                t = 0.0;
                                for (i = l; i < rowsA; i = (i + 1) | 0) {
                                    t += a[System.Array.index((((Bridge.Int.mul(j, rowsA)) + i) | 0), a)] * a[System.Array.index((((Bridge.Int.mul(l, rowsA)) + i) | 0), a)];
                                }

                                t = -t / a[System.Array.index((((Bridge.Int.mul(l, rowsA)) + l) | 0), a)];

                                for (var ii = l; ii < rowsA; ii = (ii + 1) | 0) {
                                    a[System.Array.index((((Bridge.Int.mul(j, rowsA)) + ii) | 0), a)] += t * a[System.Array.index((((Bridge.Int.mul(l, rowsA)) + ii) | 0), a)];
                                }
                            }
                        }

                        e[System.Array.index(j, e)] = a[System.Array.index((((Bridge.Int.mul(j, rowsA)) + l) | 0), a)];
                    }

                    if (computeVectors && l < nct) {
                        for (i = l; i < rowsA; i = (i + 1) | 0) {
                            u[System.Array.index((((Bridge.Int.mul(l, rowsA)) + i) | 0), u)] = a[System.Array.index((((Bridge.Int.mul(l, rowsA)) + i) | 0), a)];
                        }
                    }

                    if (l >= nrt) {
                        continue;
                    }

                    var enorm = 0.0;
                    for (i = lp1; i < e.length; i = (i + 1) | 0) {
                        enorm += e[System.Array.index(i, e)] * e[System.Array.index(i, e)];
                    }

                    e[System.Array.index(l, e)] = Math.sqrt(enorm);
                    if (e[System.Array.index(l, e)] !== 0.0) {
                        if (e[System.Array.index(lp1, e)] !== 0.0) {
                            e[System.Array.index(l, e)] = Math.abs(e[System.Array.index(l, e)]) * (e[System.Array.index(lp1, e)] / Math.abs(e[System.Array.index(lp1, e)]));
                        }

                        for (i = lp1; i < e.length; i = (i + 1) | 0) {
                            e[System.Array.index(i, e)] = e[System.Array.index(i, e)] * (1.0 / e[System.Array.index(l, e)]);
                        }

                        e[System.Array.index(lp1, e)] = 1.0 + e[System.Array.index(lp1, e)];
                    }

                    e[System.Array.index(l, e)] = -e[System.Array.index(l, e)];

                    if (lp1 < rowsA && e[System.Array.index(l, e)] !== 0.0) {
                        for (i = lp1; i < rowsA; i = (i + 1) | 0) {
                            work[System.Array.index(i, work)] = 0.0;
                        }

                        for (j = lp1; j < columnsA; j = (j + 1) | 0) {
                            for (var ii1 = lp1; ii1 < rowsA; ii1 = (ii1 + 1) | 0) {
                                work[System.Array.index(ii1, work)] += e[System.Array.index(j, e)] * a[System.Array.index((((Bridge.Int.mul(j, rowsA)) + ii1) | 0), a)];
                            }
                        }

                        for (j = lp1; j < columnsA; j = (j + 1) | 0) {
                            var ww = -e[System.Array.index(j, e)] / e[System.Array.index(lp1, e)];
                            for (var ii2 = lp1; ii2 < rowsA; ii2 = (ii2 + 1) | 0) {
                                a[System.Array.index((((Bridge.Int.mul(j, rowsA)) + ii2) | 0), a)] += ww * work[System.Array.index(ii2, work)];
                            }
                        }
                    }

                    if (!computeVectors) {
                        continue;
                    }

                    for (i = lp1; i < columnsA; i = (i + 1) | 0) {
                        v[System.Array.index((((Bridge.Int.mul(l, columnsA)) + i) | 0), v)] = e[System.Array.index(i, e)];
                    }
                }

                var m = Math.min(columnsA, ((rowsA + 1) | 0));
                var nctp1 = (nct + 1) | 0;
                var nrtp1 = (nrt + 1) | 0;
                if (nct < columnsA) {
                    stemp[System.Array.index(((nctp1 - 1) | 0), stemp)] = a[System.Array.index((((Bridge.Int.mul((((nctp1 - 1) | 0)), rowsA)) + (((nctp1 - 1) | 0))) | 0), a)];
                }

                if (rowsA < m) {
                    stemp[System.Array.index(((m - 1) | 0), stemp)] = 0.0;
                }

                if (nrtp1 < m) {
                    e[System.Array.index(((nrtp1 - 1) | 0), e)] = a[System.Array.index((((Bridge.Int.mul((((m - 1) | 0)), rowsA)) + (((nrtp1 - 1) | 0))) | 0), a)];
                }

                e[System.Array.index(((m - 1) | 0), e)] = 0.0;

                if (computeVectors) {
                    for (j = (nctp1 - 1) | 0; j < ncu; j = (j + 1) | 0) {
                        for (i = 0; i < rowsA; i = (i + 1) | 0) {
                            u[System.Array.index((((Bridge.Int.mul(j, rowsA)) + i) | 0), u)] = 0.0;
                        }

                        u[System.Array.index((((Bridge.Int.mul(j, rowsA)) + j) | 0), u)] = 1.0;
                    }

                    for (l = (nct - 1) | 0; l >= 0; l = (l - 1) | 0) {
                        if (stemp[System.Array.index(l, stemp)] !== 0.0) {
                            for (j = (l + 1) | 0; j < ncu; j = (j + 1) | 0) {
                                t = 0.0;
                                for (i = l; i < rowsA; i = (i + 1) | 0) {
                                    t += u[System.Array.index((((Bridge.Int.mul(j, rowsA)) + i) | 0), u)] * u[System.Array.index((((Bridge.Int.mul(l, rowsA)) + i) | 0), u)];
                                }

                                t = -t / u[System.Array.index((((Bridge.Int.mul(l, rowsA)) + l) | 0), u)];

                                for (var ii3 = l; ii3 < rowsA; ii3 = (ii3 + 1) | 0) {
                                    u[System.Array.index((((Bridge.Int.mul(j, rowsA)) + ii3) | 0), u)] += t * u[System.Array.index((((Bridge.Int.mul(l, rowsA)) + ii3) | 0), u)];
                                }
                            }

                            for (i = l; i < rowsA; i = (i + 1) | 0) {
                                u[System.Array.index((((Bridge.Int.mul(l, rowsA)) + i) | 0), u)] = u[System.Array.index((((Bridge.Int.mul(l, rowsA)) + i) | 0), u)] * -1.0;
                            }

                            u[System.Array.index((((Bridge.Int.mul(l, rowsA)) + l) | 0), u)] = 1.0 + u[System.Array.index((((Bridge.Int.mul(l, rowsA)) + l) | 0), u)];
                            for (i = 0; i < l; i = (i + 1) | 0) {
                                u[System.Array.index((((Bridge.Int.mul(l, rowsA)) + i) | 0), u)] = 0.0;
                            }
                        } else {
                            for (i = 0; i < rowsA; i = (i + 1) | 0) {
                                u[System.Array.index((((Bridge.Int.mul(l, rowsA)) + i) | 0), u)] = 0.0;
                            }

                            u[System.Array.index((((Bridge.Int.mul(l, rowsA)) + l) | 0), u)] = 1.0;
                        }
                    }
                }

                if (computeVectors) {
                    for (l = (columnsA - 1) | 0; l >= 0; l = (l - 1) | 0) {
                        lp1 = (l + 1) | 0;
                        if (l < nrt) {
                            if (e[System.Array.index(l, e)] !== 0.0) {
                                for (j = lp1; j < columnsA; j = (j + 1) | 0) {
                                    t = 0.0;
                                    for (i = lp1; i < columnsA; i = (i + 1) | 0) {
                                        t += v[System.Array.index((((Bridge.Int.mul(j, columnsA)) + i) | 0), v)] * v[System.Array.index((((Bridge.Int.mul(l, columnsA)) + i) | 0), v)];
                                    }

                                    t = -t / v[System.Array.index((((Bridge.Int.mul(l, columnsA)) + lp1) | 0), v)];
                                    for (var ii4 = l; ii4 < columnsA; ii4 = (ii4 + 1) | 0) {
                                        v[System.Array.index((((Bridge.Int.mul(j, columnsA)) + ii4) | 0), v)] += t * v[System.Array.index((((Bridge.Int.mul(l, columnsA)) + ii4) | 0), v)];
                                    }
                                }
                            }
                        }

                        for (i = 0; i < columnsA; i = (i + 1) | 0) {
                            v[System.Array.index((((Bridge.Int.mul(l, columnsA)) + i) | 0), v)] = 0.0;
                        }

                        v[System.Array.index((((Bridge.Int.mul(l, columnsA)) + l) | 0), v)] = 1.0;
                    }
                }

                for (i = 0; i < m; i = (i + 1) | 0) {
                    var r;
                    if (stemp[System.Array.index(i, stemp)] !== 0.0) {
                        t = stemp[System.Array.index(i, stemp)];
                        r = stemp[System.Array.index(i, stemp)] / t;
                        stemp[System.Array.index(i, stemp)] = t;
                        if (i < ((m - 1) | 0)) {
                            e[System.Array.index(i, e)] = e[System.Array.index(i, e)] / r;
                        }

                        if (computeVectors) {
                            for (j = 0; j < rowsA; j = (j + 1) | 0) {
                                u[System.Array.index((((Bridge.Int.mul(i, rowsA)) + j) | 0), u)] = u[System.Array.index((((Bridge.Int.mul(i, rowsA)) + j) | 0), u)] * r;
                            }
                        }
                    }

                    if (i === ((m - 1) | 0)) {
                        break;
                    }

                    if (e[System.Array.index(i, e)] === 0.0) {
                        continue;
                    }

                    t = e[System.Array.index(i, e)];
                    r = t / e[System.Array.index(i, e)];
                    e[System.Array.index(i, e)] = t;
                    stemp[System.Array.index(((i + 1) | 0), stemp)] = stemp[System.Array.index(((i + 1) | 0), stemp)] * r;
                    if (!computeVectors) {
                        continue;
                    }

                    for (j = 0; j < columnsA; j = (j + 1) | 0) {
                        v[System.Array.index((((Bridge.Int.mul((((i + 1) | 0)), columnsA)) + j) | 0), v)] = v[System.Array.index((((Bridge.Int.mul((((i + 1) | 0)), columnsA)) + j) | 0), v)] * r;
                    }
                }

                var mn = m;
                var iter = 0;

                while (m > 0) {
                    if (iter >= maxiter) {
                        throw new System.ArgumentException.$ctor1("NonConvergenceException");
                    }

                    var ztest;
                    var test;
                    for (l = (m - 2) | 0; l >= 0; l = (l - 1) | 0) {
                        test = Math.abs(stemp[System.Array.index(l, stemp)]) + Math.abs(stemp[System.Array.index(((l + 1) | 0), stemp)]);
                        ztest = test + Math.abs(e[System.Array.index(l, e)]);
                        if (this.AlmostEquals(ztest, test)) {
                            e[System.Array.index(l, e)] = 0.0;
                            break;
                        }
                    }

                    var kase;
                    if (l === ((m - 2) | 0)) {
                        kase = 4;
                    } else {
                        var ls;
                        for (ls = (m - 1) | 0; ls > l; ls = (ls - 1) | 0) {
                            test = 0.0;
                            if (ls !== ((m - 1) | 0)) {
                                test = test + Math.abs(e[System.Array.index(ls, e)]);
                            }

                            if (ls !== ((l + 1) | 0)) {
                                test = test + Math.abs(e[System.Array.index(((ls - 1) | 0), e)]);
                            }

                            ztest = test + Math.abs(stemp[System.Array.index(ls, stemp)]);
                            if (this.AlmostEquals(ztest, test)) {
                                stemp[System.Array.index(ls, stemp)] = 0.0;
                                break;
                            }
                        }

                        if (ls === l) {
                            kase = 3;
                        } else if (ls === ((m - 1) | 0)) {
                            kase = 1;
                        } else {
                            kase = 2;
                            l = ls;
                        }
                    }

                    l = (l + 1) | 0;

                    var k;
                    var f = { };
                    var cs = { };
                    var sn = { };
                    switch (kase) {
                        case 1: 
                            f.v = e[System.Array.index(((m - 2) | 0), e)];
                            e[System.Array.index(((m - 2) | 0), e)] = 0.0;
                            var t1 = { };
                            for (var kk = l; kk < ((m - 1) | 0); kk = (kk + 1) | 0) {
                                k = (((((m - 2) | 0) - kk) | 0) + l) | 0;
                                t1.v = stemp[System.Array.index(k, stemp)];

                                MathNetNumerics.ManagedLinearAlgebraProvider.Drotg(t1, f, cs, sn);
                                stemp[System.Array.index(k, stemp)] = t1.v;
                                if (k !== l) {
                                    f.v = -sn.v * e[System.Array.index(((k - 1) | 0), e)];
                                    e[System.Array.index(((k - 1) | 0), e)] = cs.v * e[System.Array.index(((k - 1) | 0), e)];
                                }

                                if (computeVectors) {
                                    for (i = 0; i < columnsA; i = (i + 1) | 0) {
                                        var z = (cs.v * v[System.Array.index((((Bridge.Int.mul(k, columnsA)) + i) | 0), v)]) + (sn.v * v[System.Array.index((((Bridge.Int.mul((((m - 1) | 0)), columnsA)) + i) | 0), v)]);
                                        v[System.Array.index((((Bridge.Int.mul((((m - 1) | 0)), columnsA)) + i) | 0), v)] = (cs.v * v[System.Array.index((((Bridge.Int.mul((((m - 1) | 0)), columnsA)) + i) | 0), v)]) - (sn.v * v[System.Array.index((((Bridge.Int.mul(k, columnsA)) + i) | 0), v)]);
                                        v[System.Array.index((((Bridge.Int.mul(k, columnsA)) + i) | 0), v)] = z;
                                    }
                                }
                            }
                            break;
                        case 2: 
                            f.v = e[System.Array.index(((l - 1) | 0), e)];
                            e[System.Array.index(((l - 1) | 0), e)] = 0.0;
                            for (k = l; k < m; k = (k + 1) | 0) {
                                t1 = stemp[System.Array.index(k, stemp)];
                                MathNetNumerics.ManagedLinearAlgebraProvider.Drotg(t1, f, cs, sn);
                                stemp[System.Array.index(k, stemp)] = t1;
                                f.v = -sn.v * e[System.Array.index(k, e)];
                                e[System.Array.index(k, e)] = cs.v * e[System.Array.index(k, e)];
                                if (computeVectors) {
                                    for (i = 0; i < rowsA; i = (i + 1) | 0) {
                                        var z1 = (cs.v * u[System.Array.index((((Bridge.Int.mul(k, rowsA)) + i) | 0), u)]) + (sn.v * u[System.Array.index((((Bridge.Int.mul((((l - 1) | 0)), rowsA)) + i) | 0), u)]);
                                        u[System.Array.index((((Bridge.Int.mul((((l - 1) | 0)), rowsA)) + i) | 0), u)] = (cs.v * u[System.Array.index((((Bridge.Int.mul((((l - 1) | 0)), rowsA)) + i) | 0), u)]) - (sn.v * u[System.Array.index((((Bridge.Int.mul(k, rowsA)) + i) | 0), u)]);
                                        u[System.Array.index((((Bridge.Int.mul(k, rowsA)) + i) | 0), u)] = z1;
                                    }
                                }
                            }
                            break;
                        case 3: 
                            var scale = 0.0;
                            scale = Math.max(scale, Math.abs(stemp[System.Array.index(((m - 1) | 0), stemp)]));
                            scale = Math.max(scale, Math.abs(stemp[System.Array.index(((m - 2) | 0), stemp)]));
                            scale = Math.max(scale, Math.abs(e[System.Array.index(((m - 2) | 0), e)]));
                            scale = Math.max(scale, Math.abs(stemp[System.Array.index(l, stemp)]));
                            scale = Math.max(scale, Math.abs(e[System.Array.index(l, e)]));
                            var sm = stemp[System.Array.index(((m - 1) | 0), stemp)] / scale;
                            var smm1 = stemp[System.Array.index(((m - 2) | 0), stemp)] / scale;
                            var emm1 = e[System.Array.index(((m - 2) | 0), e)] / scale;
                            var sl = stemp[System.Array.index(l, stemp)] / scale;
                            var el = e[System.Array.index(l, e)] / scale;
                            var b = (((smm1 + sm) * (smm1 - sm)) + (emm1 * emm1)) / 2.0;
                            var c = (sm * emm1) * (sm * emm1);
                            var shift = 0.0;
                            if (b !== 0.0 || c !== 0.0) {
                                shift = Math.sqrt((b * b) + c);
                                if (b < 0.0) {
                                    shift = -shift;
                                }

                                shift = c / (b + shift);
                            }
                            f.v = ((sl + sm) * (sl - sm)) + shift;
                            var g = { v : sl * el };
                            for (k = l; k < ((m - 1) | 0); k = (k + 1) | 0) {
                                MathNetNumerics.ManagedLinearAlgebraProvider.Drotg(f, g, cs, sn);
                                if (k !== l) {
                                    e[System.Array.index(((k - 1) | 0), e)] = f.v;
                                }

                                f.v = (cs.v * stemp[System.Array.index(k, stemp)]) + (sn.v * e[System.Array.index(k, e)]);
                                e[System.Array.index(k, e)] = (cs.v * e[System.Array.index(k, e)]) - (sn.v * stemp[System.Array.index(k, stemp)]);
                                g.v = sn.v * stemp[System.Array.index(((k + 1) | 0), stemp)];
                                stemp[System.Array.index(((k + 1) | 0), stemp)] = cs.v * stemp[System.Array.index(((k + 1) | 0), stemp)];
                                if (computeVectors) {
                                    for (i = 0; i < columnsA; i = (i + 1) | 0) {
                                        var z2 = (cs.v * v[System.Array.index((((Bridge.Int.mul(k, columnsA)) + i) | 0), v)]) + (sn.v * v[System.Array.index((((Bridge.Int.mul((((k + 1) | 0)), columnsA)) + i) | 0), v)]);
                                        v[System.Array.index((((Bridge.Int.mul((((k + 1) | 0)), columnsA)) + i) | 0), v)] = (cs.v * v[System.Array.index((((Bridge.Int.mul((((k + 1) | 0)), columnsA)) + i) | 0), v)]) - (sn.v * v[System.Array.index((((Bridge.Int.mul(k, columnsA)) + i) | 0), v)]);
                                        v[System.Array.index((((Bridge.Int.mul(k, columnsA)) + i) | 0), v)] = z2;
                                    }
                                }

                                MathNetNumerics.ManagedLinearAlgebraProvider.Drotg(f, g, cs, sn);
                                stemp[System.Array.index(k, stemp)] = f.v;
                                f.v = (cs.v * e[System.Array.index(k, e)]) + (sn.v * stemp[System.Array.index(((k + 1) | 0), stemp)]);
                                stemp[System.Array.index(((k + 1) | 0), stemp)] = -(sn.v * e[System.Array.index(k, e)]) + (cs.v * stemp[System.Array.index(((k + 1) | 0), stemp)]);
                                g.v = sn.v * e[System.Array.index(((k + 1) | 0), e)];
                                e[System.Array.index(((k + 1) | 0), e)] = cs.v * e[System.Array.index(((k + 1) | 0), e)];
                                if (computeVectors && k < rowsA) {
                                    for (i = 0; i < rowsA; i = (i + 1) | 0) {
                                        var z3 = (cs.v * u[System.Array.index((((Bridge.Int.mul(k, rowsA)) + i) | 0), u)]) + (sn.v * u[System.Array.index((((Bridge.Int.mul((((k + 1) | 0)), rowsA)) + i) | 0), u)]);
                                        u[System.Array.index((((Bridge.Int.mul((((k + 1) | 0)), rowsA)) + i) | 0), u)] = (cs.v * u[System.Array.index((((Bridge.Int.mul((((k + 1) | 0)), rowsA)) + i) | 0), u)]) - (sn.v * u[System.Array.index((((Bridge.Int.mul(k, rowsA)) + i) | 0), u)]);
                                        u[System.Array.index((((Bridge.Int.mul(k, rowsA)) + i) | 0), u)] = z3;
                                    }
                                }
                            }
                            e[System.Array.index(((m - 2) | 0), e)] = f.v;
                            iter = (iter + 1) | 0;
                            break;
                        case 4: 
                            if (stemp[System.Array.index(l, stemp)] < 0.0) {
                                stemp[System.Array.index(l, stemp)] = -stemp[System.Array.index(l, stemp)];
                                if (computeVectors) {
                                    for (i = 0; i < columnsA; i = (i + 1) | 0) {
                                        v[System.Array.index((((Bridge.Int.mul(l, columnsA)) + i) | 0), v)] = v[System.Array.index((((Bridge.Int.mul(l, columnsA)) + i) | 0), v)] * -1.0;
                                    }
                                }
                            }
                            while (l !== ((mn - 1) | 0)) {
                                if (stemp[System.Array.index(l, stemp)] >= stemp[System.Array.index(((l + 1) | 0), stemp)]) {
                                    break;
                                }

                                t = stemp[System.Array.index(l, stemp)];
                                stemp[System.Array.index(l, stemp)] = stemp[System.Array.index(((l + 1) | 0), stemp)];
                                stemp[System.Array.index(((l + 1) | 0), stemp)] = t;
                                if (computeVectors && l < columnsA) {
                                    for (i = 0; i < columnsA; i = (i + 1) | 0) {
                                        var z4 = v[System.Array.index((((Bridge.Int.mul(l, columnsA)) + i) | 0), v)];
                                        v[System.Array.index((((Bridge.Int.mul(l, columnsA)) + i) | 0), v)] = v[System.Array.index((((Bridge.Int.mul((((l + 1) | 0)), columnsA)) + i) | 0), v)];
                                        v[System.Array.index((((Bridge.Int.mul((((l + 1) | 0)), columnsA)) + i) | 0), v)] = z4;
                                    }
                                }

                                if (computeVectors && l < rowsA) {
                                    for (i = 0; i < rowsA; i = (i + 1) | 0) {
                                        var z5 = u[System.Array.index((((Bridge.Int.mul(l, rowsA)) + i) | 0), u)];
                                        u[System.Array.index((((Bridge.Int.mul(l, rowsA)) + i) | 0), u)] = u[System.Array.index((((Bridge.Int.mul((((l + 1) | 0)), rowsA)) + i) | 0), u)];
                                        u[System.Array.index((((Bridge.Int.mul((((l + 1) | 0)), rowsA)) + i) | 0), u)] = z5;
                                    }
                                }

                                l = (l + 1) | 0;
                            }
                            iter = 0;
                            m = (m - 1) | 0;
                            break;
                    }
                }

                if (computeVectors) {
                    for (i = 0; i < columnsA; i = (i + 1) | 0) {
                        for (j = 0; j < columnsA; j = (j + 1) | 0) {
                            vt[System.Array.index((((Bridge.Int.mul(j, columnsA)) + i) | 0), vt)] = v[System.Array.index((((Bridge.Int.mul(i, columnsA)) + j) | 0), v)];
                        }
                    }
                }


                System.Array.copy(stemp, 0, s, 0, Math.min(rowsA, columnsA));
            },
            AlmostEquals: function (val1, val2) {
                if (Math.abs(val1 - val2) < (Math.pow(10, -8))) {
                    return true;
                }
                return false;
            }
        }
    });

    Bridge.define("mathnetnumericsbridge.Complex", {
        inherits: function () { return [System.IEquatable$1(mathnetnumericsbridge.Complex),System.IFormattable]; },
        $kind: "struct",
        statics: {
            fields: {
                InverseOfLog10: 0,
                Zero: null,
                One: null,
                ImaginaryOne: null,
                NaN: null,
                Infinity: null,
                s_sqrtRescaleThreshold: 0,
                s_asinOverflowThreshold: 0,
                s_log2: 0
            },
            ctors: {
                init: function () {
                    this.Zero = new mathnetnumericsbridge.Complex();
                    this.One = new mathnetnumericsbridge.Complex();
                    this.ImaginaryOne = new mathnetnumericsbridge.Complex();
                    this.NaN = new mathnetnumericsbridge.Complex();
                    this.Infinity = new mathnetnumericsbridge.Complex();
                    this.InverseOfLog10 = 0.43429448190325;
                    this.Zero = new mathnetnumericsbridge.Complex.$ctor1(0.0, 0.0);
                    this.One = new mathnetnumericsbridge.Complex.$ctor1(1.0, 0.0);
                    this.ImaginaryOne = new mathnetnumericsbridge.Complex.$ctor1(0.0, 1.0);
                    this.NaN = new mathnetnumericsbridge.Complex.$ctor1(Number.NaN, Number.NaN);
                    this.Infinity = new mathnetnumericsbridge.Complex.$ctor1(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
                    this.s_sqrtRescaleThreshold = System.Double.max / (Math.sqrt(2.0) + 1.0);
                    this.s_asinOverflowThreshold = Math.sqrt(System.Double.max) / 2.0;
                    this.s_log2 = Bridge.Math.log(2.0);
                }
            },
            methods: {
                FromPolarCoordinates: function (magnitude, phase) {
                    return new mathnetnumericsbridge.Complex.$ctor1(magnitude * Math.cos(phase), magnitude * Math.sin(phase));
                },
                Negate: function (value) {
                    return mathnetnumericsbridge.Complex.op_UnaryNegation(value.$clone());
                },
                Add: function (left, right) {
                    return mathnetnumericsbridge.Complex.op_Addition(left.$clone(), right.$clone());
                },
                Add$1: function (left, right) {
                    return mathnetnumericsbridge.Complex.op_Addition$1(left.$clone(), right);
                },
                Add$2: function (left, right) {
                    return mathnetnumericsbridge.Complex.op_Addition$2(left, right.$clone());
                },
                Subtract: function (left, right) {
                    return mathnetnumericsbridge.Complex.op_Subtraction(left.$clone(), right.$clone());
                },
                Subtract$1: function (left, right) {
                    return mathnetnumericsbridge.Complex.op_Subtraction$1(left.$clone(), right);
                },
                Subtract$2: function (left, right) {
                    return mathnetnumericsbridge.Complex.op_Subtraction$2(left, right.$clone());
                },
                Multiply: function (left, right) {
                    return mathnetnumericsbridge.Complex.op_Multiply(left.$clone(), right.$clone());
                },
                Multiply$1: function (left, right) {
                    return mathnetnumericsbridge.Complex.op_Multiply$1(left.$clone(), right);
                },
                Multiply$2: function (left, right) {
                    return mathnetnumericsbridge.Complex.op_Multiply$2(left, right.$clone());
                },
                Divide: function (dividend, divisor) {
                    return mathnetnumericsbridge.Complex.op_Division(dividend.$clone(), divisor.$clone());
                },
                Divide$1: function (dividend, divisor) {
                    return mathnetnumericsbridge.Complex.op_Division$1(dividend.$clone(), divisor);
                },
                Divide$2: function (dividend, divisor) {
                    return mathnetnumericsbridge.Complex.op_Division$2(dividend, divisor.$clone());
                },
                Abs: function (value) {
                    return mathnetnumericsbridge.Complex.Hypot(value.m_real, value.m_imaginary);
                },
                Hypot: function (a, b) {

                    a = Math.abs(a);
                    b = Math.abs(b);

                    var small, large;
                    if (a < b) {
                        small = a;
                        large = b;
                    } else {
                        small = b;
                        large = a;
                    }

                    if (small === 0.0) {
                        return (large);
                    } else if ((large === Number.POSITIVE_INFINITY) && !isNaN(small)) {
                        return (Number.POSITIVE_INFINITY);
                    } else {
                        var ratio = small / large;
                        return (large * Math.sqrt(1.0 + ratio * ratio));
                    }

                },
                Log1P: function (x) {



                    var xp1 = 1.0 + x;
                    if (xp1 === 1.0) {
                        return x;
                    } else if (x < 0.75) {
                        return x * Bridge.Math.log(xp1) / (xp1 - 1.0);
                    } else {
                        return Bridge.Math.log(xp1);
                    }

                },
                Conjugate: function (value) {
                    return new mathnetnumericsbridge.Complex.$ctor1(value.m_real, -value.m_imaginary);
                },
                Reciprocal: function (value) {
                    if (value.m_real === 0 && value.m_imaginary === 0) {
                        return mathnetnumericsbridge.Complex.Zero.$clone();
                    }
                    return mathnetnumericsbridge.Complex.op_Division(mathnetnumericsbridge.Complex.One.$clone(), value.$clone());
                },
                Sin: function (value) {
                    var p = Math.exp(value.m_imaginary);
                    var q = 1.0 / p;
                    var sinh = (p - q) * 0.5;
                    var cosh = (p + q) * 0.5;
                    return new mathnetnumericsbridge.Complex.$ctor1(Math.sin(value.m_real) * cosh, Math.cos(value.m_real) * sinh);
                },
                Sinh: function (value) {
                    var sin = mathnetnumericsbridge.Complex.Sin(new mathnetnumericsbridge.Complex.$ctor1(-value.m_imaginary, value.m_real));
                    return new mathnetnumericsbridge.Complex.$ctor1(sin.m_imaginary, -sin.m_real);
                },
                Asin: function (value) {
                    var b = { }, bPrime = { }, v = { };
                    mathnetnumericsbridge.Complex.Asin_Internal(Math.abs(value.Real), Math.abs(value.Imaginary), b, bPrime, v);

                    var u;
                    if (bPrime.v < 0.0) {
                        u = Math.asin(b.v);
                    } else {
                        u = Math.atan(bPrime.v);
                    }

                    if (value.Real < 0.0) {
                        u = -u;
                    }
                    if (value.Imaginary < 0.0) {
                        v.v = -v.v;
                    }

                    return new mathnetnumericsbridge.Complex.$ctor1(u, v.v);
                },
                Cos: function (value) {
                    var p = Math.exp(value.m_imaginary);
                    var q = 1.0 / p;
                    var sinh = (p - q) * 0.5;
                    var cosh = (p + q) * 0.5;
                    return new mathnetnumericsbridge.Complex.$ctor1(Math.cos(value.m_real) * cosh, -Math.sin(value.m_real) * sinh);
                },
                Cosh: function (value) {
                    return mathnetnumericsbridge.Complex.Cos(new mathnetnumericsbridge.Complex.$ctor1(-value.m_imaginary, value.m_real));
                },
                Acos: function (value) {
                    var b = { }, bPrime = { }, v = { };
                    mathnetnumericsbridge.Complex.Asin_Internal(Math.abs(value.Real), Math.abs(value.Imaginary), b, bPrime, v);

                    var u;
                    if (bPrime.v < 0.0) {
                        u = Math.acos(b.v);
                    } else {
                        u = Math.atan(1.0 / bPrime.v);
                    }

                    if (value.Real < 0.0) {
                        u = Math.PI - u;
                    }
                    if (value.Imaginary > 0.0) {
                        v.v = -v.v;
                    }

                    return new mathnetnumericsbridge.Complex.$ctor1(u, v.v);
                },
                Tan: function (value) {


                    var x2 = 2.0 * value.m_real;
                    var y2 = 2.0 * value.m_imaginary;
                    var p = Math.exp(y2);
                    var q = 1.0 / p;
                    var cosh = (p + q) * 0.5;
                    if (Math.abs(value.m_imaginary) <= 4.0) {
                        var sinh = (p - q) * 0.5;
                        var D = Math.cos(x2) + cosh;
                        return new mathnetnumericsbridge.Complex.$ctor1(Math.sin(x2) / D, sinh / D);
                    } else {
                        var D1 = 1.0 + Math.cos(x2) / cosh;
                        return new mathnetnumericsbridge.Complex.$ctor1(Math.sin(x2) / cosh / D1, Bridge.Math.tanh(y2) / D1);
                    }
                },
                Tanh: function (value) {
                    var tan = mathnetnumericsbridge.Complex.Tan(new mathnetnumericsbridge.Complex.$ctor1(-value.m_imaginary, value.m_real));
                    return new mathnetnumericsbridge.Complex.$ctor1(tan.m_imaginary, -tan.m_real);
                },
                Atan: function (value) {
                    var two = new mathnetnumericsbridge.Complex.$ctor1(2.0, 0.0);
                    return mathnetnumericsbridge.Complex.op_Multiply((mathnetnumericsbridge.Complex.op_Division(mathnetnumericsbridge.Complex.ImaginaryOne.$clone(), two.$clone())), (mathnetnumericsbridge.Complex.op_Subtraction(mathnetnumericsbridge.Complex.Log(mathnetnumericsbridge.Complex.op_Subtraction(mathnetnumericsbridge.Complex.One.$clone(), mathnetnumericsbridge.Complex.op_Multiply(mathnetnumericsbridge.Complex.ImaginaryOne.$clone(), value.$clone()))), mathnetnumericsbridge.Complex.Log(mathnetnumericsbridge.Complex.op_Addition(mathnetnumericsbridge.Complex.One.$clone(), mathnetnumericsbridge.Complex.op_Multiply(mathnetnumericsbridge.Complex.ImaginaryOne.$clone(), value.$clone()))))));
                },
                Asin_Internal: function (x, y, b, bPrime, v) {








                    if ((x > mathnetnumericsbridge.Complex.s_asinOverflowThreshold) || (y > mathnetnumericsbridge.Complex.s_asinOverflowThreshold)) {
                        b.v = -1.0;
                        bPrime.v = x / y;

                        var small, big;
                        if (x < y) {
                            small = x;
                            big = y;
                        } else {
                            small = y;
                            big = x;
                        }
                        var ratio = small / big;
                        v.v = mathnetnumericsbridge.Complex.s_log2 + Bridge.Math.log(big) + 0.5 * mathnetnumericsbridge.Complex.Log1P(ratio * ratio);
                    } else {
                        var r = mathnetnumericsbridge.Complex.Hypot((x + 1.0), y);
                        var s = mathnetnumericsbridge.Complex.Hypot((x - 1.0), y);

                        var a = (r + s) * 0.5;
                        b.v = x / a;

                        if (b.v > 0.75) {
                            if (x <= 1.0) {
                                var amx = (y * y / (r + (x + 1.0)) + (s + (1.0 - x))) * 0.5;
                                bPrime.v = x / Math.sqrt((a + x) * amx);
                            } else {
                                var t = (1.0 / (r + (x + 1.0)) + 1.0 / (s + (x - 1.0))) * 0.5;
                                bPrime.v = x / y / Math.sqrt((a + x) * t);
                            }
                        } else {
                            bPrime.v = -1.0;
                        }

                        if (a < 1.5) {
                            if (x < 1.0) {
                                var t1 = (1.0 / (r + (x + 1.0)) + 1.0 / (s + (1.0 - x))) * 0.5;
                                var am1 = y * y * t1;
                                v.v = mathnetnumericsbridge.Complex.Log1P(am1 + y * Math.sqrt(t1 * (a + 1.0)));
                            } else {
                                var am11 = (y * y / (r + (x + 1.0)) + (s + (x - 1.0))) * 0.5;
                                v.v = mathnetnumericsbridge.Complex.Log1P(am11 + Math.sqrt(am11 * (a + 1.0)));
                            }
                        } else {
                            v.v = Bridge.Math.log(a + Math.sqrt((a - 1.0) * (a + 1.0)));
                        }
                    }
                },
                IsFinite: function (value) {
                    return isFinite(value.m_real) && isFinite(value.m_imaginary);
                },
                IsInfinity: function (value) {
                    return (Math.abs(value.m_real) === Number.POSITIVE_INFINITY) || (Math.abs(value.m_imaginary) === Number.POSITIVE_INFINITY);
                },
                IsNaN: function (value) {
                    return !mathnetnumericsbridge.Complex.IsInfinity(value.$clone()) && !mathnetnumericsbridge.Complex.IsFinite(value.$clone());
                },
                Log: function (value) {
                    return new mathnetnumericsbridge.Complex.$ctor1(Bridge.Math.log(mathnetnumericsbridge.Complex.Abs(value.$clone())), Math.atan2(value.m_imaginary, value.m_real));
                },
                Log$1: function (value, baseValue) {
                    return mathnetnumericsbridge.Complex.op_Division(mathnetnumericsbridge.Complex.Log(value.$clone()), mathnetnumericsbridge.Complex.Log(mathnetnumericsbridge.Complex.op_Implicit$1(baseValue)));
                },
                Log10: function (value) {
                    var tempLog = mathnetnumericsbridge.Complex.Log(value.$clone());
                    return mathnetnumericsbridge.Complex.Scale(tempLog.$clone(), mathnetnumericsbridge.Complex.InverseOfLog10);
                },
                Exp: function (value) {
                    var expReal = Math.exp(value.m_real);
                    var cosImaginary = expReal * Math.cos(value.m_imaginary);
                    var sinImaginary = expReal * Math.sin(value.m_imaginary);
                    return new mathnetnumericsbridge.Complex.$ctor1(cosImaginary, sinImaginary);
                },
                Sqrt: function (value) {

                    if (value.m_imaginary === 0.0) {
                        if (value.m_real < 0.0) {
                            return new mathnetnumericsbridge.Complex.$ctor1(0.0, Math.sqrt(-value.m_real));
                        } else {
                            return new mathnetnumericsbridge.Complex.$ctor1(Math.sqrt(value.m_real), 0.0);
                        }
                    } else {





                        var rescale = false;
                        if ((Math.abs(value.m_real) >= mathnetnumericsbridge.Complex.s_sqrtRescaleThreshold) || (Math.abs(value.m_imaginary) >= mathnetnumericsbridge.Complex.s_sqrtRescaleThreshold)) {
                            if ((Math.abs(value.m_imaginary) === Number.POSITIVE_INFINITY) && !isNaN(value.m_real)) {
                                return (new mathnetnumericsbridge.Complex.$ctor1(Number.POSITIVE_INFINITY, value.m_imaginary));
                            } else {
                                value.m_real *= 0.25;
                                value.m_imaginary *= 0.25;
                                rescale = true;
                            }
                        }

                        var x, y;
                        if (value.m_real >= 0.0) {
                            x = Math.sqrt((mathnetnumericsbridge.Complex.Hypot(value.m_real, value.m_imaginary) + value.m_real) * 0.5);
                            y = value.m_imaginary / (2.0 * x);
                        } else {
                            y = Math.sqrt((mathnetnumericsbridge.Complex.Hypot(value.m_real, value.m_imaginary) - value.m_real) * 0.5);
                            if (value.m_imaginary < 0.0) {
                                y = -y;
                            }
                            x = value.m_imaginary / (2.0 * y);
                        }

                        if (rescale) {
                            x *= 2.0;
                            y *= 2.0;
                        }

                        return new mathnetnumericsbridge.Complex.$ctor1(x, y);

                    }

                },
                Pow: function (value, power) {
                    if (mathnetnumericsbridge.Complex.op_Equality(power.$clone(), mathnetnumericsbridge.Complex.Zero.$clone())) {
                        return mathnetnumericsbridge.Complex.One.$clone();
                    }

                    if (mathnetnumericsbridge.Complex.op_Equality(value.$clone(), mathnetnumericsbridge.Complex.Zero.$clone())) {
                        return mathnetnumericsbridge.Complex.Zero.$clone();
                    }

                    var valueReal = value.m_real;
                    var valueImaginary = value.m_imaginary;
                    var powerReal = power.m_real;
                    var powerImaginary = power.m_imaginary;

                    var rho = mathnetnumericsbridge.Complex.Abs(value.$clone());
                    var theta = Math.atan2(valueImaginary, valueReal);
                    var newRho = powerReal * theta + powerImaginary * Bridge.Math.log(rho);

                    var t = Math.pow(rho, powerReal) * Math.pow(Math.E, -powerImaginary * theta);

                    return new mathnetnumericsbridge.Complex.$ctor1(t * Math.cos(newRho), t * Math.sin(newRho));
                },
                Pow$1: function (value, power) {
                    return mathnetnumericsbridge.Complex.Pow(value.$clone(), new mathnetnumericsbridge.Complex.$ctor1(power, 0));
                },
                Scale: function (value, factor) {
                    var realResult = factor * value.m_real;
                    var imaginaryResuilt = factor * value.m_imaginary;
                    return new mathnetnumericsbridge.Complex.$ctor1(realResult, imaginaryResuilt);
                },
                op_UnaryNegation: function (value) {
                    return new mathnetnumericsbridge.Complex.$ctor1(-value.m_real, -value.m_imaginary);
                },
                op_Addition: function (left, right) {
                    return new mathnetnumericsbridge.Complex.$ctor1(left.m_real + right.m_real, left.m_imaginary + right.m_imaginary);
                },
                op_Addition$1: function (left, right) {
                    return new mathnetnumericsbridge.Complex.$ctor1(left.m_real + right, left.m_imaginary);
                },
                op_Addition$2: function (left, right) {
                    return new mathnetnumericsbridge.Complex.$ctor1(left + right.m_real, right.m_imaginary);
                },
                op_Subtraction: function (left, right) {
                    return new mathnetnumericsbridge.Complex.$ctor1(left.m_real - right.m_real, left.m_imaginary - right.m_imaginary);
                },
                op_Subtraction$1: function (left, right) {
                    return new mathnetnumericsbridge.Complex.$ctor1(left.m_real - right, left.m_imaginary);
                },
                op_Subtraction$2: function (left, right) {
                    return new mathnetnumericsbridge.Complex.$ctor1(left - right.m_real, -right.m_imaginary);
                },
                op_Multiply: function (left, right) {
                    var result_realpart = (left.m_real * right.m_real) - (left.m_imaginary * right.m_imaginary);
                    var result_imaginarypart = (left.m_imaginary * right.m_real) + (left.m_real * right.m_imaginary);
                    return new mathnetnumericsbridge.Complex.$ctor1(result_realpart, result_imaginarypart);
                },
                op_Multiply$1: function (left, right) {
                    if (!isFinite(left.m_real)) {
                        if (!isFinite(left.m_imaginary)) {
                            return new mathnetnumericsbridge.Complex.$ctor1(Number.NaN, Number.NaN);
                        }

                        return new mathnetnumericsbridge.Complex.$ctor1(left.m_real * right, Number.NaN);
                    }

                    if (!isFinite(left.m_imaginary)) {
                        return new mathnetnumericsbridge.Complex.$ctor1(Number.NaN, left.m_imaginary * right);
                    }

                    return new mathnetnumericsbridge.Complex.$ctor1(left.m_real * right, left.m_imaginary * right);
                },
                op_Multiply$2: function (left, right) {
                    if (!isFinite(right.m_real)) {
                        if (!isFinite(right.m_imaginary)) {
                            return new mathnetnumericsbridge.Complex.$ctor1(Number.NaN, Number.NaN);
                        }

                        return new mathnetnumericsbridge.Complex.$ctor1(left * right.m_real, Number.NaN);
                    }

                    if (!isFinite(right.m_imaginary)) {
                        return new mathnetnumericsbridge.Complex.$ctor1(Number.NaN, left * right.m_imaginary);
                    }

                    return new mathnetnumericsbridge.Complex.$ctor1(left * right.m_real, left * right.m_imaginary);
                },
                op_Division: function (left, right) {
                    var a = left.m_real;
                    var b = left.m_imaginary;
                    var c = right.m_real;
                    var d = right.m_imaginary;

                    if (Math.abs(d) < Math.abs(c)) {
                        var doc = d / c;
                        return new mathnetnumericsbridge.Complex.$ctor1((a + b * doc) / (c + d * doc), (b - a * doc) / (c + d * doc));
                    } else {
                        var cod = c / d;
                        return new mathnetnumericsbridge.Complex.$ctor1((b + a * cod) / (d + c * cod), (-a + b * cod) / (d + c * cod));
                    }
                },
                op_Division$1: function (left, right) {
                    if (right === 0) {
                        return new mathnetnumericsbridge.Complex.$ctor1(Number.NaN, Number.NaN);
                    }

                    if (!isFinite(left.m_real)) {
                        if (!isFinite(left.m_imaginary)) {
                            return new mathnetnumericsbridge.Complex.$ctor1(Number.NaN, Number.NaN);
                        }

                        return new mathnetnumericsbridge.Complex.$ctor1(left.m_real / right, Number.NaN);
                    }

                    if (!isFinite(left.m_imaginary)) {
                        return new mathnetnumericsbridge.Complex.$ctor1(Number.NaN, left.m_imaginary / right);
                    }

                    return new mathnetnumericsbridge.Complex.$ctor1(left.m_real / right, left.m_imaginary / right);
                },
                op_Division$2: function (left, right) {
                    var a = left;
                    var c = right.m_real;
                    var d = right.m_imaginary;

                    if (Math.abs(d) < Math.abs(c)) {
                        var doc = d / c;
                        return new mathnetnumericsbridge.Complex.$ctor1(a / (c + d * doc), (-a * doc) / (c + d * doc));
                    } else {
                        var cod = c / d;
                        return new mathnetnumericsbridge.Complex.$ctor1(a * cod / (d + c * cod), -a / (d + c * cod));
                    }
                },
                op_Equality: function (left, right) {
                    return left.m_real === right.m_real && left.m_imaginary === right.m_imaginary;
                },
                op_Inequality: function (left, right) {
                    return left.m_real !== right.m_real || left.m_imaginary !== right.m_imaginary;
                },
                op_Implicit$2: function (value) {
                    return new mathnetnumericsbridge.Complex.$ctor1(value, 0.0);
                },
                op_Implicit$3: function (value) {
                    return new mathnetnumericsbridge.Complex.$ctor1(value, 0.0);
                },
                op_Implicit$4: function (value) {
                    return new mathnetnumericsbridge.Complex.$ctor1(System.Int64.toNumber(value), 0.0);
                },
                op_Implicit$7: function (value) {
                    return new mathnetnumericsbridge.Complex.$ctor1(value, 0.0);
                },
                op_Implicit$8: function (value) {
                    return new mathnetnumericsbridge.Complex.$ctor1(value, 0.0);
                },
                op_Implicit$9: function (value) {
                    return new mathnetnumericsbridge.Complex.$ctor1(System.Int64.toNumber(value), 0.0);
                },
                op_Implicit$5: function (value) {
                    return new mathnetnumericsbridge.Complex.$ctor1(value, 0.0);
                },
                op_Implicit: function (value) {
                    return new mathnetnumericsbridge.Complex.$ctor1(value, 0.0);
                },
                op_Implicit$6: function (value) {
                    return new mathnetnumericsbridge.Complex.$ctor1(value, 0.0);
                },
                op_Implicit$1: function (value) {
                    return new mathnetnumericsbridge.Complex.$ctor1(value, 0.0);
                },
                op_Explicit: function (value) {
                    return new mathnetnumericsbridge.Complex.$ctor1(System.Decimal.toFloat(value), 0.0);
                },
                getDefaultValue: function () { return new mathnetnumericsbridge.Complex(); }
            }
        },
        fields: {
            m_real: 0,
            m_imaginary: 0
        },
        props: {
            Real: {
                get: function () {
                    return this.m_real;
                }
            },
            Imaginary: {
                get: function () {
                    return this.m_imaginary;
                }
            },
            Magnitude: {
                get: function () {
                    return mathnetnumericsbridge.Complex.Abs(this);
                }
            },
            Phase: {
                get: function () {
                    return Math.atan2(this.m_imaginary, this.m_real);
                }
            }
        },
        alias: [
            "equalsT", "System$IEquatable$1$mathnetnumericsbridge$Complex$equalsT",
            "format", "System$IFormattable$format"
        ],
        ctors: {
            $ctor1: function (real, imaginary) {
                this.$initialize();
                this.m_real = real;
                this.m_imaginary = imaginary;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            equalsT: function (value) {
                return this.m_real === value.m_real && this.m_imaginary === value.m_imaginary;
            },
            getHashCode: function () {
                var n1 = 99999997;
                var realHash = System.Double.getHashCode(this.m_real) % n1;
                var imaginaryHash = System.Double.getHashCode(this.m_imaginary);
                var finalHash = Bridge.Int.clip32(Math.pow(realHash, imaginaryHash));
                return finalHash;
            },
            toString: function () {
                return System.String.format("({0}, {1})", Bridge.box(this.m_real, System.Double, System.Double.format, System.Double.getHashCode), Bridge.box(this.m_imaginary, System.Double, System.Double.format, System.Double.getHashCode));
            },
            format: function (stringin, provider) {
                return System.String.formatProvider(provider, "({0}, {1})", Bridge.box(this.m_real, System.Double, System.Double.format, System.Double.getHashCode), Bridge.box(this.m_imaginary, System.Double, System.Double.format, System.Double.getHashCode));
            },
            $clone: function (to) {
                var s = to || new mathnetnumericsbridge.Complex();
                s.m_real = this.m_real;
                s.m_imaginary = this.m_imaginary;
                return s;
            }
        }
    });

    Bridge.define("mathnetnumericsbridge.Complex32", {
        inherits: function () { return [System.IEquatable$1(mathnetnumericsbridge.Complex32),System.IFormattable]; },
        $kind: "struct",
        statics: {
            fields: {
                InverseOfLog10: 0,
                Zero: null,
                One: null,
                ImaginaryOne: null,
                NaN: null,
                Infinity: null,
                s_sqrtRescaleThreshold: 0,
                s_asinOverflowThreshold: 0,
                s_log2: 0
            },
            ctors: {
                init: function () {
                    this.Zero = new mathnetnumericsbridge.Complex32();
                    this.One = new mathnetnumericsbridge.Complex32();
                    this.ImaginaryOne = new mathnetnumericsbridge.Complex32();
                    this.NaN = new mathnetnumericsbridge.Complex32();
                    this.Infinity = new mathnetnumericsbridge.Complex32();
                    this.InverseOfLog10 = 0.4342945;
                    this.Zero = new mathnetnumericsbridge.Complex32.$ctor1(0.0, 0.0);
                    this.One = new mathnetnumericsbridge.Complex32.$ctor1(1.0, 0.0);
                    this.ImaginaryOne = new mathnetnumericsbridge.Complex32.$ctor1(0.0, 1.0);
                    this.NaN = new mathnetnumericsbridge.Complex32.$ctor1(Number.NaN, Number.NaN);
                    this.Infinity = new mathnetnumericsbridge.Complex32.$ctor1(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
                    this.s_sqrtRescaleThreshold = 3.40282347E+38 / (Math.sqrt(2.0) + 1.0);
                    this.s_asinOverflowThreshold = Math.sqrt(3.40282347E+38) / 2.0;
                    this.s_log2 = Bridge.Math.log(2.0);
                }
            },
            methods: {
                FromPolarCoordinates: function (magnitude, phase) {
                    return new mathnetnumericsbridge.Complex32.$ctor1(magnitude * Math.cos(phase), magnitude * Math.sin(phase));
                },
                Negate: function (value) {
                    return mathnetnumericsbridge.Complex32.op_UnaryNegation(value.$clone());
                },
                Add: function (left, right) {
                    return mathnetnumericsbridge.Complex32.op_Addition(left.$clone(), right.$clone());
                },
                Add$1: function (left, right) {
                    return mathnetnumericsbridge.Complex32.op_Addition$1(left.$clone(), right);
                },
                Add$2: function (left, right) {
                    return mathnetnumericsbridge.Complex32.op_Addition$2(left, right.$clone());
                },
                Subtract: function (left, right) {
                    return mathnetnumericsbridge.Complex32.op_Subtraction(left.$clone(), right.$clone());
                },
                Subtract$1: function (left, right) {
                    return mathnetnumericsbridge.Complex32.op_Subtraction$1(left.$clone(), right);
                },
                Subtract$2: function (left, right) {
                    return mathnetnumericsbridge.Complex32.op_Subtraction$2(left, right.$clone());
                },
                Multiply: function (left, right) {
                    return mathnetnumericsbridge.Complex32.op_Multiply(left.$clone(), right.$clone());
                },
                Multiply$1: function (left, right) {
                    return mathnetnumericsbridge.Complex32.op_Multiply$1(left.$clone(), right);
                },
                Multiply$2: function (left, right) {
                    return mathnetnumericsbridge.Complex32.op_Multiply$2(left, right.$clone());
                },
                Divide: function (dividend, divisor) {
                    return mathnetnumericsbridge.Complex32.op_Division(dividend.$clone(), divisor.$clone());
                },
                Divide$1: function (dividend, divisor) {
                    return mathnetnumericsbridge.Complex32.op_Division$1(dividend.$clone(), divisor);
                },
                Divide$2: function (dividend, divisor) {
                    return mathnetnumericsbridge.Complex32.op_Division$2(dividend, divisor.$clone());
                },
                Abs: function (value) {
                    return mathnetnumericsbridge.Complex32.Hypot(value.m_real, value.m_imaginary);
                },
                Hypot: function (a, b) {

                    a = Math.abs(a);
                    b = Math.abs(b);

                    var small, large;
                    if (a < b) {
                        small = a;
                        large = b;
                    } else {
                        small = b;
                        large = a;
                    }

                    if (small === 0.0) {
                        return (large);
                    } else if ((large === Number.POSITIVE_INFINITY) && !isNaN(small)) {
                        return (Number.POSITIVE_INFINITY);
                    } else {
                        var ratio = small / large;
                        return large * Math.sqrt(1.0 + ratio * ratio);
                    }

                },
                Log1P: function (x) {



                    var xp1 = 1.0 + x;
                    if (xp1 === 1.0) {
                        return x;
                    } else if (x < 0.75) {
                        return x * Bridge.Math.log(xp1) / (xp1 - 1.0);
                    } else {
                        return Bridge.Math.log(xp1);
                    }

                },
                Conjugate: function (value) {
                    return new mathnetnumericsbridge.Complex32.$ctor1(value.m_real, -value.m_imaginary);
                },
                Reciprocal: function (value) {
                    if (value.m_real === 0 && value.m_imaginary === 0) {
                        return mathnetnumericsbridge.Complex32.Zero.$clone();
                    }
                    return mathnetnumericsbridge.Complex32.op_Division(mathnetnumericsbridge.Complex32.One.$clone(), value.$clone());
                },
                Sin: function (value) {
                    var p = Math.exp(value.m_imaginary);
                    var q = 1.0 / p;
                    var sinh = (p - q) * 0.5;
                    var cosh = (p + q) * 0.5;
                    return new mathnetnumericsbridge.Complex32.$ctor1(Math.sin(value.m_real) * cosh, Math.cos(value.m_real) * sinh);
                },
                Sinh: function (value) {
                    var sin = mathnetnumericsbridge.Complex32.Sin(new mathnetnumericsbridge.Complex32.$ctor1(-value.m_imaginary, value.m_real));
                    return new mathnetnumericsbridge.Complex32.$ctor1(sin.m_imaginary, -sin.m_real);
                },
                Asin: function (value) {
                    var b = { }, bPrime = { }, v = { };
                    mathnetnumericsbridge.Complex32.Asin_Internal(Math.abs(value.Real), Math.abs(value.Imaginary), b, bPrime, v);

                    var u;
                    if (bPrime.v < 0.0) {
                        u = Math.asin(b.v);
                    } else {
                        u = Math.atan(bPrime.v);
                    }

                    if (value.Real < 0.0) {
                        u = -u;
                    }
                    if (value.Imaginary < 0.0) {
                        v.v = -v.v;
                    }

                    return new mathnetnumericsbridge.Complex32.$ctor1(u, v.v);
                },
                Cos: function (value) {
                    var p = Math.exp(value.m_imaginary);
                    var q = 1.0 / p;
                    var sinh = (p - q) * 0.5;
                    var cosh = (p + q) * 0.5;
                    return new mathnetnumericsbridge.Complex32.$ctor1(Math.cos(value.m_real) * cosh, -Math.sin(value.m_real) * sinh);
                },
                Cosh: function (value) {
                    return mathnetnumericsbridge.Complex32.Cos(new mathnetnumericsbridge.Complex32.$ctor1(-value.m_imaginary, value.m_real));
                },
                Acos: function (value) {
                    var b = { }, bPrime = { }, v = { };
                    mathnetnumericsbridge.Complex32.Asin_Internal(Math.abs(value.Real), Math.abs(value.Imaginary), b, bPrime, v);

                    var u;
                    if (bPrime.v < 0.0) {
                        u = Math.acos(b.v);
                    } else {
                        u = Math.atan(1.0 / bPrime.v);
                    }

                    if (value.Real < 0.0) {
                        u = 3.14159274 - u;
                    }
                    if (value.Imaginary > 0.0) {
                        v.v = -v.v;
                    }

                    return new mathnetnumericsbridge.Complex32.$ctor1(u, v.v);
                },
                Tan: function (value) {


                    var x2 = 2.0 * value.m_real;
                    var y2 = 2.0 * value.m_imaginary;
                    var p = Math.exp(y2);
                    var q = 1.0 / p;
                    var cosh = (p + q) * 0.5;
                    if (Math.abs(value.m_imaginary) <= 4.0) {
                        var sinh = (p - q) * 0.5;
                        var D = Math.cos(x2) + cosh;
                        return new mathnetnumericsbridge.Complex32.$ctor1(Math.sin(x2) / D, sinh / D);
                    } else {
                        var D1 = 1.0 + Math.cos(x2) / cosh;
                        return new mathnetnumericsbridge.Complex32.$ctor1(Math.sin(x2) / cosh / D1, Bridge.Math.tanh(y2) / D1);
                    }
                },
                Tanh: function (value) {
                    var tan = mathnetnumericsbridge.Complex32.Tan(new mathnetnumericsbridge.Complex32.$ctor1(-value.m_imaginary, value.m_real));
                    return new mathnetnumericsbridge.Complex32.$ctor1(tan.m_imaginary, -tan.m_real);
                },
                Atan: function (value) {
                    var two = new mathnetnumericsbridge.Complex32.$ctor1(2.0, 0.0);
                    return mathnetnumericsbridge.Complex32.op_Multiply((mathnetnumericsbridge.Complex32.op_Division(mathnetnumericsbridge.Complex32.ImaginaryOne.$clone(), two.$clone())), (mathnetnumericsbridge.Complex32.op_Subtraction(mathnetnumericsbridge.Complex32.Log(mathnetnumericsbridge.Complex32.op_Subtraction(mathnetnumericsbridge.Complex32.One.$clone(), mathnetnumericsbridge.Complex32.op_Multiply(mathnetnumericsbridge.Complex32.ImaginaryOne.$clone(), value.$clone()))), mathnetnumericsbridge.Complex32.Log(mathnetnumericsbridge.Complex32.op_Addition(mathnetnumericsbridge.Complex32.One.$clone(), mathnetnumericsbridge.Complex32.op_Multiply(mathnetnumericsbridge.Complex32.ImaginaryOne.$clone(), value.$clone()))))));
                },
                Asin_Internal: function (x, y, b, bPrime, v) {








                    if ((x > mathnetnumericsbridge.Complex32.s_asinOverflowThreshold) || (y > mathnetnumericsbridge.Complex32.s_asinOverflowThreshold)) {
                        b.v = -1.0;
                        bPrime.v = x / y;

                        var small, big;
                        if (x < y) {
                            small = x;
                            big = y;
                        } else {
                            small = y;
                            big = x;
                        }
                        var ratio = small / big;
                        v.v = mathnetnumericsbridge.Complex32.s_log2 + Bridge.Math.log(big) + 0.5 * mathnetnumericsbridge.Complex32.Log1P(ratio * ratio);
                    } else {
                        var r = mathnetnumericsbridge.Complex32.Hypot((x + 1.0), y);
                        var s = mathnetnumericsbridge.Complex32.Hypot((x - 1.0), y);

                        var a = (r + s) * 0.5;
                        b.v = x / a;

                        if (b.v > 0.75) {
                            if (x <= 1.0) {
                                var amx = (y * y / (r + (x + 1.0)) + (s + (1.0 - x))) * 0.5;
                                bPrime.v = x / Math.sqrt((a + x) * amx);
                            } else {
                                var t = (1.0 / (r + (x + 1.0)) + 1.0 / (s + (x - 1.0))) * 0.5;
                                bPrime.v = x / y / Math.sqrt((a + x) * t);
                            }
                        } else {
                            bPrime.v = -1.0;
                        }

                        if (a < 1.5) {
                            if (x < 1.0) {
                                var t1 = (1.0 / (r + (x + 1.0)) + 1.0 / (s + (1.0 - x))) * 0.5;
                                var am1 = y * y * t1;
                                v.v = mathnetnumericsbridge.Complex32.Log1P(am1 + y * Math.sqrt(t1 * (a + 1.0)));
                            } else {
                                var am11 = (y * y / (r + (x + 1.0)) + (s + (x - 1.0))) * 0.5;
                                v.v = mathnetnumericsbridge.Complex32.Log1P(am11 + Math.sqrt(am11 * (a + 1.0)));
                            }
                        } else {
                            v.v = Bridge.Math.log(a + Math.sqrt((a - 1.0) * (a + 1.0)));
                        }
                    }
                },
                IsFinite: function (value) {
                    return isFinite(value.m_real) && isFinite(value.m_imaginary);
                },
                IsInfinity: function (value) {
                    return (Math.abs(value.m_real) === Number.POSITIVE_INFINITY) || (Math.abs(value.m_imaginary) === Number.POSITIVE_INFINITY);
                },
                IsNaN: function (value) {
                    return !mathnetnumericsbridge.Complex32.IsInfinity(value.$clone()) && !mathnetnumericsbridge.Complex32.IsFinite(value.$clone());
                },
                Log: function (value) {
                    return new mathnetnumericsbridge.Complex32.$ctor1(Bridge.Math.log(mathnetnumericsbridge.Complex32.Abs(value.$clone())), Math.atan2(value.m_imaginary, value.m_real));
                },
                Log$1: function (value, baseValue) {
                    return mathnetnumericsbridge.Complex32.op_Division(mathnetnumericsbridge.Complex32.Log(value.$clone()), mathnetnumericsbridge.Complex32.Log(mathnetnumericsbridge.Complex32.op_Implicit$5(baseValue)));
                },
                Log10: function (value) {
                    var tempLog = mathnetnumericsbridge.Complex32.Log(value.$clone());
                    return mathnetnumericsbridge.Complex32.Scale(tempLog.$clone(), mathnetnumericsbridge.Complex32.InverseOfLog10);
                },
                Exp: function (value) {
                    var expReal = Math.exp(value.m_real);
                    var cosImaginary = expReal * Math.cos(value.m_imaginary);
                    var sinImaginary = expReal * Math.sin(value.m_imaginary);
                    return new mathnetnumericsbridge.Complex32.$ctor1(cosImaginary, sinImaginary);
                },
                Sqrt: function (value) {

                    if (value.m_imaginary === 0.0) {
                        if (value.m_real < 0.0) {
                            return new mathnetnumericsbridge.Complex32.$ctor1(0.0, Math.sqrt(-value.m_real));
                        } else {
                            return new mathnetnumericsbridge.Complex32.$ctor1(Math.sqrt(value.m_real), 0.0);
                        }
                    } else {





                        var rescale = false;
                        if ((Math.abs(value.m_real) >= mathnetnumericsbridge.Complex32.s_sqrtRescaleThreshold) || (Math.abs(value.m_imaginary) >= mathnetnumericsbridge.Complex32.s_sqrtRescaleThreshold)) {
                            if ((Math.abs(value.m_imaginary) === Number.POSITIVE_INFINITY) && !isNaN(value.m_real)) {
                                return (new mathnetnumericsbridge.Complex32.$ctor1(Number.POSITIVE_INFINITY, value.m_imaginary));
                            } else {
                                value.m_real *= 0.25;
                                value.m_imaginary *= 0.25;
                                rescale = true;
                            }
                        }

                        var x, y;
                        if (value.m_real >= 0.0) {
                            x = Math.sqrt((mathnetnumericsbridge.Complex32.Hypot(value.m_real, value.m_imaginary) + value.m_real) * 0.5);
                            y = value.m_imaginary / (2.0 * x);
                        } else {
                            y = Math.sqrt((mathnetnumericsbridge.Complex32.Hypot(value.m_real, value.m_imaginary) - value.m_real) * 0.5);
                            if (value.m_imaginary < 0.0) {
                                y = -y;
                            }
                            x = value.m_imaginary / (2.0 * y);
                        }

                        if (rescale) {
                            x *= 2.0;
                            y *= 2.0;
                        }

                        return new mathnetnumericsbridge.Complex32.$ctor1(x, y);

                    }

                },
                Pow: function (value, power) {
                    if (mathnetnumericsbridge.Complex32.op_Equality(power.$clone(), mathnetnumericsbridge.Complex32.Zero.$clone())) {
                        return mathnetnumericsbridge.Complex32.One.$clone();
                    }

                    if (mathnetnumericsbridge.Complex32.op_Equality(value.$clone(), mathnetnumericsbridge.Complex32.Zero.$clone())) {
                        return mathnetnumericsbridge.Complex32.Zero.$clone();
                    }

                    var valueReal = value.m_real;
                    var valueImaginary = value.m_imaginary;
                    var powerReal = power.m_real;
                    var powerImaginary = power.m_imaginary;

                    var rho = mathnetnumericsbridge.Complex32.Abs(value.$clone());
                    var theta = Math.atan2(valueImaginary, valueReal);
                    var newRho = powerReal * theta + powerImaginary * Bridge.Math.log(rho);

                    var t = Math.pow(rho, powerReal) * Math.pow(Math.E, -powerImaginary * theta);

                    return new mathnetnumericsbridge.Complex32.$ctor1(t * Math.cos(newRho), t * Math.sin(newRho));
                },
                Pow$1: function (value, power) {
                    return mathnetnumericsbridge.Complex32.Pow(value.$clone(), new mathnetnumericsbridge.Complex32.$ctor1(power, 0));
                },
                Scale: function (value, factor) {
                    var realResult = factor * value.m_real;
                    var imaginaryResuilt = factor * value.m_imaginary;
                    return new mathnetnumericsbridge.Complex32.$ctor1(realResult, imaginaryResuilt);
                },
                op_UnaryNegation: function (value) {
                    return new mathnetnumericsbridge.Complex32.$ctor1(-value.m_real, -value.m_imaginary);
                },
                op_Addition: function (left, right) {
                    return new mathnetnumericsbridge.Complex32.$ctor1(left.m_real + right.m_real, left.m_imaginary + right.m_imaginary);
                },
                op_Addition$1: function (left, right) {
                    return new mathnetnumericsbridge.Complex32.$ctor1(left.m_real + right, left.m_imaginary);
                },
                op_Addition$2: function (left, right) {
                    return new mathnetnumericsbridge.Complex32.$ctor1(left + right.m_real, right.m_imaginary);
                },
                op_Subtraction: function (left, right) {
                    return new mathnetnumericsbridge.Complex32.$ctor1(left.m_real - right.m_real, left.m_imaginary - right.m_imaginary);
                },
                op_Subtraction$1: function (left, right) {
                    return new mathnetnumericsbridge.Complex32.$ctor1(left.m_real - right, left.m_imaginary);
                },
                op_Subtraction$2: function (left, right) {
                    return new mathnetnumericsbridge.Complex32.$ctor1(left - right.m_real, -right.m_imaginary);
                },
                op_Multiply: function (left, right) {
                    var result_realpart = (left.m_real * right.m_real) - (left.m_imaginary * right.m_imaginary);
                    var result_imaginarypart = (left.m_imaginary * right.m_real) + (left.m_real * right.m_imaginary);
                    return new mathnetnumericsbridge.Complex32.$ctor1(result_realpart, result_imaginarypart);
                },
                op_Multiply$1: function (left, right) {
                    if (!isFinite(left.m_real)) {
                        if (!isFinite(left.m_imaginary)) {
                            return new mathnetnumericsbridge.Complex32.$ctor1(Number.NaN, Number.NaN);
                        }

                        return new mathnetnumericsbridge.Complex32.$ctor1(left.m_real * right, Number.NaN);
                    }

                    if (!isFinite(left.m_imaginary)) {
                        return new mathnetnumericsbridge.Complex32.$ctor1(Number.NaN, left.m_imaginary * right);
                    }

                    return new mathnetnumericsbridge.Complex32.$ctor1(left.m_real * right, left.m_imaginary * right);
                },
                op_Multiply$2: function (left, right) {
                    if (!isFinite(right.m_real)) {
                        if (!isFinite(right.m_imaginary)) {
                            return new mathnetnumericsbridge.Complex32.$ctor1(Number.NaN, Number.NaN);
                        }

                        return new mathnetnumericsbridge.Complex32.$ctor1(left * right.m_real, Number.NaN);
                    }

                    if (!isFinite(right.m_imaginary)) {
                        return new mathnetnumericsbridge.Complex32.$ctor1(Number.NaN, left * right.m_imaginary);
                    }

                    return new mathnetnumericsbridge.Complex32.$ctor1(left * right.m_real, left * right.m_imaginary);
                },
                op_Division: function (left, right) {
                    var a = left.m_real;
                    var b = left.m_imaginary;
                    var c = right.m_real;
                    var d = right.m_imaginary;

                    if (Math.abs(d) < Math.abs(c)) {
                        var doc = d / c;
                        return new mathnetnumericsbridge.Complex32.$ctor1((a + b * doc) / (c + d * doc), (b - a * doc) / (c + d * doc));
                    } else {
                        var cod = c / d;
                        return new mathnetnumericsbridge.Complex32.$ctor1((b + a * cod) / (d + c * cod), (-a + b * cod) / (d + c * cod));
                    }
                },
                op_Division$1: function (left, right) {
                    if (right === 0) {
                        return new mathnetnumericsbridge.Complex32.$ctor1(Number.NaN, Number.NaN);
                    }

                    if (!isFinite(left.m_real)) {
                        if (!isFinite(left.m_imaginary)) {
                            return new mathnetnumericsbridge.Complex32.$ctor1(Number.NaN, Number.NaN);
                        }

                        return new mathnetnumericsbridge.Complex32.$ctor1(left.m_real / right, Number.NaN);
                    }

                    if (!isFinite(left.m_imaginary)) {
                        return new mathnetnumericsbridge.Complex32.$ctor1(Number.NaN, left.m_imaginary / right);
                    }

                    return new mathnetnumericsbridge.Complex32.$ctor1(left.m_real / right, left.m_imaginary / right);
                },
                op_Division$2: function (left, right) {
                    var a = left;
                    var c = right.m_real;
                    var d = right.m_imaginary;

                    if (Math.abs(d) < Math.abs(c)) {
                        var doc = d / c;
                        return new mathnetnumericsbridge.Complex32.$ctor1(a / (c + d * doc), (-a * doc) / (c + d * doc));
                    } else {
                        var cod = c / d;
                        return new mathnetnumericsbridge.Complex32.$ctor1(a * cod / (d + c * cod), -a / (d + c * cod));
                    }
                },
                op_Equality: function (left, right) {
                    return left.m_real === right.m_real && left.m_imaginary === right.m_imaginary;
                },
                op_Inequality: function (left, right) {
                    return left.m_real !== right.m_real || left.m_imaginary !== right.m_imaginary;
                },
                op_Implicit$1: function (value) {
                    return new mathnetnumericsbridge.Complex32.$ctor1(value, 0.0);
                },
                op_Implicit$2: function (value) {
                    return new mathnetnumericsbridge.Complex32.$ctor1(value, 0.0);
                },
                op_Implicit$3: function (value) {
                    return new mathnetnumericsbridge.Complex32.$ctor1(System.Int64.toNumber(value), 0.0);
                },
                op_Implicit$6: function (value) {
                    return new mathnetnumericsbridge.Complex32.$ctor1(value, 0.0);
                },
                op_Implicit$7: function (value) {
                    return new mathnetnumericsbridge.Complex32.$ctor1(value, 0.0);
                },
                op_Implicit$8: function (value) {
                    return new mathnetnumericsbridge.Complex32.$ctor1(System.Int64.toNumber(value), 0.0);
                },
                op_Implicit$4: function (value) {
                    return new mathnetnumericsbridge.Complex32.$ctor1(value, 0.0);
                },
                op_Implicit: function (value) {
                    return new mathnetnumericsbridge.Complex32.$ctor1(value, 0.0);
                },
                op_Implicit$5: function (value) {
                    return new mathnetnumericsbridge.Complex32.$ctor1(value, 0.0);
                },
                op_Explicit: function (value) {
                    return new mathnetnumericsbridge.Complex32.$ctor1(System.Decimal.toFloat(value), 0.0);
                },
                getDefaultValue: function () { return new mathnetnumericsbridge.Complex32(); }
            }
        },
        fields: {
            m_real: 0,
            m_imaginary: 0
        },
        props: {
            Real: {
                get: function () {
                    return this.m_real;
                }
            },
            Imaginary: {
                get: function () {
                    return this.m_imaginary;
                }
            },
            Magnitude: {
                get: function () {
                    return mathnetnumericsbridge.Complex32.Abs(this);
                }
            },
            Phase: {
                get: function () {
                    return Math.atan2(this.m_imaginary, this.m_real);
                }
            }
        },
        alias: [
            "equalsT", "System$IEquatable$1$mathnetnumericsbridge$Complex32$equalsT",
            "format", "System$IFormattable$format"
        ],
        ctors: {
            $ctor1: function (real, imaginary) {
                this.$initialize();
                this.m_real = real;
                this.m_imaginary = imaginary;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            IsZero: function (value) {
                if (value.Real === 0.0 && value.Imaginary === 0.0) {
                    return true;
                }
                return false;
            },
            equalsT: function (value) {
                return this.m_real === value.m_real && this.m_imaginary === value.m_imaginary;
            },
            getHashCode: function () {
                var n1 = 99999997;
                var realHash = System.Single.getHashCode(this.m_real) % n1;
                var imaginaryHash = System.Single.getHashCode(this.m_imaginary);
                var finalHash = realHash ^ imaginaryHash;
                return finalHash;
            },
            toString: function () {
                return System.String.format("({0}, {1})", Bridge.box(this.m_real, System.Single, System.Single.format, System.Single.getHashCode), Bridge.box(this.m_imaginary, System.Single, System.Single.format, System.Single.getHashCode));
            },
            format: function (stringin, provider) {
                return System.String.formatProvider(provider, "({0}, {1})", Bridge.box(this.m_real, System.Single, System.Single.format, System.Single.getHashCode), Bridge.box(this.m_imaginary, System.Single, System.Single.format, System.Single.getHashCode));
            },
            $clone: function (to) {
                var s = to || new mathnetnumericsbridge.Complex32();
                s.m_real = this.m_real;
                s.m_imaginary = this.m_imaginary;
                return s;
            }
        }
    });

    /** @namespace MathNet.Numerics.LinearAlgebra.Double */

    /**
     * <pre><code>double</code></pre> version of the {@link } class.
     *
     * @abstract
     * @public
     * @class MathNet.Numerics.LinearAlgebra.Double.Matrix
     * @augments MathNet.Numerics.LinearAlgebra.Matrix$1
     */
    Bridge.define("MathNet.Numerics.LinearAlgebra.Double.Matrix", {
        inherits: [MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double)],
        fields: {
            v_builder$1: null,
            m_builder$1: null
        },
        ctors: {
            init: function () {
                this.v_builder$1 = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(System.Double).Vector;
                this.m_builder$1 = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(System.Double).Matrix;
            },
            /**
             * Initializes a new instance of the Matrix class.
             *
             * @instance
             * @protected
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1}    storage
             * @return  {void}
             */
            ctor: function (storage) {
                this.$initialize();
                MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double).ctor.call(this, storage);
            }
        },
        methods: {
            /**
             * Set all values whose absolute value is smaller than the threshold to zero.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {number}    threshold
             * @return  {void}
             */
            CoerceZero: function (threshold) {
                this.MapInplace(function (x) {
                    return Math.abs(x) < threshold ? 0.0 : x;
                }, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            /**
             * Returns the conjugate transpose of this matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}        The conjugate transpose of this matrix.
             */
            ConjugateTranspose: function () {
                return this.Transpose();
            },
            /**
             * Puts the conjugate transpose of this matrix into the result matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result
             * @return  {void}
             */
            ConjugateTranspose$1: function (result) {
                this.Transpose$1(result);
            },
            /**
             * Complex conjugates each element of this matrix and place the results into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The result of the conjugation.
             * @return  {void}
             */
            DoConjugate: function (result) {
                if (Bridge.referenceEquals(this, result)) {
                    return;
                }

                this.CopyTo(result);
            },
            /**
             * Negate each element of this matrix and place the results into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The result of the negation.
             * @return  {void}
             */
            DoNegate: function (result) {
                this.Map$1(function (x) {
                    return -x;
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            /**
             * Add a scalar to each element of the matrix and stores the result in the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {number}                                     scalar    The scalar to add.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result of the addition.
             * @return  {void}
             */
            DoAdd: function (scalar, result) {
                this.Map$1(function (x) {
                    return x + scalar;
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            /**
             * Adds another matrix to this matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @throws If the other matrix is {@link ArgumentNullException}.
             * @throws If the two matrices don't have the same dimensions.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix to add to this matrix.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result of the addition.
             * @return  {void}
             */
            DoAdd$1: function (other, result) {
                this.Map2$1(function (x, y) {
                    return x + y;
                }, other, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            /**
             * Subtracts a scalar from each element of the vector and stores the result in the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {number}                                     scalar    The scalar to subtract.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result of the subtraction.
             * @return  {void}
             */
            DoSubtract: function (scalar, result) {
                this.Map$1(function (x) {
                    return x - scalar;
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            /**
             * Subtracts another matrix from this matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @throws If the other matrix is {@link ArgumentNullException}.
             * @throws If the two matrices don't have the same dimensions.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix to subtract to this matrix.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result of subtraction.
             * @return  {void}
             */
            DoSubtract$1: function (other, result) {
                this.Map2$1(function (x, y) {
                    return x - y;
                }, other, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            /**
             * Multiplies each element of the matrix by a scalar and places results into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {number}                                     scalar    The scalar to multiply the matrix with.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result of the multiplication.
             * @return  {void}
             */
            DoMultiply: function (scalar, result) {
                this.Map$1(function (x) {
                    return x * scalar;
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            /**
             * Multiplies this matrix with a vector and places the results into the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    rightSide    The vector to multiply with.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result       The result of the multiplication.
             * @return  {void}
             */
            DoMultiply$2: function (rightSide, result) {
                for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                    var s = 0.0;
                    for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                        s += this.At(i, j) * rightSide.getItem(j);
                    }
                    result.setItem(i, s);
                }
            },
            /**
             * Multiplies this matrix with another matrix and places the results into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix to multiply with.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The result of the multiplication.
             * @return  {void}
             */
            DoMultiply$1: function (other, result) {
                for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                    for (var j = 0; j < other.ColumnCount; j = (j + 1) | 0) {
                        var s = 0.0;
                        for (var k = 0; k < this.ColumnCount; k = (k + 1) | 0) {
                            s += this.At(i, k) * other.At(k, j);
                        }
                        result.At$1(i, j, s);
                    }
                }
            },
            /**
             * Divides each element of the matrix by a scalar and places results into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {number}                                     divisor    The scalar to divide the matrix with.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result     The matrix to store the result of the division.
             * @return  {void}
             */
            DoDivide: function (divisor, result) {
                this.Map$1(function (x) {
                    return x / divisor;
                }, result, divisor === 0.0 ? MathNet.Numerics.LinearAlgebra.Zeros.Include : MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            /**
             * Divides a scalar by each element of the matrix and stores the result in the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {number}                                     dividend    The scalar to divide by each element of the matrix.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result      The matrix to store the result of the division.
             * @return  {void}
             */
            DoDivideByThis: function (dividend, result) {
                this.Map$1(function (x) {
                    return dividend / x;
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            /**
             * Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix to multiply with.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The result of the multiplication.
             * @return  {void}
             */
            DoTransposeAndMultiply: function (other, result) {
                for (var j = 0; j < other.RowCount; j = (j + 1) | 0) {
                    for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                        var s = 0.0;
                        for (var k = 0; k < this.ColumnCount; k = (k + 1) | 0) {
                            s += this.At(i, k) * other.At(j, k);
                        }
                        result.At$1(i, j, s);
                    }
                }
            },
            /**
             * Multiplies this matrix with the conjugate transpose of another matrix and places the results into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix to multiply with.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The result of the multiplication.
             * @return  {void}
             */
            DoConjugateTransposeAndMultiply: function (other, result) {
                this.DoTransposeAndMultiply(other, result);
            },
            /**
             * Multiplies the transpose of this matrix with another matrix and places the results into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix to multiply with.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The result of the multiplication.
             * @return  {void}
             */
            DoTransposeThisAndMultiply: function (other, result) {
                for (var j = 0; j < other.ColumnCount; j = (j + 1) | 0) {
                    for (var i = 0; i < this.ColumnCount; i = (i + 1) | 0) {
                        var s = 0.0;
                        for (var k = 0; k < this.RowCount; k = (k + 1) | 0) {
                            s += this.At(k, i) * other.At(k, j);
                        }
                        result.At$1(i, j, s);
                    }
                }
            },
            /**
             * Multiplies the transpose of this matrix with a vector and places the results into the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    rightSide    The vector to multiply with.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result       The result of the multiplication.
             * @return  {void}
             */
            DoTransposeThisAndMultiply$1: function (rightSide, result) {
                for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                    var s = 0.0;
                    for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                        s += this.At(i, j) * rightSide.getItem(i);
                    }
                    result.setItem(j, s);
                }
            },
            /**
             * Multiplies the transpose of this matrix with another matrix and places the results into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix to multiply with.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The result of the multiplication.
             * @return  {void}
             */
            DoConjugateTransposeThisAndMultiply: function (other, result) {
                this.DoTransposeThisAndMultiply(other, result);
            },
            /**
             * Multiplies the conjugate transpose of this matrix with a vector and places the results into the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    rightSide    The vector to multiply with.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result       The result of the multiplication.
             * @return  {void}
             */
            DoConjugateTransposeThisAndMultiply$1: function (rightSide, result) {
                this.DoTransposeThisAndMultiply$1(rightSide, result);
            },
            /**
             * Computes the canonical modulus, where the result has the sign of the divisor,
             for the given divisor each element of the matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {number}                                     divisor    The scalar denominator to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result     Matrix to store the results in.
             * @return  {void}
             */
            DoModulus: function (divisor, result) {
                this.Map$1(function (x) {
                    return MathNet.Numerics.Euclid.Modulus(x, divisor);
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            /**
             * Computes the canonical modulus, where the result has the sign of the divisor,
             for the given dividend for each element of the matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {number}                                     dividend    The scalar numerator to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result      A vector to store the results in.
             * @return  {void}
             */
            DoModulusByThis: function (dividend, result) {
                this.Map$1(function (x) {
                    return MathNet.Numerics.Euclid.Modulus(dividend, x);
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            /**
             * Computes the remainder (% operator), where the result has the sign of the dividend,
             for the given divisor each element of the matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {number}                                     divisor    The scalar denominator to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result     Matrix to store the results in.
             * @return  {void}
             */
            DoRemainder: function (divisor, result) {
                this.Map$1(function (x) {
                    return MathNet.Numerics.Euclid.Remainder(x, divisor);
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            /**
             * Computes the remainder (% operator), where the result has the sign of the dividend,
             for the given dividend for each element of the matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {number}                                     dividend    The scalar numerator to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result      A vector to store the results in.
             * @return  {void}
             */
            DoRemainderByThis: function (dividend, result) {
                this.Map$1(function (x) {
                    return MathNet.Numerics.Euclid.Remainder(dividend, x);
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            /**
             * Pointwise multiplies this matrix with another matrix and stores the result into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix to pointwise multiply with this one.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result of the pointwise multiplication.
             * @return  {void}
             */
            DoPointwiseMultiply: function (other, result) {
                this.Map2$1(function (x, y) {
                    return x * y;
                }, other, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            /**
             * Pointwise divide this matrix by another matrix and stores the result into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    divisor    The matrix to pointwise divide this one by.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result     The matrix to store the result of the pointwise division.
             * @return  {void}
             */
            DoPointwiseDivide: function (divisor, result) {
                this.Map2$1(function (x, y) {
                    return x / y;
                }, divisor, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            /**
             * Pointwise raise this matrix to an exponent and store the result into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {number}                                     exponent    The exponent to raise this matrix values to.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result      The matrix to store the result of the pointwise power.
             * @return  {void}
             */
            DoPointwisePower: function (exponent, result) {
                this.Map$1(function (x) {
                    return Math.pow(x, exponent);
                }, result, exponent > 0.0 ? MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip : MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            /**
             * Pointwise raise this matrix to an exponent and store the result into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    exponent    The exponent to raise this matrix values to.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result      The vector to store the result of the pointwise power.
             * @return  {void}
             */
            DoPointwisePower$1: function (exponent, result) {
                this.Map2(Math.pow, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            /**
             * Pointwise canonical modulus, where the result has the sign of the divisor,
             of this matrix with another matrix and stores the result into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    divisor    The pointwise denominator matrix to use
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result     The result of the modulus.
             * @return  {void}
             */
            DoPointwiseModulus: function (divisor, result) {
                this.Map2$1(MathNet.Numerics.Euclid.Modulus, divisor, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            /**
             * Pointwise remainder (% operator), where the result has the sign of the dividend,
             of this matrix with another matrix and stores the result into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    divisor    The pointwise denominator matrix to use
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result     The result of the modulus.
             * @return  {void}
             */
            DoPointwiseRemainder: function (divisor, result) {
                this.Map2$1(MathNet.Numerics.Euclid.Remainder, divisor, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            /**
             * Pointwise applies the exponential function to each value and stores the result into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result.
             * @return  {void}
             */
            DoPointwiseExp: function (result) {
                this.Map$1(Math.exp, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            /**
             * Pointwise applies the natural logarithm function to each value and stores the result into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result.
             * @return  {void}
             */
            DoPointwiseLog: function (result) {
                this.Map$1(function (x) { return Bridge.Math.log(x); }, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            DoPointwiseAbs: function (result) {
                this.Map$1(Math.abs, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            DoPointwiseAcos: function (result) {
                this.Map$1(Math.acos, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            DoPointwiseAsin: function (result) {
                this.Map$1(Math.asin, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            DoPointwiseAtan: function (result) {
                this.Map$1(Math.atan, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            DoPointwiseAtan2: function (other, result) {
                this.Map2$1(Math.atan2, other, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            DoPointwiseCeiling: function (result) {
                this.Map$1(Math.ceil, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            DoPointwiseCos: function (result) {
                this.Map$1(Math.cos, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            DoPointwiseCosh: function (result) {
                this.Map$1(function (value) { return Bridge.Math.cosh(value); }, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            DoPointwiseFloor: function (result) {
                this.Map$1(Math.floor, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            DoPointwiseLog10: function (result) {
                this.Map$1(function (x) { return Bridge.Math.logWithBase(x, 10.0); }, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            DoPointwiseRound: function (result) {
                this.Map$1(function (d) { return Bridge.Math.round(d, 0, 6); }, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            DoPointwiseSign: function (result) {
                this.Map$1(function (x) {
                    return Bridge.Int.sign(x);
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            DoPointwiseSin: function (result) {
                this.Map$1(Math.sin, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            DoPointwiseSinh: function (result) {
                this.Map$1(function (value) { return Bridge.Math.sinh(value); }, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            DoPointwiseSqrt: function (result) {
                this.Map$1(Math.sqrt, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            DoPointwiseTan: function (result) {
                this.Map$1(Math.tan, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            DoPointwiseTanh: function (result) {
                this.Map$1(function (value) { return Bridge.Math.tanh(value); }, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            /**
             * Computes the Moore-Penrose Pseudo-Inverse of this matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            PseudoInverse: function () {
                var svd = this.Svd(true);
                var w = svd.W;
                var s = svd.S;
                var tolerance = Math.max(this.RowCount, this.ColumnCount) * svd.L2Norm * 4.94065645841247E-324;

                for (var i = 0; i < s.Count; i = (i + 1) | 0) {
                    s.setItem(i, s.getItem(i) < tolerance ? 0 : 1 / s.getItem(i));
                }

                w.SetDiagonal$1(s);
                return (MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double).op_Multiply$2(MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double).op_Multiply$2(svd.U, w), svd.VT)).Transpose();
            },
            /**
             * Computes the trace of this matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @throws If the matrix is not square
             * @return  {number}        The trace of this matrix
             */
            Trace: function () {
                if (this.RowCount !== this.ColumnCount) {
                    throw new System.ArgumentException.$ctor1("Resources.ArgumentMatrixSquare");
                }

                var sum = 0.0;
                for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                    sum += this.At(i, i);
                }

                return sum;
            },
            DoPointwiseMinimum: function (scalar, result) {
                this.Map$1(function (x) {
                    return Math.min(scalar, x);
                }, result, scalar >= 0.0 ? MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip : MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            DoPointwiseMinimum$1: function (other, result) {
                this.Map2$1(Math.min, other, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            DoPointwiseMaximum: function (scalar, result) {
                this.Map$1(function (x) {
                    return Math.max(scalar, x);
                }, result, scalar <= 0.0 ? MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip : MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            DoPointwiseMaximum$1: function (other, result) {
                this.Map2$1(Math.max, other, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            DoPointwiseAbsoluteMinimum: function (scalar, result) {
                var absolute = Math.abs(scalar);
                this.Map$1(function (x) {
                    return Math.min(absolute, Math.abs(x));
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            DoPointwiseAbsoluteMinimum$1: function (other, result) {
                this.Map2$1(function (x, y) {
                    return Math.min(Math.abs(x), Math.abs(y));
                }, other, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            DoPointwiseAbsoluteMaximum: function (scalar, result) {
                var absolute = Math.abs(scalar);
                this.Map$1(function (x) {
                    return Math.max(absolute, Math.abs(x));
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            DoPointwiseAbsoluteMaximum$1: function (other, result) {
                this.Map2$1(function (x, y) {
                    return Math.max(Math.abs(x), Math.abs(y));
                }, other, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            /**
             * Calculates the induced L1 norm of this matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @return  {number}        The maximum absolute column sum of the matrix.
             */
            L1Norm: function () {
                var norm = 0.0;
                for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                    var s = 0.0;
                    for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                        s += Math.abs(this.At(i, j));
                    }
                    norm = Math.max(norm, s);
                }
                return norm;
            },
            /**
             * Calculates the induced infinity norm of this matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @return  {number}        The maximum absolute row sum of the matrix.
             */
            InfinityNorm: function () {
                var norm = 0.0;
                for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                    var s = 0.0;
                    for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                        s += Math.abs(this.At(i, j));
                    }
                    norm = Math.max(norm, s);
                }
                return norm;
            },
            /**
             * Calculates the entry-wise Frobenius norm of this matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @return  {number}        The square root of the sum of the squared values.
             */
            FrobeniusNorm: function () {
                var transpose = this.Transpose();
                var aat = MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double).op_Multiply$2(this, transpose);
                var norm = 0.0;
                for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                    norm += aat.At(i, i);
                }
                return Math.sqrt(norm);
            },
            /**
             * Calculates the p-norms of all row vectors.
             Typical values for p are 1.0 (L1, Manhattan norm), 2.0 (L2, Euclidean norm) and positive infinity (infinity norm)
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {number}                                     norm
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            RowNorms: function (norm) {
                if (norm <= 0.0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("norm", "Resources.ArgumentMustBePositive");
                }

                var ret = System.Array.init(this.RowCount, 0, System.Double);
                if (norm === 2.0) {
                    this.Storage.FoldByRowUnchecked(System.Double, ret, function (s, x) {
                        return s + x * x;
                    }, function (x, c) {
                        return Math.sqrt(x);
                    }, ret, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                } else if (norm === 1.0) {
                    this.Storage.FoldByRowUnchecked(System.Double, ret, function (s, x) {
                        return s + Math.abs(x);
                    }, function (x, c) {
                        return x;
                    }, ret, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                } else if ((norm === Number.POSITIVE_INFINITY)) {
                    this.Storage.FoldByRowUnchecked(System.Double, ret, function (s, x) {
                        return Math.max(s, Math.abs(x));
                    }, function (x, c) {
                        return x;
                    }, ret, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                } else {
                    var invnorm = 1.0 / norm;
                    this.Storage.FoldByRowUnchecked(System.Double, ret, function (s, x) {
                        return s + Math.pow(Math.abs(x), norm);
                    }, function (x, c) {
                        return Math.pow(x, invnorm);
                    }, ret, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                }
                return this.v_builder$1.Dense(ret);
            },
            /**
             * Calculates the p-norms of all column vectors.
             Typical values for p are 1.0 (L1, Manhattan norm), 2.0 (L2, Euclidean norm) and positive infinity (infinity norm)
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {number}                                     norm
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            ColumnNorms: function (norm) {
                if (norm <= 0.0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("norm", "Resources.ArgumentMustBePositive");
                }

                var ret = System.Array.init(this.ColumnCount, 0, System.Double);
                if (norm === 2.0) {
                    this.Storage.FoldByColumnUnchecked(System.Double, ret, function (s, x) {
                        return s + x * x;
                    }, function (x, c) {
                        return Math.sqrt(x);
                    }, ret, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                } else if (norm === 1.0) {
                    this.Storage.FoldByColumnUnchecked(System.Double, ret, function (s, x) {
                        return s + Math.abs(x);
                    }, function (x, c) {
                        return x;
                    }, ret, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                } else if ((norm === Number.POSITIVE_INFINITY)) {
                    this.Storage.FoldByColumnUnchecked(System.Double, ret, function (s, x) {
                        return Math.max(s, Math.abs(x));
                    }, function (x, c) {
                        return x;
                    }, ret, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                } else {
                    var invnorm = 1.0 / norm;
                    this.Storage.FoldByColumnUnchecked(System.Double, ret, function (s, x) {
                        return s + Math.pow(Math.abs(x), norm);
                    }, function (x, c) {
                        return Math.pow(x, invnorm);
                    }, ret, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                }
                return this.v_builder$1.Dense(ret);
            },
            /**
             * Normalizes all row vectors to a unit p-norm.
             Typical values for p are 1.0 (L1, Manhattan norm), 2.0 (L2, Euclidean norm) and positive infinity (infinity norm)
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {number}                                     norm
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            NormalizeRows: function (norm) {
                var norminv = Bridge.cast(this.RowNorms(norm).Storage, MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(System.Double)).Data;
                for (var i = 0; i < norminv.length; i = (i + 1) | 0) {
                    norminv[System.Array.index(i, norminv)] = norminv[System.Array.index(i, norminv)] === 0.0 ? 1.0 : 1.0 / norminv[System.Array.index(i, norminv)];
                }

                var result = this.m_builder$1.SameAs$4(System.Double, this, this.RowCount, this.ColumnCount);
                this.Storage.MapIndexedTo(System.Double, result.Storage, function (i1, j, x) {
                    return norminv[System.Array.index(i1, norminv)] * x;
                }, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                return result;
            },
            /**
             * Normalizes all column vectors to a unit p-norm.
             Typical values for p are 1.0 (L1, Manhattan norm), 2.0 (L2, Euclidean norm) and positive infinity (infinity norm)
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @param   {number}                                     norm
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}
             */
            NormalizeColumns: function (norm) {
                var norminv = Bridge.cast(this.ColumnNorms(norm).Storage, MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(System.Double)).Data;
                for (var i = 0; i < norminv.length; i = (i + 1) | 0) {
                    norminv[System.Array.index(i, norminv)] = norminv[System.Array.index(i, norminv)] === 0.0 ? 1.0 : 1.0 / norminv[System.Array.index(i, norminv)];
                }

                var result = this.m_builder$1.SameAs$4(System.Double, this, this.RowCount, this.ColumnCount);
                this.Storage.MapIndexedTo(System.Double, result.Storage, function (i1, j, x) {
                    return norminv[System.Array.index(j, norminv)] * x;
                }, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                return result;
            },
            /**
             * Calculates the value sum of each row vector.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            RowSums: function () {
                var ret = System.Array.init(this.RowCount, 0, System.Double);
                this.Storage.FoldByRowUnchecked(System.Double, ret, function (s, x) {
                    return s + x;
                }, function (x, c) {
                    return x;
                }, ret, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                return this.v_builder$1.Dense(ret);
            },
            /**
             * Calculates the absolute value sum of each row vector.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            RowAbsoluteSums: function () {
                var ret = System.Array.init(this.RowCount, 0, System.Double);
                this.Storage.FoldByRowUnchecked(System.Double, ret, function (s, x) {
                    return s + Math.abs(x);
                }, function (x, c) {
                    return x;
                }, ret, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                return this.v_builder$1.Dense(ret);
            },
            /**
             * Calculates the value sum of each column vector.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            ColumnSums: function () {
                var ret = System.Array.init(this.ColumnCount, 0, System.Double);
                this.Storage.FoldByColumnUnchecked(System.Double, ret, function (s, x) {
                    return s + x;
                }, function (x, c) {
                    return x;
                }, ret, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                return this.v_builder$1.Dense(ret);
            },
            /**
             * Calculates the absolute value sum of each column vector.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}
             */
            ColumnAbsoluteSums: function () {
                var ret = System.Array.init(this.ColumnCount, 0, System.Double);
                this.Storage.FoldByColumnUnchecked(System.Double, ret, function (s, x) {
                    return s + Math.abs(x);
                }, function (x, c) {
                    return x;
                }, ret, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                return this.v_builder$1.Dense(ret);
            },
            /**
             * Evaluates whether this matrix is Hermitian (conjugate symmetric).
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Matrix
             * @return  {boolean}
             */
            IsHermitian: function () {
                return this.IsSymmetric();
            },
            Svd: function (computeVectors) {
                if (computeVectors === void 0) { computeVectors = true; }
                return MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Create(this, computeVectors);
            }
        }
    });

    /**
     * <pre><code>double</code></pre> version of the {@link } class.
     *
     * @abstract
     * @public
     * @class MathNet.Numerics.LinearAlgebra.Double.Vector
     * @augments MathNet.Numerics.LinearAlgebra.Vector$1
     */
    Bridge.define("MathNet.Numerics.LinearAlgebra.Double.Vector", {
        inherits: [MathNet.Numerics.LinearAlgebra.Vector$1(System.Double)],
        ctors: {
            /**
             * Initializes a new instance of the Vector class.
             *
             * @instance
             * @protected
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @param   {MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1}    storage
             * @return  {void}
             */
            ctor: function (storage) {
                this.$initialize();
                MathNet.Numerics.LinearAlgebra.Vector$1(System.Double).ctor.call(this, storage);
            }
        },
        methods: {
            /**
             * Set all values whose absolute value is smaller than the threshold to zero.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @param   {number}    threshold
             * @return  {void}
             */
            CoerceZero: function (threshold) {
                this.MapInplace(function (x) {
                    return Math.abs(x) < threshold ? 0.0 : x;
                }, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            /**
             * Conjugates vector and save result to <b />
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    Target vector
             * @return  {void}
             */
            DoConjugate: function (result) {
                if (Bridge.referenceEquals(this, result)) {
                    return;
                }

                this.CopyTo(result);
            },
            /**
             * Negates vector and saves result to <b />
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    Target vector
             * @return  {void}
             */
            DoNegate: function (result) {
                this.Map$1(function (x) {
                    return -x;
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            /**
             * Adds a scalar to each element of the vector and stores the result in the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @param   {number}                                     scalar    The scalar to add.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result of the addition.
             * @return  {void}
             */
            DoAdd: function (scalar, result) {
                this.Map$1(function (x) {
                    return x + scalar;
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            /**
             * Adds another vector to this vector and stores the result into the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other     The vector to add to this one.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result of the addition.
             * @return  {void}
             */
            DoAdd$1: function (other, result) {
                this.Map2$1(function (x, y) {
                    return x + y;
                }, other, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            /**
             * Subtracts a scalar from each element of the vector and stores the result in the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @param   {number}                                     scalar    The scalar to subtract.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result of the subtraction.
             * @return  {void}
             */
            DoSubtract: function (scalar, result) {
                this.Map$1(function (x) {
                    return x - scalar;
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            /**
             * Subtracts another vector to this vector and stores the result into the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other     The vector to subtract from this one.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result of the subtraction.
             * @return  {void}
             */
            DoSubtract$1: function (other, result) {
                this.Map2$1(function (x, y) {
                    return x - y;
                }, other, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            /**
             * Multiplies a scalar to each element of the vector and stores the result in the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @param   {number}                                     scalar    The scalar to multiply.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result of the multiplication.
             * @return  {void}
             */
            DoMultiply: function (scalar, result) {
                this.Map$1(function (x) {
                    return x * scalar;
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            /**
             * Divides each element of the vector by a scalar and stores the result in the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @param   {number}                                     divisor    The scalar to divide with.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result     The vector to store the result of the division.
             * @return  {void}
             */
            DoDivide: function (divisor, result) {
                this.Map$1(function (x) {
                    return x / divisor;
                }, result, divisor === 0.0 ? MathNet.Numerics.LinearAlgebra.Zeros.Include : MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            /**
             * Divides a scalar by each element of the vector and stores the result in the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @param   {number}                                     dividend    The scalar to divide.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result      The vector to store the result of the division.
             * @return  {void}
             */
            DoDivideByThis: function (dividend, result) {
                this.Map$1(function (x) {
                    return dividend / x;
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            /**
             * Pointwise multiplies this vector with another vector and stores the result into the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other     The vector to pointwise multiply with this one.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result of the pointwise multiplication.
             * @return  {void}
             */
            DoPointwiseMultiply: function (other, result) {
                this.Map2$1(function (x, y) {
                    return x * y;
                }, other, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            /**
             * Pointwise divide this vector with another vector and stores the result into the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    divisor    The vector to pointwise divide this one by.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result     The vector to store the result of the pointwise division.
             * @return  {void}
             */
            DoPointwiseDivide: function (divisor, result) {
                this.Map2$1(function (x, y) {
                    return x / y;
                }, divisor, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            /**
             * Pointwise raise this vector to an exponent and store the result into the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @param   {number}                                     exponent    The exponent to raise this vector values to.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result      The vector to store the result of the pointwise power.
             * @return  {void}
             */
            DoPointwisePower: function (exponent, result) {
                this.Map$1(function (x) {
                    return Math.pow(x, exponent);
                }, result, exponent > 0.0 ? MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip : MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            /**
             * Pointwise raise this vector to an exponent vector and store the result into the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    exponent    The exponent vector to raise this vector values to.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result      The vector to store the result of the pointwise power.
             * @return  {void}
             */
            DoPointwisePower$1: function (exponent, result) {
                this.Map2$1(Math.pow, exponent, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            /**
             * Pointwise canonical modulus, where the result has the sign of the divisor,
             of this vector with another vector and stores the result into the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    divisor    The pointwise denominator vector to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result     The result of the modulus.
             * @return  {void}
             */
            DoPointwiseModulus: function (divisor, result) {
                this.Map2$1(MathNet.Numerics.Euclid.Modulus, divisor, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            /**
             * Pointwise remainder (% operator), where the result has the sign of the dividend,
             of this vector with another vector and stores the result into the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    divisor    The pointwise denominator vector to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result     The result of the modulus.
             * @return  {void}
             */
            DoPointwiseRemainder: function (divisor, result) {
                this.Map2$1(MathNet.Numerics.Euclid.Remainder, divisor, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            /**
             * Pointwise applies the exponential function to each value and stores the result into the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result.
             * @return  {void}
             */
            DoPointwiseExp: function (result) {
                this.Map$1(Math.exp, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            /**
             * Pointwise applies the natural logarithm function to each value and stores the result into the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result.
             * @return  {void}
             */
            DoPointwiseLog: function (result) {
                this.Map$1(function (x) { return Bridge.Math.log(x); }, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            DoPointwiseAbs: function (result) {
                this.Map$1(Math.abs, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            DoPointwiseAcos: function (result) {
                this.Map$1(Math.acos, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            DoPointwiseAsin: function (result) {
                this.Map$1(Math.asin, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            DoPointwiseAtan: function (result) {
                this.Map$1(Math.atan, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            DoPointwiseAtan2$1: function (other, result) {
                this.Map2$1(Math.atan2, other, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            DoPointwiseAtan2: function (scalar, result) {
                this.Map$1(function (x) {
                    return Math.atan2(x, scalar);
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            DoPointwiseCeiling: function (result) {
                this.Map$1(Math.ceil, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            DoPointwiseCos: function (result) {
                this.Map$1(Math.cos, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            DoPointwiseCosh: function (result) {
                this.Map$1(function (value) { return Bridge.Math.cosh(value); }, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            DoPointwiseFloor: function (result) {
                this.Map$1(Math.floor, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            DoPointwiseLog10: function (result) {
                this.Map$1(function (x) { return Bridge.Math.logWithBase(x, 10.0); }, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            DoPointwiseRound: function (result) {
                this.Map$1(function (d) { return Bridge.Math.round(d, 0, 6); }, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            DoPointwiseSign: function (result) {
                this.Map$1(function (x) {
                    return Bridge.Int.sign(x);
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            DoPointwiseSin: function (result) {
                this.Map$1(Math.sin, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            DoPointwiseSinh: function (result) {
                this.Map$1(function (value) { return Bridge.Math.sinh(value); }, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            DoPointwiseSqrt: function (result) {
                this.Map$1(Math.sqrt, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            DoPointwiseTan: function (result) {
                this.Map$1(Math.tan, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            DoPointwiseTanh: function (result) {
                this.Map$1(function (value) { return Bridge.Math.tanh(value); }, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            /**
             * Computes the dot product between this vector and another vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other    The other vector.
             * @return  {number}                                              The sum of a[i]*b[i] for all i.
             */
            DoDotProduct: function (other) {
                var dot = 0.0;
                for (var i = 0; i < this.Count; i = (i + 1) | 0) {
                    dot += this.At(i) * other.At(i);
                }
                return dot;
            },
            /**
             * Computes the dot product between the conjugate of this vector and another vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other    The other vector.
             * @return  {number}                                              The sum of conj(a[i])*b[i] for all i.
             */
            DoConjugateDotProduct: function (other) {
                return this.DoDotProduct(other);
            },
            /**
             * Computes the canonical modulus, where the result has the sign of the divisor,
             for each element of the vector for the given divisor.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @param   {number}                                     divisor    The scalar denominator to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result     A vector to store the results in.
             * @return  {void}
             */
            DoModulus: function (divisor, result) {
                this.Map$1(function (x) {
                    return MathNet.Numerics.Euclid.Modulus(x, divisor);
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            /**
             * Computes the canonical modulus, where the result has the sign of the divisor,
             for the given dividend for each element of the vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @param   {number}                                     dividend    The scalar numerator to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result      A vector to store the results in.
             * @return  {void}
             */
            DoModulusByThis: function (dividend, result) {
                this.Map$1(function (x) {
                    return MathNet.Numerics.Euclid.Modulus(dividend, x);
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            /**
             * Computes the remainder (% operator), where the result has the sign of the dividend,
             for each element of the vector for the given divisor.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @param   {number}                                     divisor    The scalar denominator to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result     A vector to store the results in.
             * @return  {void}
             */
            DoRemainder: function (divisor, result) {
                this.Map$1(function (x) {
                    return MathNet.Numerics.Euclid.Remainder(x, divisor);
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            /**
             * Computes the remainder (% operator), where the result has the sign of the dividend,
             for the given dividend for each element of the vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @param   {number}                                     dividend    The scalar numerator to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result      A vector to store the results in.
             * @return  {void}
             */
            DoRemainderByThis: function (dividend, result) {
                this.Map$1(function (x) {
                    return MathNet.Numerics.Euclid.Remainder(dividend, x);
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            DoPointwiseMinimum: function (scalar, result) {
                this.Map$1(function (x) {
                    return Math.min(scalar, x);
                }, result, scalar >= 0.0 ? MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip : MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            DoPointwiseMinimum$1: function (other, result) {
                this.Map2$1(Math.min, other, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            DoPointwiseMaximum: function (scalar, result) {
                this.Map$1(function (x) {
                    return Math.max(scalar, x);
                }, result, scalar <= 0.0 ? MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip : MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            DoPointwiseMaximum$1: function (other, result) {
                this.Map2$1(Math.max, other, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            DoPointwiseAbsoluteMinimum: function (scalar, result) {
                var absolute = Math.abs(scalar);
                this.Map$1(function (x) {
                    return Math.min(absolute, Math.abs(x));
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            DoPointwiseAbsoluteMinimum$1: function (other, result) {
                this.Map2$1(function (x, y) {
                    return Math.min(Math.abs(x), Math.abs(y));
                }, other, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            DoPointwiseAbsoluteMaximum: function (scalar, result) {
                var absolute = Math.abs(scalar);
                this.Map$1(function (x) {
                    return Math.max(absolute, Math.abs(x));
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            DoPointwiseAbsoluteMaximum$1: function (other, result) {
                this.Map2$1(function (x, y) {
                    return Math.max(Math.abs(x), Math.abs(y));
                }, other, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            /**
             * Returns the value of the absolute minimum element.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @return  {number}        The value of the absolute minimum element.
             */
            AbsoluteMinimum: function () {
                return Math.abs(this.At(this.AbsoluteMinimumIndex()));
            },
            /**
             * Returns the index of the absolute minimum element.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @return  {number}        The index of absolute minimum element.
             */
            AbsoluteMinimumIndex: function () {
                var index = 0;
                var min = Math.abs(this.At(index));
                for (var i = 1; i < this.Count; i = (i + 1) | 0) {
                    var test = Math.abs(this.At(i));
                    if (test < min) {
                        index = i;
                        min = test;
                    }
                }

                return index;
            },
            /**
             * Returns the value of the absolute maximum element.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @return  {number}        The value of the absolute maximum element.
             */
            AbsoluteMaximum: function () {
                return Math.abs(this.At(this.AbsoluteMaximumIndex()));
            },
            /**
             * Returns the index of the absolute maximum element.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @return  {number}        The index of absolute maximum element.
             */
            AbsoluteMaximumIndex: function () {
                var index = 0;
                var max = Math.abs(this.At(index));
                for (var i = 1; i < this.Count; i = (i + 1) | 0) {
                    var test = Math.abs(this.At(i));
                    if (test > max) {
                        index = i;
                        max = test;
                    }
                }

                return index;
            },
            /**
             * Computes the sum of the vector's elements.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @return  {number}        The sum of the vector's elements.
             */
            Sum: function () {
                var sum = 0.0;
                for (var i = 0; i < this.Count; i = (i + 1) | 0) {
                    sum += this.At(i);
                }
                return sum;
            },
            /**
             * Calculates the L1 norm of the vector, also known as Manhattan norm.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @return  {number}        The sum of the absolute values.
             */
            L1Norm: function () {
                var sum = 0.0;
                for (var i = 0; i < this.Count; i = (i + 1) | 0) {
                    sum += Math.abs(this.At(i));
                }
                return sum;
            },
            /**
             * Calculates the L2 norm of the vector, also known as Euclidean norm.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @return  {number}        The square root of the sum of the squared values.
             */
            L2Norm: function () {
                return Math.sqrt(this.DoDotProduct(this));
            },
            /**
             * Calculates the infinity norm of the vector.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @return  {number}        The maximum absolute value.
             */
            InfinityNorm: function () {
                var max = 0.0;
                for (var i = 0; i < this.Count; i = (i + 1) | 0) {
                    if (Math.abs(this.At(i)) > max) {
                        max = this.At(i);
                    }
                }
                return max;

            },
            /**
             * Computes the p-Norm.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @param   {number}    p    The p value.
             * @return  {number}         <pre><code>Scalar ret = ( â|At(i)|^p )^(1/p)</code></pre>
             */
            Norm: function (p) {
                if (p < 0.0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("p");
                }

                if (p === 1.0) {
                    return this.L1Norm();
                }
                if (p === 2.0) {
                    return this.L2Norm();
                }
                if ((p === Number.POSITIVE_INFINITY)) {
                    return this.InfinityNorm();
                }

                var sum = 0.0;
                for (var index = 0; index < this.Count; index = (index + 1) | 0) {
                    sum += Math.pow(Math.abs(this.At(index)), p);
                }
                return Math.pow(sum, 1.0 / p);
            },
            /**
             * Returns the index of the maximum element.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @return  {number}        The index of maximum element.
             */
            MaximumIndex: function () {
                var index = 0;
                var max = this.At(index);
                for (var i = 1; i < this.Count; i = (i + 1) | 0) {
                    var test = this.At(i);
                    if (test > max) {
                        index = i;
                        max = test;
                    }
                }

                return index;
            },
            /**
             * Returns the index of the minimum element.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @return  {number}        The index of minimum element.
             */
            MinimumIndex: function () {
                var index = 0;
                var min = this.At(index);
                for (var i = 1; i < this.Count; i = (i + 1) | 0) {
                    var test = this.At(i);
                    if (test < min) {
                        index = i;
                        min = test;
                    }
                }

                return index;
            },
            /**
             * Normalizes this vector to a unit vector with respect to the p-norm.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Vector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Vector
             * @param   {number}                                     p    The p value.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}         This vector normalized to a unit vector with respect to the p-norm.
             */
            Normalize: function (p) {
                if (p < 0.0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("p");
                }

                var norm = this.Norm(p);
                var clone = this.Clone();
                if (norm === 0.0) {
                    return clone;
                }

                clone.Multiply$1(1.0 / norm, clone);

                return clone;
            }
        }
    });

    /**
     * <p>A class which encapsulates the functionality of an LU factorization.</p><p>For a matrix A, the LU factorization is a pair of lower triangular matrix L and
     upper triangular matrix U so that A = L*U.</p><p>In the Math.Net implementation we also store a set of pivot elements for increased
     numerical stability. The pivot elements encode a permutation matrix P such that P*A = L*U.</p>
     *
     * @abstract
     * @public
     * @class MathNet.Numerics.LinearAlgebra.Factorization.LU$1
     * @implements  MathNet.Numerics.LinearAlgebra.Factorization.ISolver$1
     * @param   {Function}    [name]    Supported data types are double, single, {@link }, and {@link }.
     */
    Bridge.define("MathNet.Numerics.LinearAlgebra.Factorization.LU$1", function (T) { return {
        inherits: [MathNet.Numerics.LinearAlgebra.Factorization.ISolver$1(T)],
        statics: {
            fields: {
                One: null
            },
            ctors: {
                init: function () {
                    this.One = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix.One;
                }
            }
        },
        fields: {
            v_builder: null,
            m_builder: null,
            _lazyL: null,
            _lazyU: null,
            _lazyP: null,
            Factors: null,
            Pivots: null
        },
        props: {
            /**
             * Gets the lower triangular factor.
             *
             * @instance
             * @public
             * @readonly
             * @memberof MathNet.Numerics.LinearAlgebra.Factorization.LU$1
             * @function L
             * @type MathNet.Numerics.LinearAlgebra.Matrix$1
             */
            L: {
                get: function () {
                    return this._lazyL;
                }
            },
            /**
             * Gets the upper triangular factor.
             *
             * @instance
             * @public
             * @readonly
             * @memberof MathNet.Numerics.LinearAlgebra.Factorization.LU$1
             * @function U
             * @type MathNet.Numerics.LinearAlgebra.Matrix$1
             */
            U: {
                get: function () {
                    return this._lazyU;
                }
            },
            /**
             * Gets the permutation applied to LU factorization.
             *
             * @instance
             * @public
             * @readonly
             * @memberof MathNet.Numerics.LinearAlgebra.Factorization.LU$1
             * @function P
             * @type MathNet.Numerics.Permutation
             */
            P: {
                get: function () {
                    return this._lazyP;
                }
            }
        },
        alias: [
            "Solve", "MathNet$Numerics$LinearAlgebra$Factorization$ISolver$1$" + Bridge.getTypeAlias(T) + "$Solve",
            "Solve$2", "MathNet$Numerics$LinearAlgebra$Factorization$ISolver$1$" + Bridge.getTypeAlias(T) + "$Solve$1"
        ],
        ctors: {
            init: function () {
                this.v_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Vector;
                this.m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
            },
            ctor: function (factors, pivots) {
                this.$initialize();
                this.Factors = factors;
                this.Pivots = pivots;

                this._lazyL = this.ComputeL();
                this._lazyU = this.Factors.UpperTriangle();
                this._lazyP = MathNet.Numerics.Permutation.FromInversions(this.Pivots);
            }
        },
        methods: {
            ComputeL: function () {
                var result = this.Factors.LowerTriangle();
                for (var i = 0; i < result.RowCount; i = (i + 1) | 0) {
                    result.At$1(i, i, MathNet.Numerics.LinearAlgebra.Factorization.LU$1(T).One);
                }
                return result;
            },
            /**
             * Solves a system of linear equations, <b>AX = B</b>, with A LU factorized.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Factorization.LU$1
             * @memberof MathNet.Numerics.LinearAlgebra.Factorization.LU$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    input    The right hand side {@link }, <b>B</b>.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}             The left hand side {@link }, <b>X</b>.
             */
            Solve: function (input) {
                var x = this.m_builder.SameAs$4(T, input, input.RowCount, input.ColumnCount, true);
                this.Solve$1(input, x);
                return x;
            },
            /**
             * Solves a system of linear equations, <b>Ax = b</b>, with A LU factorized.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Factorization.LU$1
             * @memberof MathNet.Numerics.LinearAlgebra.Factorization.LU$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    input    The right hand side vector, <b>b</b>.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}             The left hand side {@link }, <b>x</b>.
             */
            Solve$2: function (input) {
                var x = this.v_builder.SameAs$5(T, input, input.Count);
                this.Solve$3(input, x);
                return x;
            }
        }
    }; });

    /**
     * <p>A class which encapsulates the functionality of the singular value decomposition (SVD).</p><p>Suppose M is an m-by-n matrix whose entries are real numbers.
     Then there exists a factorization of the form M = UÎ£VT where:
     - U is an m-by-m unitary matrix;
     - Î£ is m-by-n diagonal matrix with nonnegative real numbers on the diagonal;
     - VT denotes transpose of V, an n-by-n unitary matrix;
     Such a factorization is called a singular-value decomposition of M. A common convention is to order the diagonal
     entries Î£(i,i) in descending order. In this case, the diagonal matrix Î£ is uniquely determined
     by M (though the matrices U and V are not). The diagonal entries of Î£ are known as the singular values of M.</p>
     *
     * @abstract
     * @public
     * @class MathNet.Numerics.LinearAlgebra.Factorization.Svd$1
     * @implements  MathNet.Numerics.LinearAlgebra.Factorization.ISolver$1
     * @param   {Function}    [name]    Supported data types are double, single, {@link }, and {@link }.
     */
    Bridge.define("MathNet.Numerics.LinearAlgebra.Factorization.Svd$1", function (T) { return {
        inherits: [MathNet.Numerics.LinearAlgebra.Factorization.ISolver$1(T)],
        fields: {
            v_builder: null,
            m_builder: null,
            _lazyW: null,
            /**
             * Indicating whether U and VT matrices have been computed during SVD factorization.
             *
             * @instance
             * @protected
             * @readonly
             * @memberof MathNet.Numerics.LinearAlgebra.Factorization.Svd$1
             * @type boolean
             */
            VectorsComputed: false,
            /**
             * Gets the singular values (Î£) of matrix in ascending value.
             *
             * @instance
             * @public
             * @memberof MathNet.Numerics.LinearAlgebra.Factorization.Svd$1
             * @function S
             * @type MathNet.Numerics.LinearAlgebra.Vector$1
             */
            S: null,
            /**
             * Gets the left singular vectors (U - m-by-m unitary matrix)
             *
             * @instance
             * @public
             * @memberof MathNet.Numerics.LinearAlgebra.Factorization.Svd$1
             * @function U
             * @type MathNet.Numerics.LinearAlgebra.Matrix$1
             */
            U: null,
            /**
             * Gets the transpose right singular vectors (transpose of V, an n-by-n unitary matrix)
             *
             * @instance
             * @public
             * @memberof MathNet.Numerics.LinearAlgebra.Factorization.Svd$1
             * @function VT
             * @type MathNet.Numerics.LinearAlgebra.Matrix$1
             */
            VT: null
        },
        props: {
            /**
             * Returns the singular values as a diagonal {@link }.
             *
             * @instance
             * @public
             * @readonly
             * @memberof MathNet.Numerics.LinearAlgebra.Factorization.Svd$1
             * @function W
             * @type MathNet.Numerics.LinearAlgebra.Matrix$1
             * @return  {[type]}        The singular values as a diagonal {@link }.
             */
            W: {
                get: function () {
                    return this._lazyW;
                }
            }
        },
        alias: [
            "Solve", "MathNet$Numerics$LinearAlgebra$Factorization$ISolver$1$" + Bridge.getTypeAlias(T) + "$Solve",
            "Solve$2", "MathNet$Numerics$LinearAlgebra$Factorization$ISolver$1$" + Bridge.getTypeAlias(T) + "$Solve$1"
        ],
        ctors: {
            init: function () {
                this.v_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Vector;
                this.m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
            },
            ctor: function (s, u, vt, vectorsComputed) {
                this.$initialize();
                this.S = s;
                this.U = u;
                this.VT = vt;

                this.VectorsComputed = vectorsComputed;

                var _lazyW = this.ComputeW();
            }
        },
        methods: {
            ComputeW: function () {
                var rows = this.U.RowCount;
                var columns = this.VT.ColumnCount;
                var result = this.m_builder.SameAs$4(T, this.U, rows, columns, false);

                for (var i = 0; i < rows; i = (i + 1) | 0) {
                    for (var j = 0; j < columns; j = (j + 1) | 0) {
                        if (i === j) {
                            result.At$1(i, i, this.S.getItem(i));
                        }
                    }
                }

                return result;
            },
            /**
             * Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Factorization.Svd$1
             * @memberof MathNet.Numerics.LinearAlgebra.Factorization.Svd$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    input    The right hand side {@link }, <b>B</b>.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}             The left hand side {@link }, <b>X</b>.
             */
            Solve: function (input) {
                if (!this.VectorsComputed) {
                    throw new System.InvalidOperationException.$ctor1("Resources.SingularVectorsNotComputed");
                }

                var x = this.m_builder.SameAs$4(T, this.U, this.VT.ColumnCount, input.ColumnCount, true);
                this.Solve$1(input, x);
                return x;
            },
            /**
             * Solves a system of linear equations, <b>Ax = b</b>, with A SVD factorized.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Factorization.Svd$1
             * @memberof MathNet.Numerics.LinearAlgebra.Factorization.Svd$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    input    The right hand side vector, <b>b</b>.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}             The left hand side {@link }, <b>x</b>.
             */
            Solve$2: function (input) {
                if (!this.VectorsComputed) {
                    throw new System.InvalidOperationException.$ctor1("Resources.SingularVectorsNotComputed");
                }

                var x = this.v_builder.SameAs$3(T, this.U, this.VT.ColumnCount);
                this.Solve$3(input, x);
                return x;
            }
        }
    }; });

    Bridge.define("MathNet.Numerics.LinearAlgebra.Double.MatrixBuilder", {
        inherits: [MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.MatrixBuilder$1(System.Double)],
        props: {
            Zero: {
                get: function () {
                    return 0.0;
                }
            },
            One: {
                get: function () {
                    return 1.0;
                }
            }
        },
        methods: {
            Dense: function (storage) {
                return new MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.ctor(storage);
            },
            Sparse: function (storage) {
                return new MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.ctor(storage);
            },
            Diagonal$1: function (storage) {
                return new MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.ctor(storage);
            }
        }
    });

    Bridge.define("MathNet.Numerics.LinearAlgebra.Double.VectorBuilder", {
        inherits: [MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1(System.Double)],
        props: {
            Zero: {
                get: function () {
                    return 0.0;
                }
            },
            One: {
                get: function () {
                    return 1.0;
                }
            }
        },
        methods: {
            Dense$1: function (storage) {
                return new MathNet.Numerics.LinearAlgebra.Double.DenseVector.ctor(storage);
            },
            Sparse: function (storage) {
                return new MathNet.Numerics.LinearAlgebra.Double.SparseVector.ctor(storage);
            }
        }
    });

    /**
     * Eigenvalues and eigenvectors of a real matrix.
     *
     * @abstract
     * @public
     * @class MathNet.Numerics.LinearAlgebra.Factorization.Evd$1
     * @implements  MathNet.Numerics.LinearAlgebra.Factorization.ISolver$1
     * @param   {Function}    [name]    Supported data types are double, single, {@link }, and {@link }.
     */
    Bridge.define("MathNet.Numerics.LinearAlgebra.Factorization.Evd$1", function (T) { return {
        inherits: [MathNet.Numerics.LinearAlgebra.Factorization.ISolver$1(T)],
        fields: {
            v_builder: null,
            m_builder: null,
            /**
             * Gets or sets a value indicating whether matrix is symmetric or not
             *
             * @instance
             * @public
             * @memberof MathNet.Numerics.LinearAlgebra.Factorization.Evd$1
             * @function IsSymmetric
             * @type boolean
             */
            IsSymmetric: false,
            /**
             * Gets or sets the eigen values (Î») of matrix in ascending value.
             *
             * @instance
             * @public
             * @memberof MathNet.Numerics.LinearAlgebra.Factorization.Evd$1
             * @function EigenValues
             * @type MathNet.Numerics.LinearAlgebra.Vector$1
             */
            EigenValues: null,
            /**
             * Gets or sets eigenvectors.
             *
             * @instance
             * @public
             * @memberof MathNet.Numerics.LinearAlgebra.Factorization.Evd$1
             * @function EigenVectors
             * @type MathNet.Numerics.LinearAlgebra.Matrix$1
             */
            EigenVectors: null,
            /**
             * Gets or sets the block diagonal eigenvalue matrix.
             *
             * @instance
             * @public
             * @memberof MathNet.Numerics.LinearAlgebra.Factorization.Evd$1
             * @function D
             * @type MathNet.Numerics.LinearAlgebra.Matrix$1
             */
            D: null
        },
        alias: [
            "Solve", "MathNet$Numerics$LinearAlgebra$Factorization$ISolver$1$" + Bridge.getTypeAlias(T) + "$Solve",
            "Solve$2", "MathNet$Numerics$LinearAlgebra$Factorization$ISolver$1$" + Bridge.getTypeAlias(T) + "$Solve$1"
        ],
        ctors: {
            init: function () {
                this.v_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Vector;
                this.m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(T).Matrix;
            },
            ctor: function (eigenVectors, eigenValues, blockDiagonal, isSymmetric) {
                this.$initialize();
                this.EigenVectors = eigenVectors;
                this.EigenValues = eigenValues;
                this.D = blockDiagonal;
                this.IsSymmetric = isSymmetric;
            }
        },
        methods: {
            /**
             * Solves a system of linear equations, <b>AX = B</b>, with A EVD factorized.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Factorization.Evd$1
             * @memberof MathNet.Numerics.LinearAlgebra.Factorization.Evd$1
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    input    The right hand side {@link }, <b>B</b>.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}             The left hand side {@link }, <b>X</b>.
             */
            Solve: function (input) {
                var x = this.m_builder.SameAs$4(T, this.EigenVectors, this.EigenVectors.ColumnCount, input.ColumnCount, true);
                this.Solve$1(input, x);
                return x;
            },
            /**
             * Solves a system of linear equations, <b>Ax = b</b>, with A EVD factorized.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Factorization.Evd$1
             * @memberof MathNet.Numerics.LinearAlgebra.Factorization.Evd$1
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    input    The right hand side vector, <b>b</b>.
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}             The left hand side {@link }, <b>x</b>.
             */
            Solve$2: function (input) {
                var x = this.v_builder.SameAs$3(T, this.EigenVectors, this.EigenVectors.ColumnCount);
                this.Solve$3(input, x);
                return x;
            }
        }
    }; });

    Bridge.define("MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1", function (T) { return {
        inherits: [MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T)],
        statics: {
            methods: {
                OfMatrix: function (matrix) {
                    var storage = new (MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T)).ctor(matrix.RowCount, matrix.ColumnCount);
                    matrix.CopyToUnchecked(storage, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                    return storage;
                },
                OfValue: function (rows, columns, value) {
                    var storage = new (MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T)).ctor(rows, columns);
                    var data = storage.Data;

                    for (var i = 0; i < data.length; i = (i + 1) | 0) {
                        data[System.Array.index(i, data)] = value;
                    }

                    return storage;
                },
                OfInit: function (rows, columns, init) {
                    var storage = new (MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T)).ctor(rows, columns);
                    var index = 0;
                    for (var j = 0; j < columns; j = (j + 1) | 0) {
                        for (var i = 0; i < rows; i = (i + 1) | 0) {
                            storage.Data[System.Array.index(Bridge.identity(index, ((index = (index + 1) | 0))), storage.Data)] = init(i, j);
                        }
                    }
                    return storage;
                },
                OfDiagonalInit: function (rows, columns, init) {
                    var storage = new (MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T)).ctor(rows, columns);
                    var index = 0;
                    var stride = (rows + 1) | 0;
                    for (var i = 0; i < Math.min(rows, columns); i = (i + 1) | 0) {
                        storage.Data[System.Array.index(index, storage.Data)] = init(i);
                        index = (index + stride) | 0;
                    }
                    return storage;
                },
                OfArray: function (array) {
                    var storage = new (MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T)).ctor(System.Array.getLength(array, 0), System.Array.getLength(array, 1));
                    var index = 0;
                    for (var j = 0; j < storage.ColumnCount; j = (j + 1) | 0) {
                        for (var i = 0; i < storage.RowCount; i = (i + 1) | 0) {
                            storage.Data[System.Array.index(Bridge.identity(index, ((index = (index + 1) | 0))), storage.Data)] = array.get([i, j]);
                        }
                    }
                    return storage;
                },
                OfColumnArrays: function (data) {
                    if (data.length <= 0) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("data", "Resources.MatrixCanNotBeEmpty");
                    }

                    var columns = data.length;
                    var rows = data[System.Array.index(0, data)].length;
                    var array = System.Array.init(Bridge.Int.mul(rows, columns), function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                    for (var j = 0; j < data.length; j = (j + 1) | 0) {
                        System.Array.copy(data[System.Array.index(j, data)], 0, array, Bridge.Int.mul(j, rows), rows);
                    }
                    return new (MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T)).$ctor1(rows, columns, array);
                },
                OfRowArrays: function (data) {
                    var $t;
                    if (data.length <= 0) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("data", "Resources.MatrixCanNotBeEmpty");
                    }

                    var rows = data.length;
                    var columns = data[System.Array.index(0, data)].length;
                    var array = System.Array.init(Bridge.Int.mul(rows, columns), function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                    for (var j = 0; j < columns; j = (j + 1) | 0) {
                        var offset = Bridge.Int.mul(j, rows);
                        for (var i = 0; i < rows; i = (i + 1) | 0) {
                            array[System.Array.index(((offset + i) | 0), array)] = ($t = data[System.Array.index(i, data)])[System.Array.index(j, $t)];
                        }
                    }
                    return new (MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T)).$ctor1(rows, columns, array);
                },
                OfColumnMajorArray: function (rows, columns, data) {
                    var ret = System.Array.init(Bridge.Int.mul(rows, columns), function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                    System.Array.copy(data, 0, ret, 0, Math.min(ret.length, data.length));
                    return new (MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T)).$ctor1(rows, columns, ret);
                },
                OfRowMajorArray: function (rows, columns, data) {
                    var ret = System.Array.init(Bridge.Int.mul(rows, columns), function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                    for (var i = 0; i < rows; i = (i + 1) | 0) {
                        var offset = Bridge.Int.mul(i, columns);
                        for (var j = 0; j < columns; j = (j + 1) | 0) {
                            ret[System.Array.index((((Bridge.Int.mul(j, rows)) + i) | 0), ret)] = data[System.Array.index(((offset + j) | 0), data)];
                        }
                    }
                    return new (MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T)).$ctor1(rows, columns, ret);
                },
                OfColumnVectors: function (data) {
                    if (data.length <= 0) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("data", "Resources.MatrixCanNotBeEmpty");
                    }

                    var columns = data.length;
                    var rows = data[System.Array.index(0, data)].Length;
                    var array = System.Array.init(Bridge.Int.mul(rows, columns), function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                    for (var j = 0; j < data.length; j = (j + 1) | 0) {
                        var column = data[System.Array.index(j, data)];
                        var denseColumn = Bridge.as(column, MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(T));
                        if (denseColumn != null) {
                            System.Array.copy(denseColumn.Data, 0, array, Bridge.Int.mul(j, rows), rows);
                        } else {
                            var offset = Bridge.Int.mul(j, rows);
                            for (var i = 0; i < rows; i = (i + 1) | 0) {
                                array[System.Array.index(((offset + i) | 0), array)] = column.At(i);
                            }
                        }
                    }
                    return new (MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T)).$ctor1(rows, columns, array);
                },
                OfRowVectors: function (data) {
                    if (data.length <= 0) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("data", "Resources.MatrixCanNotBeEmpty");
                    }

                    var rows = data.length;
                    var columns = data[System.Array.index(0, data)].Length;
                    var array = System.Array.init(Bridge.Int.mul(rows, columns), function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                    for (var j = 0; j < columns; j = (j + 1) | 0) {
                        var offset = Bridge.Int.mul(j, rows);
                        for (var i = 0; i < rows; i = (i + 1) | 0) {
                            array[System.Array.index(((offset + i) | 0), array)] = data[System.Array.index(i, data)].At(j);
                        }
                    }
                    return new (MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T)).$ctor1(rows, columns, array);
                },
                OfIndexedEnumerable: function (rows, columns, data) {
                    var $t;
                    var array = System.Array.init(Bridge.Int.mul(rows, columns), function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                    $t = Bridge.getEnumerator(data, System.Tuple$3(System.Int32,System.Int32,T));
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            array[System.Array.index((((Bridge.Int.mul(item.Item2, rows)) + item.Item1) | 0), array)] = item.Item3;
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    return new (MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T)).$ctor1(rows, columns, array);
                },
                OfColumnMajorEnumerable: function (rows, columns, data) {
                    var $t;
                    var arrayData = Bridge.as(data, System.Array.type(T));
                    if (arrayData != null) {
                        return MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T).OfColumnMajorArray(rows, columns, arrayData);
                    }

                    return new (MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T)).$ctor1(rows, columns, ($t = T, System.Linq.Enumerable.from(data, $t).ToArray($t)));
                },
                OfRowMajorEnumerable: function (rows, columns, data) {
                    var $t;
                    return MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T).OfRowMajorArray(rows, columns, Bridge.as(data, System.Array.type(T)) || ($t = T, System.Linq.Enumerable.from(data, $t).ToArray($t)));
                },
                OfColumnEnumerables: function (rows, columns, data) {
                    var array = System.Array.init(Bridge.Int.mul(rows, columns), function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                    var columnIterator = Bridge.getEnumerator(data, System.Collections.Generic.IEnumerable$1(T));
                    try {
                        for (var column = 0; column < columns; column = (column + 1) | 0) {
                            if (!columnIterator.System$Collections$IEnumerator$moveNext()) {
                                throw new System.ArgumentOutOfRangeException.$ctor4("data", System.String.format("Resources.ArgumentArrayWrongLength", [Bridge.box(columns, System.Int32)]));
                            }
                            var arrayColumn = Bridge.as(columnIterator[Bridge.geti(columnIterator, "System$Collections$Generic$IEnumerator$1$System$Collections$Generic$IEnumerable$1$" + Bridge.getTypeAlias(T) + "$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1")], System.Array.type(T));
                            if (arrayColumn != null) {
                                System.Array.copy(arrayColumn, 0, array, Bridge.Int.mul(column, rows), rows);
                            } else {
                                var rowIterator = Bridge.getEnumerator(columnIterator[Bridge.geti(columnIterator, "System$Collections$Generic$IEnumerator$1$System$Collections$Generic$IEnumerable$1$" + Bridge.getTypeAlias(T) + "$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1")], T);
                                try {
                                    var end = Bridge.Int.mul((((column + 1) | 0)), rows);
                                    for (var index = Bridge.Int.mul(column, rows); index < end; index = (index + 1) | 0) {
                                        if (!rowIterator.System$Collections$IEnumerator$moveNext()) {
                                            throw new System.ArgumentOutOfRangeException.$ctor4("data", System.String.format("Resources.ArgumentArrayWrongLength", [Bridge.box(rows, System.Int32)]));
                                        }
                                        array[System.Array.index(index, array)] = rowIterator[Bridge.geti(rowIterator, "System$Collections$Generic$IEnumerator$1$" + Bridge.getTypeAlias(T) + "$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1")];
                                    }
                                    if (rowIterator.System$Collections$IEnumerator$moveNext()) {
                                        throw new System.ArgumentOutOfRangeException.$ctor4("data", System.String.format("Resources.ArgumentArrayWrongLength", [Bridge.box(rows, System.Int32)]));
                                    }
                                }
                                finally {
                                    if (Bridge.hasValue(rowIterator)) {
                                        rowIterator.System$IDisposable$Dispose();
                                    }
                                }
                            }
                        }
                        if (columnIterator.System$Collections$IEnumerator$moveNext()) {
                            throw new System.ArgumentOutOfRangeException.$ctor4("data", System.String.format("Resources.ArgumentArrayWrongLength", [Bridge.box(columns, System.Int32)]));
                        }

                    }
                    finally {
                        if (Bridge.hasValue(columnIterator)) {
                            columnIterator.System$IDisposable$Dispose();
                        }
                    }
                    return new (MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T)).$ctor1(rows, columns, array);
                },
                OfRowEnumerables: function (rows, columns, data) {
                    var array = System.Array.init(Bridge.Int.mul(rows, columns), function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                    var rowIterator = Bridge.getEnumerator(data, System.Collections.Generic.IEnumerable$1(T));
                    try {
                        for (var row = 0; row < rows; row = (row + 1) | 0) {
                            if (!rowIterator.System$Collections$IEnumerator$moveNext()) {
                                throw new System.ArgumentOutOfRangeException.$ctor4("data", System.String.format("Resources.ArgumentArrayWrongLength", [Bridge.box(rows, System.Int32)]));
                            }
                            var columnIterator = Bridge.getEnumerator(rowIterator[Bridge.geti(rowIterator, "System$Collections$Generic$IEnumerator$1$System$Collections$Generic$IEnumerable$1$" + Bridge.getTypeAlias(T) + "$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1")], T);
                            try {
                                for (var index = row; index < array.length; index = (index + rows) | 0) {
                                    if (!columnIterator.System$Collections$IEnumerator$moveNext()) {
                                        throw new System.ArgumentOutOfRangeException.$ctor4("data", System.String.format("Resources.ArgumentArrayWrongLength", [Bridge.box(columns, System.Int32)]));
                                    }
                                    array[System.Array.index(index, array)] = columnIterator[Bridge.geti(columnIterator, "System$Collections$Generic$IEnumerator$1$" + Bridge.getTypeAlias(T) + "$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1")];
                                }
                                if (columnIterator.System$Collections$IEnumerator$moveNext()) {
                                    throw new System.ArgumentOutOfRangeException.$ctor4("data", System.String.format("Resources.ArgumentArrayWrongLength", [Bridge.box(columns, System.Int32)]));
                                }
                            }
                            finally {
                                if (Bridge.hasValue(columnIterator)) {
                                    columnIterator.System$IDisposable$Dispose();
                                }
                            }
                        }
                        if (rowIterator.System$Collections$IEnumerator$moveNext()) {
                            throw new System.ArgumentOutOfRangeException.$ctor4("data", System.String.format("Resources.ArgumentArrayWrongLength", [Bridge.box(rows, System.Int32)]));
                        }
                    }
                    finally {
                        if (Bridge.hasValue(rowIterator)) {
                            rowIterator.System$IDisposable$Dispose();
                        }
                    }
                    return new (MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T)).$ctor1(rows, columns, array);
                }
            }
        },
        fields: {
            Data: null
        },
        props: {
            /**
             * True if the matrix storage format is dense.
             *
             * @instance
             * @public
             * @override
             * @readonly
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1
             * @function IsDense
             * @type boolean
             */
            IsDense: {
                get: function () {
                    return true;
                }
            },
            /**
             * True if all fields of this matrix can be set to any value.
             False if some fields are fixed, like on a diagonal matrix.
             *
             * @instance
             * @public
             * @override
             * @readonly
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1
             * @function IsFullyMutable
             * @type boolean
             */
            IsFullyMutable: {
                get: function () {
                    return true;
                }
            }
        },
        ctors: {
            ctor: function (rows, columns) {
                this.$initialize();
                MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).ctor.call(this, rows, columns);
                this.Data = System.Array.init(Bridge.Int.mul(rows, columns), function (){
                    return Bridge.getDefaultValue(T);
                }, T);
            },
            $ctor1: function (rows, columns, data) {
                this.$initialize();
                MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).ctor.call(this, rows, columns);
                if (data == null) {
                    throw new System.ArgumentNullException.$ctor1("data");
                }

                if (data.length !== Bridge.Int.mul(rows, columns)) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("data", System.String.format("Resources.ArgumentArrayWrongLength, rows*columns", null));
                }

                this.Data = data;
            }
        },
        methods: {
            /**
             * True if the specified field can be set to any value.
             False if the field is fixed, like an off-diagonal field on a diagonal matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1
             * @param   {number}     row       
             * @param   {number}     column
             * @return  {boolean}
             */
            IsMutableAt: function (row, column) {
                return true;
            },
            /**
             * Retrieves the requested element without range checking.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1
             * @param   {number}    row       
             * @param   {number}    column
             * @return  {T}
             */
            At: function (row, column) {
                return this.Data[System.Array.index((((Bridge.Int.mul(column, this.RowCount)) + row) | 0), this.Data)];
            },
            /**
             * Sets the element without range checking.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1
             * @param   {number}    row       
             * @param   {number}    column    
             * @param   {T}         value
             * @return  {void}
             */
            At$1: function (row, column, value) {
                this.Data[System.Array.index((((Bridge.Int.mul(column, this.RowCount)) + row) | 0), this.Data)] = value;
            },
            /**
             * Evaluate the row and column at a specific data index.
             *
             * @instance
             * @private
             * @this MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1
             * @param   {number}          index     
             * @param   {System.Int32}    row       
             * @param   {System.Int32}    column
             * @return  {void}
             */
            RowColumnAtIndex: function (index, row, column) {
                column.v = Bridge.Math.divRem(index, this.RowCount, row);
            },
            Clear: function () {
                System.Array.fill(this.Data, function () {
                    return Bridge.getDefaultValue(T);
                }, 0, this.Data.length);
            },
            ClearUnchecked: function (rowIndex, rowCount, columnIndex, columnCount) {
                if (rowIndex === 0 && columnIndex === 0 && rowCount === this.RowCount && columnCount === this.ColumnCount) {
                    System.Array.fill(this.Data, function () {
                        return Bridge.getDefaultValue(T);
                    }, 0, this.Data.length);
                    return;
                }

                for (var j = columnIndex; j < ((columnIndex + columnCount) | 0); j = (j + 1) | 0) {
                    System.Array.fill(this.Data, function () {
                        return Bridge.getDefaultValue(T);
                    }, ((Bridge.Int.mul(j, this.RowCount) + rowIndex) | 0), rowCount);
                }
            },
            ClearRowsUnchecked: function (rowIndices) {
                for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                    var offset = Bridge.Int.mul(j, this.RowCount);
                    for (var k = 0; k < rowIndices.length; k = (k + 1) | 0) {
                        this.Data[System.Array.index(((offset + rowIndices[System.Array.index(k, rowIndices)]) | 0), this.Data)] = MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero;
                    }
                }
            },
            ClearColumnsUnchecked: function (columnIndices) {
                for (var k = 0; k < columnIndices.length; k = (k + 1) | 0) {
                    System.Array.fill(this.Data, function () {
                        return Bridge.getDefaultValue(T);
                    }, Bridge.Int.mul(columnIndices[System.Array.index(k, columnIndices)], this.RowCount), this.RowCount);
                }
            },
            CopyToUnchecked: function (target, existingData) {
                var denseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T));
                if (denseTarget != null) {
                    this.CopyToUnchecked$1(denseTarget);
                    return;
                }


                for (var j = 0, offset = 0; j < this.ColumnCount; j = (j + 1) | 0, offset = (offset + this.RowCount) | 0) {
                    for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                        target.At$1(i, j, this.Data[System.Array.index(((i + offset) | 0), this.Data)]);
                    }
                }
            },
            CopyToUnchecked$1: function (target) {
                System.Array.copy(this.Data, 0, target.Data, 0, this.Data.length);
            },
            CopySubMatrixToUnchecked: function (target, sourceRowIndex, targetRowIndex, rowCount, sourceColumnIndex, targetColumnIndex, columnCount, existingData) {
                var denseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T));
                if (denseTarget != null) {
                    this.CopySubMatrixToUnchecked$1(denseTarget, sourceRowIndex, targetRowIndex, rowCount, sourceColumnIndex, targetColumnIndex, columnCount);
                    return;
                }



                for (var j = sourceColumnIndex, jj = targetColumnIndex; j < ((sourceColumnIndex + columnCount) | 0); j = (j + 1) | 0, jj = (jj + 1) | 0) {
                    var index = (sourceRowIndex + Bridge.Int.mul(j, this.RowCount)) | 0;
                    for (var ii = targetRowIndex; ii < ((targetRowIndex + rowCount) | 0); ii = (ii + 1) | 0) {
                        target.At$1(ii, jj, this.Data[System.Array.index(Bridge.identity(index, ((index = (index + 1) | 0))), this.Data)]);
                    }
                }
            },
            CopySubMatrixToUnchecked$1: function (target, sourceRowIndex, targetRowIndex, rowCount, sourceColumnIndex, targetColumnIndex, columnCount) {
                for (var j = sourceColumnIndex, jj = targetColumnIndex; j < ((sourceColumnIndex + columnCount) | 0); j = (j + 1) | 0, jj = (jj + 1) | 0) {
                    System.Array.copy(this.Data, ((Bridge.Int.mul(j, this.RowCount) + sourceRowIndex) | 0), target.Data, ((Bridge.Int.mul(jj, target.RowCount) + targetRowIndex) | 0), rowCount);
                }
            },
            CopySubRowToUnchecked: function (target, rowIndex, sourceColumnIndex, targetColumnIndex, columnCount, existingData) {
                var targetDense = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(T));
                if (targetDense != null) {
                    for (var j = 0; j < columnCount; j = (j + 1) | 0) {
                        targetDense.Data[System.Array.index(((j + targetColumnIndex) | 0), targetDense.Data)] = this.Data[System.Array.index(((Bridge.Int.mul((((j + sourceColumnIndex) | 0)), this.RowCount) + rowIndex) | 0), this.Data)];
                    }
                    return;
                }


                for (var j1 = sourceColumnIndex, jj = targetColumnIndex; j1 < ((sourceColumnIndex + columnCount) | 0); j1 = (j1 + 1) | 0, jj = (jj + 1) | 0) {
                    target.At$1(jj, this.Data[System.Array.index((((Bridge.Int.mul(j1, this.RowCount)) + rowIndex) | 0), this.Data)]);
                }
            },
            CopySubColumnToUnchecked: function (target, columnIndex, sourceRowIndex, targetRowIndex, rowCount, existingData) {
                var targetDense = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(T));
                if (targetDense != null) {
                    System.Array.copy(this.Data, ((Bridge.Int.mul(columnIndex, this.RowCount) + sourceRowIndex) | 0), targetDense.Data, targetRowIndex, rowCount);
                    return;
                }


                var offset = Bridge.Int.mul(columnIndex, this.RowCount);
                for (var i = sourceRowIndex, ii = targetRowIndex; i < ((sourceRowIndex + rowCount) | 0); i = (i + 1) | 0, ii = (ii + 1) | 0) {
                    target.At$1(ii, this.Data[System.Array.index(((offset + i) | 0), this.Data)]);
                }
            },
            TransposeToUnchecked: function (target, existingData) {
                var denseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T));
                if (denseTarget != null) {
                    this.TransposeToUnchecked$1(denseTarget);
                    return;
                }

                var sparseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T));
                if (sparseTarget != null) {
                    this.TransposeToUnchecked$2(sparseTarget);
                    return;
                }


                for (var j = 0, offset = 0; j < this.ColumnCount; j = (j + 1) | 0, offset = (offset + this.RowCount) | 0) {
                    for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                        target.At$1(j, i, this.Data[System.Array.index(((i + offset) | 0), this.Data)]);
                    }
                }
            },
            TransposeToUnchecked$1: function (target) {
                for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                    var index = Bridge.Int.mul(j, this.RowCount);
                    for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                        target.Data[System.Array.index((((Bridge.Int.mul(i, this.ColumnCount)) + j) | 0), target.Data)] = this.Data[System.Array.index(((index + i) | 0), this.Data)];
                    }
                }
            },
            TransposeToUnchecked$2: function (target) {
                var rowPointers = target.RowPointers;
                var columnIndices = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                var values = new (System.Collections.Generic.List$1(T)).ctor();

                for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                    rowPointers[System.Array.index(j, rowPointers)] = values.Count;
                    var index = Bridge.Int.mul(j, this.RowCount);
                    for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                        if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, this.Data[System.Array.index(((index + i) | 0), this.Data)], T)) {
                            values.add(this.Data[System.Array.index(((index + i) | 0), this.Data)]);
                            columnIndices.add(i);
                        }
                    }
                }

                rowPointers[System.Array.index(this.ColumnCount, rowPointers)] = values.Count;
                target.ColumnIndices = columnIndices.ToArray();
                target.Values = values.ToArray();
            },
            TransposeSquareInplaceUnchecked: function () {
                for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                    var index = Bridge.Int.mul(j, this.RowCount);
                    for (var i = 0; i < j; i = (i + 1) | 0) {
                        var swap = this.Data[System.Array.index(((index + i) | 0), this.Data)];
                        this.Data[System.Array.index(((index + i) | 0), this.Data)] = this.Data[System.Array.index(((Bridge.Int.mul(i, this.ColumnCount) + j) | 0), this.Data)];
                        this.Data[System.Array.index(((Bridge.Int.mul(i, this.ColumnCount) + j) | 0), this.Data)] = swap;
                    }
                }
            },
            ToRowMajorArray: function () {
                var ret = System.Array.init(this.Data.length, function (){
                    return Bridge.getDefaultValue(T);
                }, T);
                for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                    var offset = Bridge.Int.mul(i, this.ColumnCount);
                    for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                        ret[System.Array.index(((offset + j) | 0), ret)] = this.Data[System.Array.index((((Bridge.Int.mul(j, this.RowCount)) + i) | 0), this.Data)];
                    }
                }
                return ret;
            },
            ToColumnMajorArray: function () {
                var ret = System.Array.init(this.Data.length, function (){
                    return Bridge.getDefaultValue(T);
                }, T);
                System.Array.copy(this.Data, 0, ret, 0, this.Data.length);
                return ret;
            },
            ToRowArrays: function () {
                var ret = System.Array.init(this.RowCount, null, System.Array.type(T));

                for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                    var row = System.Array.init(this.ColumnCount, function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                    for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                        row[System.Array.index(j, row)] = this.Data[System.Array.index(((Bridge.Int.mul(j, this.RowCount) + i) | 0), this.Data)];
                    }
                    ret[System.Array.index(i, ret)] = row;
                }

                return ret;
            },
            ToColumnArrays: function () {
                var ret = System.Array.init(this.ColumnCount, null, System.Array.type(T));

                for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                    var column = System.Array.init(this.RowCount, function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                    System.Array.copy(this.Data, Bridge.Int.mul(j, this.RowCount), column, 0, this.RowCount);
                    ret[System.Array.index(j, ret)] = column;
                }

                return ret;
            },
            ToArray: function () {
                var ret = System.Array.create(function (){
                    return Bridge.getDefaultValue(T);
                }, null, T, this.RowCount, this.ColumnCount);
                for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                    for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                        ret.set([i, j], this.Data[System.Array.index((((Bridge.Int.mul(j, this.RowCount)) + i) | 0), this.Data)]);
                    }
                }
                return ret;
            },
            AsColumnMajorArray: function () {
                return this.Data;
            },
            Enumerate: function () {
                return this.Data;
            },
            EnumerateIndexed: function () {
                return new (Bridge.GeneratorEnumerable$1(System.Tuple$3(System.Int32,System.Int32,T)))(Bridge.fn.bind(this, function ()  {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        index,
                        j,
                        i,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Tuple$3(System.Int32,System.Int32,T)))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        index = 0;
                                            j = 0;
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ( j < this.ColumnCount ) {
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 9;
                                        continue;
                                    }
                                    case 2: {
                                        i = 0;
                                            $step = 3;
                                            continue;
                                    }
                                    case 3: {
                                        if ( i < this.RowCount ) {
                                                $step = 4;
                                                continue;
                                            }
                                        $step = 7;
                                        continue;
                                    }
                                    case 4: {
                                        $enumerator.current = { Item1: i, Item2: j, Item3: this.Data[System.Array.index(index, this.Data)] };
                                            $step = 5;
                                            return true;
                                    }
                                    case 5: {
                                        index = (index + 1) | 0;
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        i = (i + 1) | 0;
                                        $step = 3;
                                        continue;
                                    }
                                    case 7: {
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        j = (j + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 9: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }));
            },
            EnumerateNonZero: function () {
                return System.Linq.Enumerable.from(this.Data, T).where(function (x) {
                        return !Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, x, T);
                    });
            },
            EnumerateNonZeroIndexed: function () {
                return new (Bridge.GeneratorEnumerable$1(System.Tuple$3(System.Int32,System.Int32,T)))(Bridge.fn.bind(this, function ()  {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        index,
                        j,
                        i,
                        x,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Tuple$3(System.Int32,System.Int32,T)))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        index = 0;
                                            j = 0;
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ( j < this.ColumnCount ) {
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 11;
                                        continue;
                                    }
                                    case 2: {
                                        i = 0;
                                            $step = 3;
                                            continue;
                                    }
                                    case 3: {
                                        if ( i < this.RowCount ) {
                                                $step = 4;
                                                continue;
                                            }
                                        $step = 9;
                                        continue;
                                    }
                                    case 4: {
                                        x = this.Data[System.Array.index(index, this.Data)];
                                            if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, x, T)) {
                                                $step = 5;
                                                continue;
                                            } 
                                            $step = 7;
                                            continue;
                                    }
                                    case 5: {
                                        $enumerator.current = { Item1: i, Item2: j, Item3: x };
                                            $step = 6;
                                            return true;
                                    }
                                    case 6: {
                                        $step = 7;
                                        continue;
                                    }
                                    case 7: {
                                        index = (index + 1) | 0;
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        i = (i + 1) | 0;
                                        $step = 3;
                                        continue;
                                    }
                                    case 9: {
                                        $step = 10;
                                        continue;
                                    }
                                    case 10: {
                                        j = (j + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 11: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }));
            },
            Find: function (predicate, zeros) {
                for (var i = 0; i < this.Data.length; i = (i + 1) | 0) {
                    if (predicate(this.Data[System.Array.index(i, this.Data)])) {
                        var row = { }, column = { };
                        this.RowColumnAtIndex(i, row, column);
                        return { Item1: row.v, Item2: column.v, Item3: this.Data[System.Array.index(i, this.Data)] };
                    }
                }
                return null;
            },
            Find2Unchecked: function (TOther, other, predicate, zeros) {
                var denseOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(TOther));
                if (denseOther != null) {
                    var otherData = denseOther.Data;
                    for (var i = 0; i < this.Data.length; i = (i + 1) | 0) {
                        if (predicate(this.Data[System.Array.index(i, this.Data)], otherData[System.Array.index(i, otherData)])) {
                            var row = { }, column = { };
                            this.RowColumnAtIndex(i, row, column);
                            return { Item1: row.v, Item2: column.v, Item3: this.Data[System.Array.index(i, this.Data)], Item4: otherData[System.Array.index(i, otherData)] };

                        }
                    }
                    return null;
                }

                var diagonalOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(TOther));
                if (diagonalOther != null) {
                    var otherData1 = diagonalOther.Data;
                    var otherZero = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(TOther).Matrix.Zero;
                    var k = 0;
                    for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                        for (var i1 = 0; i1 < this.RowCount; i1 = (i1 + 1) | 0) {
                            if (predicate(this.Data[System.Array.index(k, this.Data)], i1 === j ? otherData1[System.Array.index(i1, otherData1)] : otherZero)) {
                                return { Item1: i1, Item2: j, Item3: this.Data[System.Array.index(k, this.Data)], Item4: i1 === j ? otherData1[System.Array.index(i1, otherData1)] : otherZero };
                            }
                            k = (k + 1) | 0;
                        }
                    }
                    return null;
                }

                var sparseOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(TOther));
                if (sparseOther != null) {
                    var otherRowPointers = sparseOther.RowPointers;
                    var otherColumnIndices = sparseOther.ColumnIndices;
                    var otherValues = sparseOther.Values;
                    var otherZero1 = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(TOther).Matrix.Zero;
                    var k1 = 0;
                    for (var row1 = 0; row1 < this.RowCount; row1 = (row1 + 1) | 0) {
                        for (var col = 0; col < this.ColumnCount; col = (col + 1) | 0) {
                            if (k1 < otherRowPointers[System.Array.index(((row1 + 1) | 0), otherRowPointers)] && otherColumnIndices[System.Array.index(k1, otherColumnIndices)] === col) {
                                if (predicate(this.Data[System.Array.index(((Bridge.Int.mul(col, this.RowCount) + row1) | 0), this.Data)], otherValues[System.Array.index(k1, otherValues)])) {
                                    return { Item1: row1, Item2: col, Item3: this.Data[System.Array.index(((Bridge.Int.mul(col, this.RowCount) + row1) | 0), this.Data)], Item4: otherValues[System.Array.index(k1, otherValues)] };
                                }
                                k1 = (k1 + 1) | 0;
                            } else {
                                if (predicate(this.Data[System.Array.index(((Bridge.Int.mul(col, this.RowCount) + row1) | 0), this.Data)], otherZero1)) {
                                    return { Item1: row1, Item2: col, Item3: this.Data[System.Array.index(((Bridge.Int.mul(col, this.RowCount) + row1) | 0), this.Data)], Item4: otherValues[System.Array.index(k1, otherValues)] };
                                }
                            }
                        }
                    }
                    return null;
                }


                return MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).prototype.Find2Unchecked.call(this, TOther, other, predicate, zeros);
            },
            MapInplace: function (f, zeros) {

                for (var i = 0; i < this.Data.length; i = (i + 1) | 0) {
                    this.Data[System.Array.index(i, this.Data)] = f(this.Data[System.Array.index(i, this.Data)]);
                }

            },
            MapIndexedInplace: function (f, zeros) {

                var index = Bridge.Int.mul(0, this.RowCount);
                for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                    for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                        this.Data[System.Array.index(index, this.Data)] = f(i, j, this.Data[System.Array.index(index, this.Data)]);
                        index = (index + 1) | 0;
                    }
                }

            },
            MapToUnchecked: function (TU, target, f, zeros, existingData) {
                var denseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(TU));
                if (denseTarget != null) {

                    for (var i = 0; i < this.Data.length; i = (i + 1) | 0) {
                        denseTarget.Data[System.Array.index(i, denseTarget.Data)] = f(this.Data[System.Array.index(i, this.Data)]);
                    }

                    return;
                }


                var index = 0;
                for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                    for (var i1 = 0; i1 < this.RowCount; i1 = (i1 + 1) | 0) {
                        target.At$1(i1, j, f(this.Data[System.Array.index(Bridge.identity(index, ((index = (index + 1) | 0))), this.Data)]));
                    }
                }
            },
            MapIndexedToUnchecked: function (TU, target, f, zeros, existingData) {
                var denseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(TU));
                if (denseTarget != null) {

                    var index = Bridge.Int.mul(0, this.RowCount);
                    for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                        for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                            denseTarget.Data[System.Array.index(index, denseTarget.Data)] = f(i, j, this.Data[System.Array.index(index, this.Data)]);
                            index = (index + 1) | 0;
                        }
                    }

                    return;
                }


                var index2 = 0;
                for (var j1 = 0; j1 < this.ColumnCount; j1 = (j1 + 1) | 0) {
                    for (var i1 = 0; i1 < this.RowCount; i1 = (i1 + 1) | 0) {
                        target.At$1(i1, j1, f(i1, j1, this.Data[System.Array.index(Bridge.identity(index2, ((index2 = (index2 + 1) | 0))), this.Data)]));
                    }
                }
            },
            MapSubMatrixIndexedToUnchecked: function (TU, target, f, sourceRowIndex, targetRowIndex, rowCount, sourceColumnIndex, targetColumnIndex, columnCount, zeros, existingData) {
                var denseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(TU));
                if (denseTarget != null) {

                    for (var j = 0; j < columnCount; j = (j + 1) | 0) {
                        var sourceIndex = (sourceRowIndex + Bridge.Int.mul((((j + sourceColumnIndex) | 0)), this.RowCount)) | 0;
                        var targetIndex = (targetRowIndex + Bridge.Int.mul((((j + targetColumnIndex) | 0)), target.RowCount)) | 0;
                        for (var i = 0; i < rowCount; i = (i + 1) | 0) {
                            denseTarget.Data[System.Array.index(Bridge.identity(targetIndex, ((targetIndex = (targetIndex + 1) | 0))), denseTarget.Data)] = f(((targetRowIndex + i) | 0), ((targetColumnIndex + j) | 0), this.Data[System.Array.index(Bridge.identity(sourceIndex, ((sourceIndex = (sourceIndex + 1) | 0))), this.Data)]);
                        }
                    }

                    return;
                }



                for (var j1 = sourceColumnIndex, jj = targetColumnIndex; j1 < ((sourceColumnIndex + columnCount) | 0); j1 = (j1 + 1) | 0, jj = (jj + 1) | 0) {
                    var index = (sourceRowIndex + Bridge.Int.mul(j1, this.RowCount)) | 0;
                    for (var ii = targetRowIndex; ii < ((targetRowIndex + rowCount) | 0); ii = (ii + 1) | 0) {
                        target.At$1(ii, jj, f(ii, jj, this.Data[System.Array.index(Bridge.identity(index, ((index = (index + 1) | 0))), this.Data)]));
                    }
                }
            },
            FoldByRowUnchecked: function (TU, target, f, finalize, state, zeros) {
                for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                    var s = state[System.Array.index(i, state)];
                    for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                        s = f(s, this.Data[System.Array.index(((Bridge.Int.mul(j, this.RowCount) + i) | 0), this.Data)]);
                    }
                    target[System.Array.index(i, target)] = finalize(s, this.ColumnCount);
                }
            },
            FoldByColumnUnchecked: function (TU, target, f, finalize, state, zeros) {
                for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                    var offset = Bridge.Int.mul(j, this.RowCount);
                    var s = state[System.Array.index(j, state)];
                    for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                        s = f(s, this.Data[System.Array.index(((offset + i) | 0), this.Data)]);
                    }
                    target[System.Array.index(j, target)] = finalize(s, this.RowCount);
                }
            },
            Fold2Unchecked: function (TOther, TState, other, f, state, zeros) {
                var denseOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(TOther));
                if (denseOther != null) {
                    var otherData = denseOther.Data;
                    for (var i = 0; i < this.Data.length; i = (i + 1) | 0) {
                        state = f(state, this.Data[System.Array.index(i, this.Data)], otherData[System.Array.index(i, otherData)]);
                    }
                    return state;
                }

                var diagonalOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(TOther));
                if (diagonalOther != null) {
                    var otherData1 = diagonalOther.Data;
                    var otherZero = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(TOther).Matrix.Zero;
                    var k = 0;
                    for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                        for (var i1 = 0; i1 < this.RowCount; i1 = (i1 + 1) | 0) {
                            state = f(state, this.Data[System.Array.index(k, this.Data)], i1 === j ? otherData1[System.Array.index(i1, otherData1)] : otherZero);
                            k = (k + 1) | 0;
                        }
                    }
                    return state;
                }

                var sparseOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(TOther));
                if (sparseOther != null) {
                    var otherRowPointers = sparseOther.RowPointers;
                    var otherColumnIndices = sparseOther.ColumnIndices;
                    var otherValues = sparseOther.Values;
                    var otherZero1 = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(TOther).Matrix.Zero;
                    var k1 = 0;
                    for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                        for (var col = 0; col < this.ColumnCount; col = (col + 1) | 0) {
                            if (k1 < otherRowPointers[System.Array.index(((row + 1) | 0), otherRowPointers)] && otherColumnIndices[System.Array.index(k1, otherColumnIndices)] === col) {
                                state = f(state, this.Data[System.Array.index(((Bridge.Int.mul(col, this.RowCount) + row) | 0), this.Data)], otherValues[System.Array.index(Bridge.identity(k1, ((k1 = (k1 + 1) | 0))), otherValues)]);
                            } else {
                                state = f(state, this.Data[System.Array.index(((Bridge.Int.mul(col, this.RowCount) + row) | 0), this.Data)], otherZero1);
                            }
                        }
                    }
                    return state;
                }


                return MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).prototype.Fold2Unchecked.call(this, TOther, TState, other, f, state, zeros);
            }
        }
    }; });

    Bridge.define("MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1", function (T) { return {
        inherits: [MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T)],
        statics: {
            methods: {
                OfVector: function (vector) {
                    var storage = new (MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(T)).ctor(vector.Length);
                    vector.CopyToUnchecked(storage, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                    return storage;
                },
                OfValue: function (length, value) {
                    if (length < 1) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("length", System.String.format("Resources.ArgumentLessThanOne", [Bridge.box(length, System.Int32)]));
                    }

                    var data = System.Array.init(length, function (){
                        return Bridge.getDefaultValue(T);
                    }, T);

                    for (var i = 0; i < data.length; i = (i + 1) | 0) {
                        data[System.Array.index(i, data)] = value;
                    }

                    return new (MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(T)).$ctor1(length, data);
                },
                OfInit: function (length, init) {
                    if (length < 1) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("length", System.String.format("Resources.ArgumentLessThanOne,{0}", [Bridge.box(length, System.Int32)]));
                    }

                    var data = System.Array.init(length, function (){
                        return Bridge.getDefaultValue(T);
                    }, T);

                    for (var i = 0; i < data.length; i = (i + 1) | 0) {
                        data[System.Array.index(i, data)] = init(i);
                    }

                    return new (MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(T)).$ctor1(length, data);
                },
                OfEnumerable: function (data) {
                    var $t;
                    if (data == null) {
                        throw new System.ArgumentNullException.$ctor1("data");
                    }

                    var arrayData = Bridge.as(data, System.Array.type(T));
                    if (arrayData != null) {
                        var copy = System.Array.init(arrayData.length, function (){
                            return Bridge.getDefaultValue(T);
                        }, T);
                        System.Array.copy(arrayData, 0, copy, 0, arrayData.length);
                        return new (MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(T)).$ctor1(copy.length, copy);
                    }

                    var array = ($t = T, System.Linq.Enumerable.from(data, $t).ToArray($t));
                    return new (MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(T)).$ctor1(array.length, array);
                },
                OfIndexedEnumerable: function (length, data) {
                    var $t;
                    if (data == null) {
                        throw new System.ArgumentNullException.$ctor1("data");
                    }

                    var array = System.Array.init(length, function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                    $t = Bridge.getEnumerator(data, System.Tuple$2(System.Int32,T));
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            array[System.Array.index(item.Item1, array)] = item.Item2;
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    return new (MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(T)).$ctor1(array.length, array);
                }
            }
        },
        fields: {
            Data: null
        },
        props: {
            /**
             * True if the vector storage format is dense.
             *
             * @instance
             * @public
             * @override
             * @readonly
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1
             * @function IsDense
             * @type boolean
             */
            IsDense: {
                get: function () {
                    return true;
                }
            }
        },
        ctors: {
            ctor: function (length) {
                this.$initialize();
                MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).ctor.call(this, length);
                this.Data = System.Array.init(length, function (){
                    return Bridge.getDefaultValue(T);
                }, T);
            },
            $ctor1: function (length, data) {
                this.$initialize();
                MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).ctor.call(this, length);
                if (data == null) {
                    throw new System.ArgumentNullException.$ctor1("data");
                }

                if (data.length !== length) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("data", System.String.format("Resources.ArgumentArrayWrongLength {0}", [Bridge.box(length, System.Int32)]));
                }

                this.Data = data;
            }
        },
        methods: {
            /**
             * Retrieves the requested element without range checking.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1
             * @param   {number}    index
             * @return  {T}
             */
            At: function (index) {
                return this.Data[System.Array.index(index, this.Data)];
            },
            /**
             * Sets the element without range checking.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1
             * @param   {number}    index    
             * @param   {T}         value
             * @return  {void}
             */
            At$1: function (index, value) {
                this.Data[System.Array.index(index, this.Data)] = value;
            },
            Clear: function () {
                System.Array.fill(this.Data, function () {
                    return Bridge.getDefaultValue(T);
                }, 0, this.Data.length);
            },
            Clear$1: function (index, count) {
                System.Array.fill(this.Data, function () {
                    return Bridge.getDefaultValue(T);
                }, index, count);
            },
            CopyToUnchecked: function (target, existingData) {
                var denseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(T));
                if (denseTarget != null) {
                    if (!Bridge.referenceEquals(this, denseTarget)) {
                        System.Array.copy(this.Data, 0, denseTarget.Data, 0, this.Data.length);
                    }

                    return;
                }

                var sparseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(T));
                if (sparseTarget != null) {
                    var indices = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                    var values = new (System.Collections.Generic.List$1(T)).ctor();

                    for (var i = 0; i < this.Data.length; i = (i + 1) | 0) {
                        var item = this.Data[System.Array.index(i, this.Data)];
                        if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, item, T)) {
                            values.add(item);
                            indices.add(i);
                        }
                    }

                    sparseTarget.Indices = indices.ToArray();
                    sparseTarget.Values = values.ToArray();
                    sparseTarget.ValueCount = values.Count;
                    return;
                }


                for (var i1 = 0; i1 < this.Data.length; i1 = (i1 + 1) | 0) {
                    target.At$1(i1, this.Data[System.Array.index(i1, this.Data)]);
                }
            },
            CopyToRowUnchecked: function (target, rowIndex, existingData) {
                var denseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T));
                if (denseTarget != null) {
                    for (var j = 0; j < this.Data.length; j = (j + 1) | 0) {
                        denseTarget.Data[System.Array.index(((Bridge.Int.mul(j, target.RowCount) + rowIndex) | 0), denseTarget.Data)] = this.Data[System.Array.index(j, this.Data)];
                    }
                    return;
                }


                for (var j1 = 0; j1 < this.Length; j1 = (j1 + 1) | 0) {
                    target.At$1(rowIndex, j1, this.Data[System.Array.index(j1, this.Data)]);
                }
            },
            CopyToColumnUnchecked: function (target, columnIndex, existingData) {
                var denseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T));
                if (denseTarget != null) {
                    System.Array.copy(this.Data, 0, denseTarget.Data, Bridge.Int.mul(columnIndex, denseTarget.RowCount), this.Data.length);
                    return;
                }


                for (var i = 0; i < this.Length; i = (i + 1) | 0) {
                    target.At$1(i, columnIndex, this.Data[System.Array.index(i, this.Data)]);
                }
            },
            CopySubVectorToUnchecked: function (target, sourceIndex, targetIndex, count, existingData) {
                var denseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(T));
                if (denseTarget != null) {
                    System.Array.copy(this.Data, sourceIndex, denseTarget.Data, targetIndex, count);
                    return;
                }


                MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).prototype.CopySubVectorToUnchecked.call(this, target, sourceIndex, targetIndex, count, existingData);
            },
            CopyToSubRowUnchecked: function (target, rowIndex, sourceColumnIndex, targetColumnIndex, columnCount, existingData) {
                var denseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T));
                if (denseTarget != null) {
                    for (var j = 0; j < this.Data.length; j = (j + 1) | 0) {
                        denseTarget.Data[System.Array.index(((Bridge.Int.mul((((j + targetColumnIndex) | 0)), target.RowCount) + rowIndex) | 0), denseTarget.Data)] = this.Data[System.Array.index(((j + sourceColumnIndex) | 0), this.Data)];
                    }
                    return;
                }


                for (var j1 = sourceColumnIndex, jj = targetColumnIndex; j1 < ((sourceColumnIndex + columnCount) | 0); j1 = (j1 + 1) | 0, jj = (jj + 1) | 0) {
                    target.At$1(rowIndex, jj, this.Data[System.Array.index(j1, this.Data)]);
                }
            },
            CopyToSubColumnUnchecked: function (target, columnIndex, sourceRowIndex, targetRowIndex, rowCount, existingData) {
                var denseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T));
                if (denseTarget != null) {
                    System.Array.copy(this.Data, sourceRowIndex, denseTarget.Data, ((Bridge.Int.mul(columnIndex, denseTarget.RowCount) + targetRowIndex) | 0), rowCount);
                    return;
                }


                for (var i = sourceRowIndex, ii = targetRowIndex; i < ((sourceRowIndex + rowCount) | 0); i = (i + 1) | 0, ii = (ii + 1) | 0) {
                    target.At$1(ii, columnIndex, this.Data[System.Array.index(i, this.Data)]);
                }
            },
            ToArray: function () {
                var ret = System.Array.init(this.Data.length, function (){
                    return Bridge.getDefaultValue(T);
                }, T);
                System.Array.copy(this.Data, 0, ret, 0, this.Data.length);
                return ret;
            },
            AsArray: function () {
                return this.Data;
            },
            Enumerate: function () {
                return this.Data;
            },
            EnumerateIndexed: function () {
                return System.Linq.Enumerable.from(this.Data, T).select(function (t, i) {
                        return { Item1: i, Item2: t };
                    });
            },
            EnumerateNonZero: function () {
                return System.Linq.Enumerable.from(this.Data, T).where(function (x) {
                        return !Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, x, T);
                    });
            },
            EnumerateNonZeroIndexed: function () {
                return new (Bridge.GeneratorEnumerable$1(System.Tuple$2(System.Int32,T)))(Bridge.fn.bind(this, function ()  {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        i,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Tuple$2(System.Int32,T)))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        i = 0;
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ( i < this.Data.length ) {
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 7;
                                        continue;
                                    }
                                    case 2: {
                                        if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, this.Data[System.Array.index(i, this.Data)], T)) {
                                                $step = 3;
                                                continue;
                                            } 
                                            $step = 5;
                                            continue;
                                    }
                                    case 3: {
                                        $enumerator.current = { Item1: i, Item2: this.Data[System.Array.index(i, this.Data)] };
                                            $step = 4;
                                            return true;
                                    }
                                    case 4: {
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        i = (i + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 7: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }));
            },
            Find: function (predicate, zeros) {
                for (var i = 0; i < this.Data.length; i = (i + 1) | 0) {
                    if (predicate(this.Data[System.Array.index(i, this.Data)])) {
                        return { Item1: i, Item2: this.Data[System.Array.index(i, this.Data)] };
                    }
                }
                return null;
            },
            Find2Unchecked: function (TOther, other, predicate, zeros) {
                var denseOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(TOther));
                if (denseOther != null) {
                    var otherData = denseOther.Data;
                    for (var i = 0; i < this.Data.length; i = (i + 1) | 0) {
                        if (predicate(this.Data[System.Array.index(i, this.Data)], otherData[System.Array.index(i, otherData)])) {
                            return { Item1: i, Item2: this.Data[System.Array.index(i, this.Data)], Item3: otherData[System.Array.index(i, otherData)] };

                        }
                    }
                    return null;
                }

                var sparseOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(TOther));
                if (sparseOther != null) {
                    var otherIndices = sparseOther.Indices;
                    var otherValues = sparseOther.Values;
                    var otherValueCount = sparseOther.ValueCount;
                    var otherZero = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(TOther).Matrix.Zero;
                    var k = 0;
                    for (var i1 = 0; i1 < this.Data.length; i1 = (i1 + 1) | 0) {
                        if (k < otherValueCount && otherIndices[System.Array.index(k, otherIndices)] === i1) {
                            if (predicate(this.Data[System.Array.index(i1, this.Data)], otherValues[System.Array.index(k, otherValues)])) {
                                return { Item1: i1, Item2: this.Data[System.Array.index(i1, this.Data)], Item3: otherValues[System.Array.index(k, otherValues)] };
                            }
                            k = (k + 1) | 0;
                        } else {
                            if (predicate(this.Data[System.Array.index(i1, this.Data)], otherZero)) {
                                return { Item1: i1, Item2: this.Data[System.Array.index(i1, this.Data)], Item3: otherZero };
                            }
                        }
                    }
                    return null;
                }


                return MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).prototype.Find2Unchecked.call(this, TOther, other, predicate, zeros);
            },
            MapInplace: function (f, zeros) {

                for (var i = 0; i < this.Data.length; i = (i + 1) | 0) {
                    this.Data[System.Array.index(i, this.Data)] = f(this.Data[System.Array.index(i, this.Data)]);
                }

            },
            MapIndexedInplace: function (f, zeros) {

                for (var i = 0; i < this.Data.length; i = (i + 1) | 0) {
                    this.Data[System.Array.index(i, this.Data)] = f(i, this.Data[System.Array.index(i, this.Data)]);
                }

            },
            MapToUnchecked: function (TU, target, f, zeros, existingData) {
                var denseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(TU));
                if (denseTarget != null) {

                    for (var i = 0; i < this.Data.length; i = (i + 1) | 0) {
                        denseTarget.Data[System.Array.index(i, denseTarget.Data)] = f(this.Data[System.Array.index(i, this.Data)]);
                    }

                    return;
                }


                for (var i1 = 0; i1 < this.Length; i1 = (i1 + 1) | 0) {
                    target.At$1(i1, f(this.Data[System.Array.index(i1, this.Data)]));
                }
            },
            MapIndexedToUnchecked: function (TU, target, f, zeros, existingData) {
                var denseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(TU));
                if (denseTarget != null) {

                    for (var i = 0; i < this.Data.length; i = (i + 1) | 0) {
                        denseTarget.Data[System.Array.index(i, denseTarget.Data)] = f(i, this.Data[System.Array.index(i, this.Data)]);
                    }

                    return;
                }


                for (var i1 = 0; i1 < this.Length; i1 = (i1 + 1) | 0) {
                    target.At$1(i1, f(i1, this.Data[System.Array.index(i1, this.Data)]));
                }
            },
            Map2ToUnchecked: function (target, other, f, zeros, existingData) {
                if (Bridge.is(target, MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(T))) {
                    var intermediate = new (MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(T)).ctor(target.Length);
                    this.Map2ToUnchecked(intermediate, other, f, zeros, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                    intermediate.CopyTo(target, existingData);
                    return;
                }

                var denseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(T));
                var denseOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(T));
                if (denseTarget != null && denseOther != null) {

                    for (var i = 0; i < this.Data.length; i = (i + 1) | 0) {
                        denseTarget.Data[System.Array.index(i, denseTarget.Data)] = f(this.Data[System.Array.index(i, this.Data)], denseOther.Data[System.Array.index(i, denseOther.Data)]);
                    }


                    return;
                }

                var sparseOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(T));
                if (denseTarget != null && sparseOther != null) {
                    var targetData = denseTarget.Data;
                    var otherIndices = sparseOther.Indices;
                    var otherValues = sparseOther.Values;
                    var otherValueCount = sparseOther.ValueCount;

                    var k = 0;
                    for (var i1 = 0; i1 < this.Data.length; i1 = (i1 + 1) | 0) {
                        if (k < otherValueCount && otherIndices[System.Array.index(k, otherIndices)] === i1) {
                            targetData[System.Array.index(i1, targetData)] = f(this.Data[System.Array.index(i1, this.Data)], otherValues[System.Array.index(k, otherValues)]);
                            k = (k + 1) | 0;
                        } else {
                            targetData[System.Array.index(i1, targetData)] = f(this.Data[System.Array.index(i1, this.Data)], MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero);
                        }
                    }

                    return;
                }

                MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).prototype.Map2ToUnchecked.call(this, target, other, f, zeros, existingData);
            },
            Fold2Unchecked: function (TOther, TState, other, f, state, zeros) {
                var denseOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(TOther));
                if (denseOther != null) {
                    var otherData = denseOther.Data;
                    for (var i = 0; i < this.Data.length; i = (i + 1) | 0) {
                        state = f(state, this.Data[System.Array.index(i, this.Data)], otherData[System.Array.index(i, otherData)]);
                    }

                    return state;
                }

                var sparseOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(TOther));
                if (sparseOther != null) {
                    var otherIndices = sparseOther.Indices;
                    var otherValues = sparseOther.Values;
                    var otherValueCount = sparseOther.ValueCount;
                    var otherZero = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(TOther).Vector.Zero;

                    var k = 0;
                    for (var i1 = 0; i1 < this.Data.length; i1 = (i1 + 1) | 0) {
                        if (k < otherValueCount && otherIndices[System.Array.index(k, otherIndices)] === i1) {
                            state = f(state, this.Data[System.Array.index(i1, this.Data)], otherValues[System.Array.index(k, otherValues)]);
                            k = (k + 1) | 0;
                        } else {
                            state = f(state, this.Data[System.Array.index(i1, this.Data)], otherZero);
                        }
                    }

                    return state;
                }

                return MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).prototype.Fold2Unchecked.call(this, TOther, TState, other, f, state, zeros);
            }
        }
    }; });

    Bridge.define("MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1", function (T) { return {
        inherits: [MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T)],
        statics: {
            methods: {
                OfMatrix: function (matrix) {
                    var storage = new (MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(T)).ctor(matrix.RowCount, matrix.ColumnCount);
                    matrix.CopyToUnchecked(storage, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                    return storage;
                },
                OfArray: function (array) {
                    var storage = new (MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(T)).ctor(System.Array.getLength(array, 0), System.Array.getLength(array, 1));
                    for (var i = 0; i < storage.RowCount; i = (i + 1) | 0) {
                        for (var j = 0; j < storage.ColumnCount; j = (j + 1) | 0) {
                            if (i === j) {
                                storage.Data[System.Array.index(i, storage.Data)] = array.get([i, j]);
                            } else if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, array.get([i, j]), T)) {
                                throw new System.ArgumentException.$ctor1("Cannot set an off-diagonal element in a diagonal matrix.");
                            }
                        }
                    }
                    return storage;
                },
                OfValue: function (rows, columns, diagonalValue) {
                    var storage = new (MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(T)).ctor(rows, columns);
                    for (var i = 0; i < storage.Data.length; i = (i + 1) | 0) {
                        storage.Data[System.Array.index(i, storage.Data)] = diagonalValue;
                    }
                    return storage;
                },
                OfInit: function (rows, columns, init) {
                    var storage = new (MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(T)).ctor(rows, columns);
                    for (var i = 0; i < storage.Data.length; i = (i + 1) | 0) {
                        storage.Data[System.Array.index(i, storage.Data)] = init(i);
                    }
                    return storage;
                },
                OfEnumerable: function (rows, columns, data) {
                    var $t;
                    if (data == null) {
                        throw new System.ArgumentNullException.$ctor1("data");
                    }

                    var arrayData = Bridge.as(data, System.Array.type(T));
                    if (arrayData != null) {
                        var copy = System.Array.init(arrayData.length, function (){
                            return Bridge.getDefaultValue(T);
                        }, T);
                        System.Array.copy(arrayData, 0, copy, 0, arrayData.length);
                        return new (MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(T)).$ctor1(rows, columns, copy);
                    }

                    return new (MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(T)).$ctor1(rows, columns, ($t = T, System.Linq.Enumerable.from(data, $t).ToArray($t)));
                },
                OfIndexedEnumerable: function (rows, columns, data) {
                    var $t;
                    if (data == null) {
                        throw new System.ArgumentNullException.$ctor1("data");
                    }

                    var storage = new (MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(T)).ctor(rows, columns);
                    $t = Bridge.getEnumerator(data, System.Tuple$2(System.Int32,T));
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            storage.Data[System.Array.index(item.Item1, storage.Data)] = item.Item2;
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    return storage;
                }
            }
        },
        fields: {
            Data: null
        },
        props: {
            /**
             * True if the matrix storage format is dense.
             *
             * @instance
             * @public
             * @override
             * @readonly
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1
             * @function IsDense
             * @type boolean
             */
            IsDense: {
                get: function () {
                    return false;
                }
            },
            /**
             * True if all fields of this matrix can be set to any value.
             False if some fields are fixed, like on a diagonal matrix.
             *
             * @instance
             * @public
             * @override
             * @readonly
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1
             * @function IsFullyMutable
             * @type boolean
             */
            IsFullyMutable: {
                get: function () {
                    return false;
                }
            }
        },
        ctors: {
            ctor: function (rows, columns) {
                this.$initialize();
                MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).ctor.call(this, rows, columns);
                this.Data = System.Array.init(Math.min(rows, columns), function (){
                    return Bridge.getDefaultValue(T);
                }, T);
            },
            $ctor1: function (rows, columns, data) {
                this.$initialize();
                MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).ctor.call(this, rows, columns);
                if (data == null) {
                    throw new System.ArgumentNullException.$ctor1("data");
                }

                if (data.length !== Math.min(rows, columns)) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("data", System.String.format("Resources.ArgumentArrayWrongLength", [Bridge.box(Math.min(rows, columns), System.Int32)]));
                }

                this.Data = data;
            }
        },
        methods: {
            /**
             * True if the specified field can be set to any value.
             False if the field is fixed, like an off-diagonal field on a diagonal matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1
             * @param   {number}     row       
             * @param   {number}     column
             * @return  {boolean}
             */
            IsMutableAt: function (row, column) {
                return row === column;
            },
            /**
             * Retrieves the requested element without range checking.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1
             * @param   {number}    row       
             * @param   {number}    column
             * @return  {T}
             */
            At: function (row, column) {
                return row === column ? this.Data[System.Array.index(row, this.Data)] : MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero;
            },
            /**
             * Sets the element without range checking.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1
             * @param   {number}    row       
             * @param   {number}    column    
             * @param   {T}         value
             * @return  {void}
             */
            At$1: function (row, column, value) {
                if (row === column) {
                    this.Data[System.Array.index(row, this.Data)] = value;
                } else if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, value, T)) {
                    throw new System.IndexOutOfRangeException.$ctor1("Cannot set an off-diagonal element in a diagonal matrix.");
                }
            },
            /**
             * Returns a hash code for this instance.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1
             * @return  {number}        A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
             */
            getHashCode: function () {
                var hashNum = Math.min(this.Data.length, 25);
                var hash = 17;
                for (var i = 0; i < hashNum; i = (i + 1) | 0) {
                    hash = (Bridge.Int.mul(hash, 31) + Bridge.getHashCode(this.Data[i])) | 0;
                }
                return hash;
            },
            Clear: function () {
                System.Array.fill(this.Data, function () {
                    return Bridge.getDefaultValue(T);
                }, 0, this.Data.length);
            },
            ClearUnchecked: function (rowIndex, rowCount, columnIndex, columnCount) {
                var beginInclusive = Math.max(rowIndex, columnIndex);
                var endExclusive = Math.min(((rowIndex + rowCount) | 0), ((columnIndex + columnCount) | 0));
                if (endExclusive > beginInclusive) {
                    System.Array.fill(this.Data, function () {
                        return Bridge.getDefaultValue(T);
                    }, beginInclusive, ((endExclusive - beginInclusive) | 0));
                }
            },
            ClearRowsUnchecked: function (rowIndices) {
                for (var i = 0; i < rowIndices.length; i = (i + 1) | 0) {
                    this.Data[System.Array.index(rowIndices[System.Array.index(i, rowIndices)], this.Data)] = MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero;
                }
            },
            ClearColumnsUnchecked: function (columnIndices) {
                for (var i = 0; i < columnIndices.length; i = (i + 1) | 0) {
                    this.Data[System.Array.index(columnIndices[System.Array.index(i, columnIndices)], this.Data)] = MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero;
                }
            },
            CopyToUnchecked: function (target, existingData) {
                var diagonalTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(T));
                if (diagonalTarget != null) {
                    this.CopyToUnchecked$2(diagonalTarget);
                    return;
                }

                var denseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T));
                if (denseTarget != null) {
                    this.CopyToUnchecked$1(denseTarget, existingData);
                    return;
                }

                var sparseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T));
                if (sparseTarget != null) {
                    this.CopyToUnchecked$3(sparseTarget, existingData);
                    return;
                }


                if (existingData === MathNet.Numerics.LinearAlgebra.ExistingData.Clear) {
                    target.Clear();
                }

                for (var i = 0; i < this.Data.length; i = (i + 1) | 0) {
                    target.At$1(i, i, this.Data[System.Array.index(i, this.Data)]);
                }
            },
            CopyToUnchecked$2: function (target) {
                System.Array.copy(this.Data, 0, target.Data, 0, this.Data.length);
            },
            CopyToUnchecked$3: function (target, existingData) {
                if (existingData === MathNet.Numerics.LinearAlgebra.ExistingData.Clear) {
                    target.Clear();
                }

                for (var i = 0; i < this.Data.length; i = (i + 1) | 0) {
                    target.At$1(i, i, this.Data[System.Array.index(i, this.Data)]);
                }
            },
            CopyToUnchecked$1: function (target, existingData) {
                if (existingData === MathNet.Numerics.LinearAlgebra.ExistingData.Clear) {
                    target.Clear();
                }

                for (var i = 0; i < this.Data.length; i = (i + 1) | 0) {
                    target.Data[System.Array.index(Bridge.Int.mul(i, (((target.RowCount + 1) | 0))), target.Data)] = this.Data[System.Array.index(i, this.Data)];
                }
            },
            CopySubMatrixToUnchecked: function (target, sourceRowIndex, targetRowIndex, rowCount, sourceColumnIndex, targetColumnIndex, columnCount, existingData) {
                var denseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T));
                if (denseTarget != null) {
                    this.CopySubMatrixToUnchecked$1(denseTarget, sourceRowIndex, targetRowIndex, rowCount, sourceColumnIndex, targetColumnIndex, columnCount, existingData);
                    return;
                }

                var diagonalTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(T));
                if (diagonalTarget != null) {
                    this.CopySubMatrixToUnchecked$2(diagonalTarget, sourceRowIndex, targetRowIndex, rowCount, sourceColumnIndex, targetColumnIndex, columnCount);
                    return;
                }



                if (existingData === MathNet.Numerics.LinearAlgebra.ExistingData.Clear) {
                    target.ClearUnchecked(targetRowIndex, rowCount, targetColumnIndex, columnCount);
                }

                if (sourceRowIndex === sourceColumnIndex) {
                    for (var i = 0; i < Math.min(columnCount, rowCount); i = (i + 1) | 0) {
                        target.At$1(((targetRowIndex + i) | 0), ((targetColumnIndex + i) | 0), this.Data[System.Array.index(((sourceRowIndex + i) | 0), this.Data)]);
                    }
                } else if (sourceRowIndex > sourceColumnIndex && ((sourceColumnIndex + columnCount) | 0) > sourceRowIndex) {
                    var columnInit = (sourceRowIndex - sourceColumnIndex) | 0;
                    for (var i1 = 0; i1 < Math.min(((columnCount - columnInit) | 0), rowCount); i1 = (i1 + 1) | 0) {
                        target.At$1(((targetRowIndex + i1) | 0), ((((columnInit + targetColumnIndex) | 0) + i1) | 0), this.Data[System.Array.index(((sourceRowIndex + i1) | 0), this.Data)]);
                    }
                } else if (sourceRowIndex < sourceColumnIndex && ((sourceRowIndex + rowCount) | 0) > sourceColumnIndex) {
                    var rowInit = (sourceColumnIndex - sourceRowIndex) | 0;
                    for (var i2 = 0; i2 < Math.min(columnCount, ((rowCount - rowInit) | 0)); i2 = (i2 + 1) | 0) {
                        target.At$1(((((rowInit + targetRowIndex) | 0) + i2) | 0), ((targetColumnIndex + i2) | 0), this.Data[System.Array.index(((sourceColumnIndex + i2) | 0), this.Data)]);
                    }
                }
            },
            CopySubMatrixToUnchecked$2: function (target, sourceRowIndex, targetRowIndex, rowCount, sourceColumnIndex, targetColumnIndex, columnCount) {
                if (((sourceRowIndex - sourceColumnIndex) | 0) !== ((targetRowIndex - targetColumnIndex) | 0)) {
                    if (System.Linq.Enumerable.from(this.Data, T).any(function (x) {
                            return !Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, x, T);
                        })) {
                        throw new System.NotSupportedException.ctor();
                    }

                    target.ClearUnchecked(targetRowIndex, rowCount, targetColumnIndex, columnCount);
                    return;
                }

                var beginInclusive = Math.max(sourceRowIndex, sourceColumnIndex);
                var endExclusive = Math.min(((sourceRowIndex + rowCount) | 0), ((sourceColumnIndex + columnCount) | 0));
                if (endExclusive > beginInclusive) {
                    var beginTarget = Math.max(targetRowIndex, targetColumnIndex);
                    System.Array.copy(this.Data, beginInclusive, target.Data, beginTarget, ((endExclusive - beginInclusive) | 0));
                }
            },
            CopySubMatrixToUnchecked$1: function (target, sourceRowIndex, targetRowIndex, rowCount, sourceColumnIndex, targetColumnIndex, columnCount, existingData) {
                if (existingData === MathNet.Numerics.LinearAlgebra.ExistingData.Clear) {
                    target.ClearUnchecked(targetRowIndex, rowCount, targetColumnIndex, columnCount);
                }

                if (sourceRowIndex > sourceColumnIndex && ((sourceColumnIndex + columnCount) | 0) > sourceRowIndex) {

                    var columnInit = (sourceRowIndex - sourceColumnIndex) | 0;
                    var offset = (Bridge.Int.mul((((columnInit + targetColumnIndex) | 0)), target.RowCount) + targetRowIndex) | 0;
                    var step = (target.RowCount + 1) | 0;
                    var end = (Math.min(((columnCount - columnInit) | 0), rowCount) + sourceRowIndex) | 0;

                    for (var i = sourceRowIndex, j = offset; i < end; i = (i + 1) | 0, j = (j + step) | 0) {
                        target.Data[System.Array.index(j, target.Data)] = this.Data[System.Array.index(i, this.Data)];
                    }
                } else if (sourceRowIndex < sourceColumnIndex && ((sourceRowIndex + rowCount) | 0) > sourceColumnIndex) {

                    var rowInit = (sourceColumnIndex - sourceRowIndex) | 0;
                    var offset1 = (((Bridge.Int.mul(targetColumnIndex, target.RowCount) + rowInit) | 0) + targetRowIndex) | 0;
                    var step1 = (target.RowCount + 1) | 0;
                    var end1 = (Math.min(columnCount, ((rowCount - rowInit) | 0)) + sourceColumnIndex) | 0;

                    for (var i1 = sourceColumnIndex, j1 = offset1; i1 < end1; i1 = (i1 + 1) | 0, j1 = (j1 + step1) | 0) {
                        target.Data[System.Array.index(j1, target.Data)] = this.Data[System.Array.index(i1, this.Data)];
                    }
                } else {
                    var offset2 = (Bridge.Int.mul(targetColumnIndex, target.RowCount) + targetRowIndex) | 0;
                    var step2 = (target.RowCount + 1) | 0;
                    var end2 = (Math.min(columnCount, rowCount) + sourceRowIndex) | 0;

                    for (var i2 = sourceRowIndex, j2 = offset2; i2 < end2; i2 = (i2 + 1) | 0, j2 = (j2 + step2) | 0) {
                        target.Data[System.Array.index(j2, target.Data)] = this.Data[System.Array.index(i2, this.Data)];
                    }
                }
            },
            CopySubRowToUnchecked: function (target, rowIndex, sourceColumnIndex, targetColumnIndex, columnCount, existingData) {
                if (existingData === MathNet.Numerics.LinearAlgebra.ExistingData.Clear) {
                    target.Clear$1(targetColumnIndex, columnCount);
                }

                if (rowIndex >= sourceColumnIndex && rowIndex < ((sourceColumnIndex + columnCount) | 0) && rowIndex < this.Data.length) {
                    target.At$1(((((rowIndex - sourceColumnIndex) | 0) + targetColumnIndex) | 0), this.Data[System.Array.index(rowIndex, this.Data)]);
                }
            },
            CopySubColumnToUnchecked: function (target, columnIndex, sourceRowIndex, targetRowIndex, rowCount, existingData) {
                if (existingData === MathNet.Numerics.LinearAlgebra.ExistingData.Clear) {
                    target.Clear$1(targetRowIndex, rowCount);
                }

                if (columnIndex >= sourceRowIndex && columnIndex < ((sourceRowIndex + rowCount) | 0) && columnIndex < this.Data.length) {
                    target.At$1(((((columnIndex - sourceRowIndex) | 0) + targetRowIndex) | 0), this.Data[System.Array.index(columnIndex, this.Data)]);
                }
            },
            TransposeToUnchecked: function (target, existingData) {
                this.CopyToUnchecked(target, existingData);
            },
            TransposeSquareInplaceUnchecked: function () { },
            ToRowMajorArray: function () {
                var ret = System.Array.init(Bridge.Int.mul(this.RowCount, this.ColumnCount), function (){
                    return Bridge.getDefaultValue(T);
                }, T);
                var stride = (this.ColumnCount + 1) | 0;
                for (var i = 0; i < this.Data.length; i = (i + 1) | 0) {
                    ret[System.Array.index(Bridge.Int.mul(i, stride), ret)] = this.Data[System.Array.index(i, this.Data)];
                }
                return ret;
            },
            ToColumnMajorArray: function () {
                var ret = System.Array.init(Bridge.Int.mul(this.RowCount, this.ColumnCount), function (){
                    return Bridge.getDefaultValue(T);
                }, T);
                var stride = (this.RowCount + 1) | 0;
                for (var i = 0; i < this.Data.length; i = (i + 1) | 0) {
                    ret[System.Array.index(Bridge.Int.mul(i, stride), ret)] = this.Data[System.Array.index(i, this.Data)];
                }
                return ret;
            },
            ToRowArrays: function () {
                var $t;
                var ret = System.Array.init(this.RowCount, null, System.Array.type(T));
                for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                    ret[System.Array.index(i, ret)] = System.Array.init(this.ColumnCount, function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                }
                for (var i1 = 0; i1 < this.Data.length; i1 = (i1 + 1) | 0) {
                    ($t = ret[System.Array.index(i1, ret)])[System.Array.index(i1, $t)] = this.Data[System.Array.index(i1, this.Data)];
                }
                return ret;
            },
            ToColumnArrays: function () {
                var $t;
                var ret = System.Array.init(this.ColumnCount, null, System.Array.type(T));
                for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                    ret[System.Array.index(j, ret)] = System.Array.init(this.RowCount, function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                }
                for (var i = 0; i < this.Data.length; i = (i + 1) | 0) {
                    ($t = ret[System.Array.index(i, ret)])[System.Array.index(i, $t)] = this.Data[System.Array.index(i, this.Data)];
                }
                return ret;
            },
            ToArray: function () {
                var ret = System.Array.create(function (){
                    return Bridge.getDefaultValue(T);
                }, null, T, this.RowCount, this.ColumnCount);
                for (var i = 0; i < this.Data.length; i = (i + 1) | 0) {
                    ret.set([i, i], this.Data[System.Array.index(i, this.Data)]);
                }
                return ret;
            },
            Enumerate: function () {
                return new (Bridge.GeneratorEnumerable$1(T))(Bridge.fn.bind(this, function ()  {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        j,
                        i,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(T))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        j = 0;
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ( j < this.ColumnCount ) {
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 9;
                                        continue;
                                    }
                                    case 2: {
                                        i = 0;
                                            $step = 3;
                                            continue;
                                    }
                                    case 3: {
                                        if ( i < this.RowCount ) {
                                                $step = 4;
                                                continue;
                                            }
                                        $step = 7;
                                        continue;
                                    }
                                    case 4: {
                                        $enumerator.current = i === j ? this.Data[System.Array.index(i, this.Data)] : MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero;
                                            $step = 5;
                                            return true;
                                    }
                                    case 5: {
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        i = (i + 1) | 0;
                                        $step = 3;
                                        continue;
                                    }
                                    case 7: {
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        j = (j + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 9: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }));
            },
            EnumerateIndexed: function () {
                return new (Bridge.GeneratorEnumerable$1(System.Tuple$3(System.Int32,System.Int32,T)))(Bridge.fn.bind(this, function ()  {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        j,
                        i,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Tuple$3(System.Int32,System.Int32,T)))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        j = 0;
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ( j < this.ColumnCount ) {
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 9;
                                        continue;
                                    }
                                    case 2: {
                                        i = 0;
                                            $step = 3;
                                            continue;
                                    }
                                    case 3: {
                                        if ( i < this.RowCount ) {
                                                $step = 4;
                                                continue;
                                            }
                                        $step = 7;
                                        continue;
                                    }
                                    case 4: {
                                        $enumerator.current = i === j ? { Item1: i, Item2: i, Item3: this.Data[System.Array.index(i, this.Data)] } : { Item1: i, Item2: j, Item3: MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero };
                                            $step = 5;
                                            return true;
                                    }
                                    case 5: {
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        i = (i + 1) | 0;
                                        $step = 3;
                                        continue;
                                    }
                                    case 7: {
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        j = (j + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 9: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }));
            },
            EnumerateNonZero: function () {
                return System.Linq.Enumerable.from(this.Data, T).where(function (x) {
                        return !Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, x, T);
                    });
            },
            EnumerateNonZeroIndexed: function () {
                return new (Bridge.GeneratorEnumerable$1(System.Tuple$3(System.Int32,System.Int32,T)))(Bridge.fn.bind(this, function ()  {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        i,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Tuple$3(System.Int32,System.Int32,T)))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        i = 0;
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ( i < this.Data.length ) {
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 7;
                                        continue;
                                    }
                                    case 2: {
                                        if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, this.Data[System.Array.index(i, this.Data)], T)) {
                                                $step = 3;
                                                continue;
                                            } 
                                            $step = 5;
                                            continue;
                                    }
                                    case 3: {
                                        $enumerator.current = { Item1: i, Item2: i, Item3: this.Data[System.Array.index(i, this.Data)] };
                                            $step = 4;
                                            return true;
                                    }
                                    case 4: {
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        i = (i + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 7: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }));
            },
            Find: function (predicate, zeros) {
                for (var i = 0; i < this.Data.length; i = (i + 1) | 0) {
                    if (predicate(this.Data[System.Array.index(i, this.Data)])) {
                        return { Item1: i, Item2: i, Item3: this.Data[System.Array.index(i, this.Data)] };
                    }
                }
                if (zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include && (this.RowCount > 1 || this.ColumnCount > 1)) {
                    if (predicate(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero)) {
                        return { Item1: this.RowCount > 1 ? 1 : 0, Item2: this.RowCount > 1 ? 0 : 1, Item3: MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero };
                    }
                }
                return null;
            },
            Find2Unchecked: function (TOther, other, predicate, zeros) {
                var denseOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(TOther));
                if (denseOther != null) {
                    var otherData = denseOther.Data;
                    var k = 0;
                    for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                        for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                            if (predicate(i === j ? this.Data[System.Array.index(i, this.Data)] : MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, otherData[System.Array.index(k, otherData)])) {
                                return { Item1: i, Item2: j, Item3: i === j ? this.Data[System.Array.index(i, this.Data)] : MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, Item4: otherData[System.Array.index(k, otherData)] };
                            }
                            k = (k + 1) | 0;
                        }
                    }
                    return null;
                }

                var diagonalOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(TOther));
                if (diagonalOther != null) {
                    var otherData1 = diagonalOther.Data;
                    for (var i1 = 0; i1 < this.Data.length; i1 = (i1 + 1) | 0) {
                        if (predicate(this.Data[System.Array.index(i1, this.Data)], otherData1[System.Array.index(i1, otherData1)])) {
                            return { Item1: i1, Item2: i1, Item3: this.Data[System.Array.index(i1, this.Data)], Item4: otherData1[System.Array.index(i1, otherData1)] };
                        }
                    }
                    if (zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include && (this.RowCount > 1 || this.ColumnCount > 1)) {
                        var otherZero = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(TOther).Matrix.Zero;
                        if (predicate(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, otherZero)) {
                            return { Item1: this.RowCount > 1 ? 1 : 0, Item2: this.RowCount > 1 ? 0 : 1, Item3: MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, Item4: otherZero };
                        }
                    }
                    return null;
                }

                var sparseOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(TOther));
                if (sparseOther != null) {
                    var otherRowPointers = sparseOther.RowPointers;
                    var otherColumnIndices = sparseOther.ColumnIndices;
                    var otherValues = sparseOther.Values;
                    var otherZero1 = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(TOther).Matrix.Zero;
                    for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                        var diagonal = false;
                        var startIndex = otherRowPointers[System.Array.index(row, otherRowPointers)];
                        var endIndex = otherRowPointers[System.Array.index(((row + 1) | 0), otherRowPointers)];
                        for (var j1 = startIndex; j1 < endIndex; j1 = (j1 + 1) | 0) {
                            if (otherColumnIndices[System.Array.index(j1, otherColumnIndices)] === row) {
                                diagonal = true;
                                if (predicate(this.Data[System.Array.index(row, this.Data)], otherValues[System.Array.index(j1, otherValues)])) {
                                    return { Item1: row, Item2: row, Item3: this.Data[System.Array.index(row, this.Data)], Item4: otherValues[System.Array.index(j1, otherValues)] };
                                }
                            } else {
                                if (predicate(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, otherValues[System.Array.index(j1, otherValues)])) {
                                    return { Item1: row, Item2: otherColumnIndices[System.Array.index(j1, otherColumnIndices)], Item3: MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, Item4: otherValues[System.Array.index(j1, otherValues)] };
                                }
                            }
                        }
                        if (!diagonal && row < this.ColumnCount) {
                            if (predicate(this.Data[System.Array.index(row, this.Data)], otherZero1)) {
                                return { Item1: row, Item2: row, Item3: this.Data[System.Array.index(row, this.Data)], Item4: otherZero1 };
                            }
                        }
                    }
                    if (zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include && sparseOther.ValueCount < (Bridge.Int.mul(this.RowCount, this.ColumnCount))) {
                        if (predicate(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, otherZero1)) {
                            var k1 = 0;
                            for (var row1 = 0; row1 < this.RowCount; row1 = (row1 + 1) | 0) {
                                for (var col = 0; col < this.ColumnCount; col = (col + 1) | 0) {
                                    if (k1 < otherRowPointers[System.Array.index(((row1 + 1) | 0), otherRowPointers)] && otherColumnIndices[System.Array.index(k1, otherColumnIndices)] === col) {
                                        k1 = (k1 + 1) | 0;
                                    } else if (row1 !== col) {
                                        return { Item1: row1, Item2: col, Item3: MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, Item4: otherZero1 };
                                    }
                                }
                            }
                        }
                    }
                    return null;
                }


                return MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).prototype.Find2Unchecked.call(this, TOther, other, predicate, zeros);
            },
            MapInplace: function (f, zeros) {
                if (zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include) {
                    throw new System.NotSupportedException.$ctor1("Cannot map non-zero off-diagonal values into a diagonal matrix");
                }


                for (var i = 0; i < this.Data.length; i = (i + 1) | 0) {
                    this.Data[System.Array.index(i, this.Data)] = f(this.Data[System.Array.index(i, this.Data)]);
                }

            },
            MapIndexedInplace: function (f, zeros) {
                if (zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include) {
                    throw new System.NotSupportedException.$ctor1("Cannot map non-zero off-diagonal values into a diagonal matrix");
                }


                for (var i = 0; i < this.Data.length; i = (i + 1) | 0) {
                    this.Data[System.Array.index(i, this.Data)] = f(i, i, this.Data[System.Array.index(i, this.Data)]);
                }

            },
            MapToUnchecked: function (TU, target, f, zeros, existingData) {
                var processZeros = zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include || !Bridge.equals(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, f(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero));

                var diagonalTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(TU));
                if (diagonalTarget != null) {
                    if (processZeros) {
                        throw new System.NotSupportedException.$ctor1("Cannot map non-zero off-diagonal values into a diagonal matrix");
                    }


                    for (var i = 0; i < this.Data.length; i = (i + 1) | 0) {
                        diagonalTarget.Data[System.Array.index(i, diagonalTarget.Data)] = f(this.Data[System.Array.index(i, this.Data)]);
                    }

                    return;
                }


                if (existingData === MathNet.Numerics.LinearAlgebra.ExistingData.Clear && !processZeros) {
                    target.Clear();
                }

                if (processZeros) {
                    for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                        for (var i1 = 0; i1 < this.RowCount; i1 = (i1 + 1) | 0) {
                            target.At$1(i1, j, f(i1 === j ? this.Data[System.Array.index(i1, this.Data)] : MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero));
                        }
                    }
                } else {
                    for (var i2 = 0; i2 < this.Data.length; i2 = (i2 + 1) | 0) {
                        target.At$1(i2, i2, f(this.Data[System.Array.index(i2, this.Data)]));
                    }
                }
            },
            MapIndexedToUnchecked: function (TU, target, f, zeros, existingData) {
                var processZeros = zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include || !Bridge.equals(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, f(0, 1, MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero));

                var diagonalTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(TU));
                if (diagonalTarget != null) {
                    if (processZeros) {
                        throw new System.NotSupportedException.$ctor1("Cannot map non-zero off-diagonal values into a diagonal matrix");
                    }


                    for (var i = 0; i < this.Data.length; i = (i + 1) | 0) {
                        diagonalTarget.Data[System.Array.index(i, diagonalTarget.Data)] = f(i, i, this.Data[System.Array.index(i, this.Data)]);
                    }

                    return;
                }


                if (existingData === MathNet.Numerics.LinearAlgebra.ExistingData.Clear && !processZeros) {
                    target.Clear();
                }

                if (processZeros) {
                    for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                        for (var i1 = 0; i1 < this.RowCount; i1 = (i1 + 1) | 0) {
                            target.At$1(i1, j, f(i1, j, i1 === j ? this.Data[System.Array.index(i1, this.Data)] : MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero));
                        }
                    }
                } else {
                    for (var i2 = 0; i2 < this.Data.length; i2 = (i2 + 1) | 0) {
                        target.At$1(i2, i2, f(i2, i2, this.Data[System.Array.index(i2, this.Data)]));
                    }
                }
            },
            MapSubMatrixIndexedToUnchecked: function (TU, target, f, sourceRowIndex, targetRowIndex, rowCount, sourceColumnIndex, targetColumnIndex, columnCount, zeros, existingData) {
                var diagonalTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(TU));
                if (diagonalTarget != null) {
                    this.MapSubMatrixIndexedToUnchecked$2(TU, diagonalTarget, f, sourceRowIndex, targetRowIndex, rowCount, sourceColumnIndex, targetColumnIndex, columnCount, zeros);
                    return;
                }

                var denseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(TU));
                if (denseTarget != null) {
                    this.MapSubMatrixIndexedToUnchecked$1(TU, denseTarget, f, sourceRowIndex, targetRowIndex, rowCount, sourceColumnIndex, targetColumnIndex, columnCount, zeros, existingData);
                    return;
                }



                if (existingData === MathNet.Numerics.LinearAlgebra.ExistingData.Clear) {
                    target.ClearUnchecked(targetRowIndex, rowCount, targetColumnIndex, columnCount);
                }

                if (sourceRowIndex === sourceColumnIndex) {
                    var targetRow = targetRowIndex;
                    var targetColumn = targetColumnIndex;
                    for (var i = 0; i < Math.min(columnCount, rowCount); i = (i + 1) | 0) {
                        target.At$1(targetRow, targetColumn, f(targetRow, targetColumn, this.Data[System.Array.index(((sourceRowIndex + i) | 0), this.Data)]));
                        targetRow = (targetRow + 1) | 0;
                        targetColumn = (targetColumn + 1) | 0;
                    }
                } else if (sourceRowIndex > sourceColumnIndex && ((sourceColumnIndex + columnCount) | 0) > sourceRowIndex) {
                    var columnInit = (sourceRowIndex - sourceColumnIndex) | 0;
                    var targetRow1 = targetRowIndex;
                    var targetColumn1 = (targetColumnIndex + columnInit) | 0;
                    for (var i1 = 0; i1 < Math.min(((columnCount - columnInit) | 0), rowCount); i1 = (i1 + 1) | 0) {
                        target.At$1(targetRow1, targetColumn1, f(targetRow1, targetColumn1, this.Data[System.Array.index(((sourceRowIndex + i1) | 0), this.Data)]));
                        targetRow1 = (targetRow1 + 1) | 0;
                        targetColumn1 = (targetColumn1 + 1) | 0;
                    }
                } else if (sourceRowIndex < sourceColumnIndex && ((sourceRowIndex + rowCount) | 0) > sourceColumnIndex) {
                    var rowInit = (sourceColumnIndex - sourceRowIndex) | 0;
                    var targetRow2 = (targetRowIndex + rowInit) | 0;
                    var targetColumn2 = targetColumnIndex;
                    for (var i2 = 0; i2 < Math.min(columnCount, ((rowCount - rowInit) | 0)); i2 = (i2 + 1) | 0) {
                        target.At$1(targetRow2, targetColumn2, f(targetRow2, targetColumn2, this.Data[System.Array.index(((sourceColumnIndex + i2) | 0), this.Data)]));
                        targetRow2 = (targetRow2 + 1) | 0;
                        targetColumn2 = (targetColumn2 + 1) | 0;
                    }
                }
            },
            MapSubMatrixIndexedToUnchecked$2: function (TU, target, f, sourceRowIndex, targetRowIndex, rowCount, sourceColumnIndex, targetColumnIndex, columnCount, zeros) {
                var processZeros = zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include || !Bridge.equals(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, f(0, 1, MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero));
                if (processZeros || ((sourceRowIndex - sourceColumnIndex) | 0) !== ((targetRowIndex - targetColumnIndex) | 0)) {
                    throw new System.NotSupportedException.$ctor1("Cannot map non-zero off-diagonal values into a diagonal matrix");
                }

                var beginInclusive = Math.max(sourceRowIndex, sourceColumnIndex);
                var count = (Math.min(((sourceRowIndex + rowCount) | 0), ((sourceColumnIndex + columnCount) | 0)) - beginInclusive) | 0;
                if (count > 0) {
                    var beginTarget = Math.max(targetRowIndex, targetColumnIndex);

                    var targetIndex = (beginTarget + 0) | 0;
                    for (var i = 0; i < count; i = (i + 1) | 0) {
                        target.Data[System.Array.index(targetIndex, target.Data)] = f(targetIndex, targetIndex, this.Data[System.Array.index(((beginInclusive + i) | 0), this.Data)]);
                        targetIndex = (targetIndex + 1) | 0;
                    }

                }
            },
            MapSubMatrixIndexedToUnchecked$1: function (TU, target, f, sourceRowIndex, targetRowIndex, rowCount, sourceColumnIndex, targetColumnIndex, columnCount, zeros, existingData) {
                var processZeros = zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include || !Bridge.equals(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, f(0, 1, MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero));
                if (existingData === MathNet.Numerics.LinearAlgebra.ExistingData.Clear && !processZeros) {
                    target.ClearUnchecked(targetRowIndex, rowCount, targetColumnIndex, columnCount);
                }

                if (processZeros) {

                    var sourceColumn = (sourceColumnIndex + 0) | 0;
                    var targetColumn = (targetColumnIndex + 0) | 0;
                    for (var j = 0; j < columnCount; j = (j + 1) | 0) {
                        var targetIndex = (targetRowIndex + Bridge.Int.mul((((j + targetColumnIndex) | 0)), target.RowCount)) | 0;
                        var sourceRow = sourceRowIndex;
                        var targetRow = targetRowIndex;
                        for (var i = 0; i < rowCount; i = (i + 1) | 0) {
                            target.Data[System.Array.index(Bridge.identity(targetIndex, ((targetIndex = (targetIndex + 1) | 0))), target.Data)] = f(Bridge.identity(targetRow, ((targetRow = (targetRow + 1) | 0))), targetColumn, Bridge.identity(sourceRow, ((sourceRow = (sourceRow + 1) | 0))) === sourceColumn ? this.Data[System.Array.index(sourceColumn, this.Data)] : MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero);
                        }
                        sourceColumn = (sourceColumn + 1) | 0;
                        targetColumn = (targetColumn + 1) | 0;
                    }

                } else {
                    if (sourceRowIndex > sourceColumnIndex && ((sourceColumnIndex + columnCount) | 0) > sourceRowIndex) {

                        var columnInit = (sourceRowIndex - sourceColumnIndex) | 0;
                        var offset = (Bridge.Int.mul((((columnInit + targetColumnIndex) | 0)), target.RowCount) + targetRowIndex) | 0;
                        var step = (target.RowCount + 1) | 0;
                        var count = Math.min(((columnCount - columnInit) | 0), rowCount);

                        for (var k = 0, j1 = offset; k < count; j1 = (j1 + step) | 0, k = (k + 1) | 0) {
                            target.Data[System.Array.index(j1, target.Data)] = f(((targetRowIndex + k) | 0), ((((targetColumnIndex + columnInit) | 0) + k) | 0), this.Data[System.Array.index(((sourceRowIndex + k) | 0), this.Data)]);
                        }
                    } else if (sourceRowIndex < sourceColumnIndex && ((sourceRowIndex + rowCount) | 0) > sourceColumnIndex) {

                        var rowInit = (sourceColumnIndex - sourceRowIndex) | 0;
                        var offset1 = (((Bridge.Int.mul(targetColumnIndex, target.RowCount) + rowInit) | 0) + targetRowIndex) | 0;
                        var step1 = (target.RowCount + 1) | 0;
                        var count1 = Math.min(columnCount, ((rowCount - rowInit) | 0));

                        for (var k1 = 0, j2 = offset1; k1 < count1; j2 = (j2 + step1) | 0, k1 = (k1 + 1) | 0) {
                            target.Data[System.Array.index(j2, target.Data)] = f(((((targetRowIndex + rowInit) | 0) + k1) | 0), ((targetColumnIndex + k1) | 0), this.Data[System.Array.index(((sourceColumnIndex + k1) | 0), this.Data)]);
                        }
                    } else {
                        var offset2 = (Bridge.Int.mul(targetColumnIndex, target.RowCount) + targetRowIndex) | 0;
                        var step2 = (target.RowCount + 1) | 0;
                        var count2 = Math.min(columnCount, rowCount);

                        for (var k2 = 0, j3 = offset2; k2 < count2; j3 = (j3 + step2) | 0, k2 = (k2 + 1) | 0) {
                            target.Data[System.Array.index(j3, target.Data)] = f(((targetRowIndex + k2) | 0), ((targetColumnIndex + k2) | 0), this.Data[System.Array.index(((sourceRowIndex + k2) | 0), this.Data)]);
                        }
                    }
                }
            },
            FoldByRowUnchecked: function (TU, target, f, finalize, state, zeros) {
                if (zeros === MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip) {
                    for (var k = 0; k < this.Data.length; k = (k + 1) | 0) {
                        target[System.Array.index(k, target)] = finalize(f(state[System.Array.index(k, state)], this.Data[System.Array.index(k, this.Data)]), 1);
                    }

                    for (var k1 = this.Data.length; k1 < this.RowCount; k1 = (k1 + 1) | 0) {
                        target[System.Array.index(k1, target)] = finalize(state[System.Array.index(k1, state)], 0);
                    }
                } else {
                    for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                        var s = state[System.Array.index(i, state)];
                        for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                            s = f(s, i === j ? this.Data[System.Array.index(i, this.Data)] : MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero);
                        }
                        target[System.Array.index(i, target)] = finalize(s, this.ColumnCount);
                    }
                }
            },
            FoldByColumnUnchecked: function (TU, target, f, finalize, state, zeros) {
                if (zeros === MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip) {
                    for (var k = 0; k < this.Data.length; k = (k + 1) | 0) {
                        target[System.Array.index(k, target)] = finalize(f(state[System.Array.index(k, state)], this.Data[System.Array.index(k, this.Data)]), 1);
                    }

                    for (var k1 = this.Data.length; k1 < this.ColumnCount; k1 = (k1 + 1) | 0) {
                        target[System.Array.index(k1, target)] = finalize(state[System.Array.index(k1, state)], 0);
                    }
                } else {
                    for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                        var s = state[System.Array.index(j, state)];
                        for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                            s = f(s, i === j ? this.Data[System.Array.index(i, this.Data)] : MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero);
                        }
                        target[System.Array.index(j, target)] = finalize(s, this.RowCount);
                    }
                }
            },
            Fold2Unchecked: function (TOther, TState, other, f, state, zeros) {
                var denseOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(TOther));
                if (denseOther != null) {
                    var otherData = denseOther.Data;
                    var k = 0;
                    for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                        for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                            state = f(state, i === j ? this.Data[System.Array.index(i, this.Data)] : MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, otherData[System.Array.index(k, otherData)]);
                            k = (k + 1) | 0;
                        }
                    }
                    return state;
                }

                var diagonalOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(TOther));
                if (diagonalOther != null) {
                    var otherData1 = diagonalOther.Data;
                    for (var i1 = 0; i1 < this.Data.length; i1 = (i1 + 1) | 0) {
                        state = f(state, this.Data[System.Array.index(i1, this.Data)], otherData1[System.Array.index(i1, otherData1)]);
                    }

                    if (zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include) {
                        var otherZero = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(TOther).Matrix.Zero;
                        var count = (Bridge.Int.mul(this.RowCount, this.ColumnCount) - this.Data.length) | 0;
                        for (var i2 = 0; i2 < count; i2 = (i2 + 1) | 0) {
                            state = f(state, MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, otherZero);
                        }
                    }

                    return state;
                }

                var sparseOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(TOther));
                if (sparseOther != null) {
                    var otherRowPointers = sparseOther.RowPointers;
                    var otherColumnIndices = sparseOther.ColumnIndices;
                    var otherValues = sparseOther.Values;
                    var otherZero1 = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(TOther).Matrix.Zero;

                    if (zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include) {
                        var k1 = 0;
                        for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                            for (var col = 0; col < this.ColumnCount; col = (col + 1) | 0) {
                                if (k1 < otherRowPointers[System.Array.index(((row + 1) | 0), otherRowPointers)] && otherColumnIndices[System.Array.index(k1, otherColumnIndices)] === col) {
                                    state = f(state, row === col ? this.Data[System.Array.index(row, this.Data)] : MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, otherValues[System.Array.index(Bridge.identity(k1, ((k1 = (k1 + 1) | 0))), otherValues)]);
                                } else {
                                    state = f(state, row === col ? this.Data[System.Array.index(row, this.Data)] : MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, otherZero1);
                                }
                            }
                        }
                        return state;
                    }

                    for (var row1 = 0; row1 < this.RowCount; row1 = (row1 + 1) | 0) {
                        var diagonal = false;

                        var startIndex = otherRowPointers[System.Array.index(row1, otherRowPointers)];
                        var endIndex = otherRowPointers[System.Array.index(((row1 + 1) | 0), otherRowPointers)];
                        for (var j1 = startIndex; j1 < endIndex; j1 = (j1 + 1) | 0) {
                            if (otherColumnIndices[System.Array.index(j1, otherColumnIndices)] === row1) {
                                diagonal = true;
                                state = f(state, this.Data[System.Array.index(row1, this.Data)], otherValues[System.Array.index(j1, otherValues)]);
                            } else {
                                state = f(state, MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, otherValues[System.Array.index(j1, otherValues)]);
                            }
                        }

                        if (!diagonal && row1 < this.ColumnCount) {
                            state = f(state, this.Data[System.Array.index(row1, this.Data)], otherZero1);
                        }
                    }

                    return state;
                }


                return MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).prototype.Fold2Unchecked.call(this, TOther, TState, other, f, state, zeros);
            }
        }
    }; });

    Bridge.define("MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1", function (T) { return {
        inherits: [MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T)],
        statics: {
            methods: {
                OfMatrix: function (matrix) {
                    var storage = new (MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T))(matrix.RowCount, matrix.ColumnCount);
                    matrix.CopyToUnchecked(storage, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                    return storage;
                },
                OfValue: function (rows, columns, value) {
                    if (Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, value, T)) {
                        return new (MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T))(rows, columns);
                    }

                    var storage = new (MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T))(rows, columns);

                    var values = System.Array.init(Bridge.Int.mul(rows, columns), function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                    for (var i = 0; i < values.length; i = (i + 1) | 0) {
                        values[System.Array.index(i, values)] = value;
                    }

                    var rowPointers = storage.RowPointers;
                    for (var i1 = 0; i1 <= rows; i1 = (i1 + 1) | 0) {
                        rowPointers[System.Array.index(i1, rowPointers)] = Bridge.Int.mul(i1, columns);
                    }

                    var columnIndices = System.Array.init(values.length, 0, System.Int32);
                    for (var row = 0; row < rows; row = (row + 1) | 0) {
                        var offset = Bridge.Int.mul(row, columns);
                        for (var col = 0; col < columns; col = (col + 1) | 0) {
                            columnIndices[System.Array.index(((offset + col) | 0), columnIndices)] = col;
                        }
                    }

                    rowPointers[System.Array.index(rows, rowPointers)] = values.length;
                    storage.ColumnIndices = columnIndices;
                    storage.Values = values;
                    return storage;
                },
                OfInit: function (rows, columns, init) {
                    var storage = new (MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T))(rows, columns);
                    var rowPointers = storage.RowPointers;
                    var columnIndices = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                    var values = new (System.Collections.Generic.List$1(T)).ctor();

                    for (var row = 0; row < rows; row = (row + 1) | 0) {
                        rowPointers[System.Array.index(row, rowPointers)] = values.Count;
                        for (var col = 0; col < columns; col = (col + 1) | 0) {
                            var x = init(row, col);
                            if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, x, T)) {
                                values.add(x);
                                columnIndices.add(col);
                            }
                        }
                    }

                    rowPointers[System.Array.index(rows, rowPointers)] = values.Count;
                    storage.ColumnIndices = columnIndices.ToArray();
                    storage.Values = values.ToArray();
                    return storage;
                },
                OfDiagonalInit: function (rows, columns, init) {
                    var diagonalLength = Math.min(rows, columns);
                    var storage = new (MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T))(rows, columns);
                    var rowPointers = storage.RowPointers;
                    var columnIndices = new (System.Collections.Generic.List$1(System.Int32)).$ctor2(diagonalLength);
                    var values = new (System.Collections.Generic.List$1(T)).$ctor2(diagonalLength);

                    for (var i = 0; i < diagonalLength; i = (i + 1) | 0) {
                        rowPointers[System.Array.index(i, rowPointers)] = values.Count;
                        var x = init(i);
                        if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, x, T)) {
                            values.add(x);
                            columnIndices.add(i);
                        }
                    }

                    rowPointers[System.Array.index(rows, rowPointers)] = values.Count;
                    storage.ColumnIndices = columnIndices.ToArray();
                    storage.Values = values.ToArray();
                    return storage;
                },
                OfArray: function (array) {
                    var storage = new (MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T))(System.Array.getLength(array, 0), System.Array.getLength(array, 1));
                    var rowPointers = storage.RowPointers;
                    var columnIndices = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                    var values = new (System.Collections.Generic.List$1(T)).ctor();

                    for (var row = 0; row < storage.RowCount; row = (row + 1) | 0) {
                        rowPointers[System.Array.index(row, rowPointers)] = values.Count;
                        for (var col = 0; col < storage.ColumnCount; col = (col + 1) | 0) {
                            if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, array.get([row, col]), T)) {
                                values.add(array.get([row, col]));
                                columnIndices.add(col);
                            }
                        }
                    }

                    rowPointers[System.Array.index(storage.RowCount, rowPointers)] = values.Count;
                    storage.ColumnIndices = columnIndices.ToArray();
                    storage.Values = values.ToArray();
                    return storage;
                },
                OfRowArrays: function (data) {
                    var $t;
                    if (data.length <= 0) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("data", "Resources.MatrixCanNotBeEmpty");
                    }

                    var storage = new (MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T))(data.length, data[System.Array.index(0, data)].length);
                    var rowPointers = storage.RowPointers;
                    var columnIndices = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                    var values = new (System.Collections.Generic.List$1(T)).ctor();

                    for (var row = 0; row < storage.RowCount; row = (row + 1) | 0) {
                        rowPointers[System.Array.index(row, rowPointers)] = values.Count;
                        for (var col = 0; col < storage.ColumnCount; col = (col + 1) | 0) {
                            var x = ($t = data[System.Array.index(row, data)])[System.Array.index(col, $t)];
                            if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, x, T)) {
                                values.add(x);
                                columnIndices.add(col);
                            }
                        }
                    }

                    rowPointers[System.Array.index(storage.RowCount, rowPointers)] = values.Count;
                    storage.ColumnIndices = columnIndices.ToArray();
                    storage.Values = values.ToArray();
                    return storage;
                },
                OfColumnArrays: function (data) {
                    var $t;
                    if (data.length <= 0) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("data", "Resources.MatrixCanNotBeEmpty");
                    }

                    var storage = new (MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T))(data[System.Array.index(0, data)].length, data.length);
                    var rowPointers = storage.RowPointers;
                    var columnIndices = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                    var values = new (System.Collections.Generic.List$1(T)).ctor();

                    for (var row = 0; row < storage.RowCount; row = (row + 1) | 0) {
                        rowPointers[System.Array.index(row, rowPointers)] = values.Count;
                        for (var col = 0; col < storage.ColumnCount; col = (col + 1) | 0) {
                            var x = ($t = data[System.Array.index(col, data)])[System.Array.index(row, $t)];
                            if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, x, T)) {
                                values.add(x);
                                columnIndices.add(col);
                            }
                        }
                    }

                    rowPointers[System.Array.index(storage.RowCount, rowPointers)] = values.Count;
                    storage.ColumnIndices = columnIndices.ToArray();
                    storage.Values = values.ToArray();
                    return storage;
                },
                OfRowVectors: function (data) {
                    if (data.length <= 0) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("data", "Resources.MatrixCanNotBeEmpty");
                    }

                    var storage = new (MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T))(data.length, data[System.Array.index(0, data)].Length);
                    var rowPointers = storage.RowPointers;
                    var columnIndices = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                    var values = new (System.Collections.Generic.List$1(T)).ctor();

                    for (var row = 0; row < storage.RowCount; row = (row + 1) | 0) {
                        var vector = data[System.Array.index(row, data)];
                        rowPointers[System.Array.index(row, rowPointers)] = values.Count;
                        for (var col = 0; col < storage.ColumnCount; col = (col + 1) | 0) {
                            var x = vector.At(col);
                            if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, x, T)) {
                                values.add(x);
                                columnIndices.add(col);
                            }
                        }
                    }

                    rowPointers[System.Array.index(storage.RowCount, rowPointers)] = values.Count;
                    storage.ColumnIndices = columnIndices.ToArray();
                    storage.Values = values.ToArray();
                    return storage;
                },
                OfColumnVectors: function (data) {
                    if (data.length <= 0) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("data", "Resources.MatrixCanNotBeEmpty");
                    }

                    var storage = new (MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T))(data[System.Array.index(0, data)].Length, data.length);
                    var rowPointers = storage.RowPointers;
                    var columnIndices = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                    var values = new (System.Collections.Generic.List$1(T)).ctor();

                    for (var row = 0; row < storage.RowCount; row = (row + 1) | 0) {
                        rowPointers[System.Array.index(row, rowPointers)] = values.Count;
                        for (var col = 0; col < storage.ColumnCount; col = (col + 1) | 0) {
                            var x = data[System.Array.index(col, data)].At(row);
                            if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, x, T)) {
                                values.add(x);
                                columnIndices.add(col);
                            }
                        }
                    }

                    rowPointers[System.Array.index(storage.RowCount, rowPointers)] = values.Count;
                    storage.ColumnIndices = columnIndices.ToArray();
                    storage.Values = values.ToArray();
                    return storage;
                },
                OfIndexedEnumerable: function (rows, columns, data) {
                    var $t, $t1, $t2;
                    var trows = System.Array.init(rows, null, System.Collections.Generic.List$1(System.Tuple$2(System.Int32,T)));
                    $t = Bridge.getEnumerator(data, System.Tuple$3(System.Int32,System.Int32,T));
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, item.Item3, T)) {
                                var row = trows[System.Array.index(item.Item1, trows)] || (($t1 = new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,T))).ctor(), trows[System.Array.index(item.Item1, trows)] = $t1, $t1));
                                row.add({ Item1: item.Item2, Item2: item.Item3 });
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    var storage = new (MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T))(rows, columns);
                    var rowPointers = storage.RowPointers;
                    var columnIndices = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                    var values = new (System.Collections.Generic.List$1(T)).ctor();

                    var index = 0;
                    for (var row1 = 0; row1 < rows; row1 = (row1 + 1) | 0) {
                        rowPointers[System.Array.index(row1, rowPointers)] = index;
                        var trow = trows[System.Array.index(row1, trows)];
                        if (trow != null) {
                            trow.Sort();
                            $t2 = Bridge.getEnumerator(trow);
                            try {
                                while ($t2.moveNext()) {
                                    var item1 = $t2.Current;
                                    values.add(item1.Item2);
                                    columnIndices.add(item1.Item1);
                                    index = (index + 1) | 0;
                                }
                            } finally {
                                if (Bridge.is($t2, System.IDisposable)) {
                                    $t2.System$IDisposable$Dispose();
                                }
                            }
                        }
                    }

                    rowPointers[System.Array.index(rows, rowPointers)] = values.Count;
                    storage.ColumnIndices = columnIndices.ToArray();
                    storage.Values = values.ToArray();
                    return storage;
                },
                OfRowEnumerables: function (rows, columns, data) {
                    var storage = new (MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T))(rows, columns);
                    var rowPointers = storage.RowPointers;
                    var columnIndices = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                    var values = new (System.Collections.Generic.List$1(T)).ctor();

                    var rowIterator = Bridge.getEnumerator(data, System.Collections.Generic.IEnumerable$1(T));
                    try {
                        for (var row = 0; row < rows; row = (row + 1) | 0) {
                            if (!rowIterator.System$Collections$IEnumerator$moveNext()) {
                                throw new System.ArgumentOutOfRangeException.$ctor4("data", System.String.format("Resources.ArgumentArrayWrongLength", [Bridge.box(rows, System.Int32)]));
                            }

                            rowPointers[System.Array.index(row, rowPointers)] = values.Count;
                            var columnIterator = Bridge.getEnumerator(rowIterator[Bridge.geti(rowIterator, "System$Collections$Generic$IEnumerator$1$System$Collections$Generic$IEnumerable$1$" + Bridge.getTypeAlias(T) + "$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1")], T);
                            try {
                                for (var col = 0; col < columns; col = (col + 1) | 0) {
                                    if (!columnIterator.System$Collections$IEnumerator$moveNext()) {
                                        throw new System.ArgumentOutOfRangeException.$ctor4("data", System.String.format("Resources.ArgumentArrayWrongLength", [Bridge.box(columns, System.Int32)]));
                                    }
                                    if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, columnIterator[Bridge.geti(columnIterator, "System$Collections$Generic$IEnumerator$1$" + Bridge.getTypeAlias(T) + "$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1")], T)) {
                                        values.add(columnIterator[Bridge.geti(columnIterator, "System$Collections$Generic$IEnumerator$1$" + Bridge.getTypeAlias(T) + "$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1")]);
                                        columnIndices.add(col);
                                    }
                                }
                                if (columnIterator.System$Collections$IEnumerator$moveNext()) {
                                    throw new System.ArgumentOutOfRangeException.$ctor4("data", System.String.format("Resources.ArgumentArrayWrongLength", [Bridge.box(columns, System.Int32)]));
                                }
                            }
                            finally {
                                if (Bridge.hasValue(columnIterator)) {
                                    columnIterator.System$IDisposable$Dispose();
                                }
                            }
                        }
                        if (rowIterator.System$Collections$IEnumerator$moveNext()) {
                            throw new System.ArgumentOutOfRangeException.$ctor4("data", System.String.format("Resources.ArgumentArrayWrongLength", [Bridge.box(rows, System.Int32)]));
                        }

                    }
                    finally {
                        if (Bridge.hasValue(rowIterator)) {
                            rowIterator.System$IDisposable$Dispose();
                        }
                    }

                    rowPointers[System.Array.index(rows, rowPointers)] = values.Count;
                    storage.ColumnIndices = columnIndices.ToArray();
                    storage.Values = values.ToArray();
                    return storage;
                },
                OfColumnEnumerables: function (rows, columns, data) {
                    var $t, $t1;
                    var trows = System.Array.init(rows, null, System.Collections.Generic.List$1(System.Tuple$2(System.Int32,T)));
                    var columnIterator = Bridge.getEnumerator(data, System.Collections.Generic.IEnumerable$1(T));
                    try {
                        for (var column = 0; column < columns; column = (column + 1) | 0) {
                            if (!columnIterator.System$Collections$IEnumerator$moveNext()) {
                                throw new System.ArgumentOutOfRangeException.$ctor4("data", System.String.format("Resources.ArgumentArrayWrongLength", [Bridge.box(columns, System.Int32)]));
                            }
                            var rowIterator = Bridge.getEnumerator(columnIterator[Bridge.geti(columnIterator, "System$Collections$Generic$IEnumerator$1$System$Collections$Generic$IEnumerable$1$" + Bridge.getTypeAlias(T) + "$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1")], T);
                            try {
                                for (var row = 0; row < rows; row = (row + 1) | 0) {
                                    if (!rowIterator.System$Collections$IEnumerator$moveNext()) {
                                        throw new System.ArgumentOutOfRangeException.$ctor4("data", System.String.format("Resources.ArgumentArrayWrongLength", [Bridge.box(rows, System.Int32)]));
                                    }

                                    if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, rowIterator[Bridge.geti(rowIterator, "System$Collections$Generic$IEnumerator$1$" + Bridge.getTypeAlias(T) + "$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1")], T)) {
                                        var trow = trows[System.Array.index(row, trows)] || (($t = new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,T))).ctor(), trows[System.Array.index(row, trows)] = $t, $t));
                                        trow.add({ Item1: column, Item2: rowIterator[Bridge.geti(rowIterator, "System$Collections$Generic$IEnumerator$1$" + Bridge.getTypeAlias(T) + "$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1")] });
                                    }
                                }
                            }
                            finally {
                                if (Bridge.hasValue(rowIterator)) {
                                    rowIterator.System$IDisposable$Dispose();
                                }
                            }
                        }
                    }
                    finally {
                        if (Bridge.hasValue(columnIterator)) {
                            columnIterator.System$IDisposable$Dispose();
                        }
                    }

                    var storage = new (MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T))(rows, columns);
                    var rowPointers = storage.RowPointers;
                    var columnIndices = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                    var values = new (System.Collections.Generic.List$1(T)).ctor();

                    var index = 0;
                    for (var row1 = 0; row1 < rows; row1 = (row1 + 1) | 0) {
                        rowPointers[System.Array.index(row1, rowPointers)] = index;
                        var trow1 = trows[System.Array.index(row1, trows)];
                        if (trow1 != null) {
                            trow1.Sort();
                            $t1 = Bridge.getEnumerator(trow1);
                            try {
                                while ($t1.moveNext()) {
                                    var item = $t1.Current;
                                    values.add(item.Item2);
                                    columnIndices.add(item.Item1);
                                    index = (index + 1) | 0;
                                }
                            } finally {
                                if (Bridge.is($t1, System.IDisposable)) {
                                    $t1.System$IDisposable$Dispose();
                                }
                            }
                        }
                    }

                    rowPointers[System.Array.index(rows, rowPointers)] = values.Count;
                    storage.ColumnIndices = columnIndices.ToArray();
                    storage.Values = values.ToArray();
                    return storage;
                },
                OfRowMajorEnumerable: function (rows, columns, data) {
                    var storage = new (MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T))(rows, columns);
                    var rowPointers = storage.RowPointers;
                    var columnIndices = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                    var values = new (System.Collections.Generic.List$1(T)).ctor();

                    var iterator = Bridge.getEnumerator(data, T);
                    try {
                        for (var row = 0; row < rows; row = (row + 1) | 0) {
                            rowPointers[System.Array.index(row, rowPointers)] = values.Count;
                            for (var col = 0; col < columns; col = (col + 1) | 0) {
                                iterator.System$Collections$IEnumerator$moveNext();
                                if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, iterator[Bridge.geti(iterator, "System$Collections$Generic$IEnumerator$1$" + Bridge.getTypeAlias(T) + "$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1")], T)) {
                                    values.add(iterator[Bridge.geti(iterator, "System$Collections$Generic$IEnumerator$1$" + Bridge.getTypeAlias(T) + "$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1")]);
                                    columnIndices.add(col);
                                }
                            }
                        }
                    }
                    finally {
                        if (Bridge.hasValue(iterator)) {
                            iterator.System$IDisposable$Dispose();
                        }
                    }

                    rowPointers[System.Array.index(rows, rowPointers)] = values.Count;
                    storage.ColumnIndices = columnIndices.ToArray();
                    storage.Values = values.ToArray();
                    return storage;
                },
                OfColumnMajorList: function (rows, columns, data) {
                    if (Bridge.Int.mul(rows, columns) !== System.Array.getCount(data, T)) {
                        throw new System.ArgumentException.$ctor1("Resources.ArgumentMatrixDimensions");

                    }

                    var storage = new (MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T))(rows, columns);
                    var rowPointers = storage.RowPointers;
                    var columnIndices = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                    var values = new (System.Collections.Generic.List$1(T)).ctor();

                    for (var row = 0; row < rows; row = (row + 1) | 0) {
                        rowPointers[System.Array.index(row, rowPointers)] = values.Count;
                        for (var col = 0; col < columns; col = (col + 1) | 0) {
                            var item = System.Array.getItem(data, ((row + (Bridge.Int.mul(col, rows))) | 0), T);
                            if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, item, T)) {
                                values.add(item);
                                columnIndices.add(col);
                            }
                        }
                    }

                    rowPointers[System.Array.index(rows, rowPointers)] = values.Count;
                    storage.ColumnIndices = columnIndices.ToArray();
                    storage.Values = values.ToArray();
                    return storage;
                }
            }
        },
        fields: {
            /**
             * The array containing the row indices of the existing rows. Element "i" of the array gives the index of the
             element in the {@link } array that is first non-zero element in a row "i".
             The last value is equal to ValueCount, so that the number of non-zero entries in row "i" is always
             given by RowPointers[i+i] - RowPointers[i]. This array thus has length RowCount+1.
             *
             * @instance
             * @public
             * @readonly
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1
             * @type Array.<number>
             */
            RowPointers: null,
            /**
             * An array containing the column indices of the non-zero values. Element "j" of the array
             is the number of the column in matrix that contains the j-th value in the {@link } array.
             *
             * @instance
             * @public
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1
             * @type Array.<number>
             */
            ColumnIndices: null,
            /**
             * Array that contains the non-zero elements of matrix. Values of the non-zero elements of matrix are mapped into the values
             array using the row-major storage mapping described in a compressed sparse row (CSR) format.
             *
             * @instance
             * @public
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1
             * @type Array.<T>
             */
            Values: null
        },
        props: {
            /**
             * Gets the number of non zero elements in the matrix.
             *
             * @instance
             * @public
             * @readonly
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1
             * @function ValueCount
             * @type number
             */
            ValueCount: {
                get: function () {
                    return this.RowPointers[System.Array.index(this.RowCount, this.RowPointers)];
                }
            },
            /**
             * True if the matrix storage format is dense.
             *
             * @instance
             * @public
             * @override
             * @readonly
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1
             * @function IsDense
             * @type boolean
             */
            IsDense: {
                get: function () {
                    return false;
                }
            },
            /**
             * True if all fields of this matrix can be set to any value.
             False if some fields are fixed, like on a diagonal matrix.
             *
             * @instance
             * @public
             * @override
             * @readonly
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1
             * @function IsFullyMutable
             * @type boolean
             */
            IsFullyMutable: {
                get: function () {
                    return true;
                }
            }
        },
        ctors: {
            ctor: function (rows, columns) {
                this.$initialize();
                MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).ctor.call(this, rows, columns);
                this.RowPointers = System.Array.init(((rows + 1) | 0), 0, System.Int32);
                this.ColumnIndices = System.Array.init(0, 0, System.Int32);
                this.Values = System.Array.init(0, function (){
                    return Bridge.getDefaultValue(T);
                }, T);
            }
        },
        methods: {
            /**
             * True if the specified field can be set to any value.
             False if the field is fixed, like an off-diagonal field on a diagonal matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1
             * @param   {number}     row       
             * @param   {number}     column
             * @return  {boolean}
             */
            IsMutableAt: function (row, column) {
                return true;
            },
            /**
             * Retrieves the requested element without range checking.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1
             * @param   {number}    row       The row of the element.
             * @param   {number}    column    The column of the element.
             * @return  {T}                   The requested element.
             */
            At: function (row, column) {
                var index = this.FindItem(row, column);
                return index >= 0 ? this.Values[System.Array.index(index, this.Values)] : MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero;
            },
            /**
             * Sets the element without range checking.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1
             * @param   {number}    row       The row of the element.
             * @param   {number}    column    The column of the element.
             * @param   {T}         value     The value to set the element to.
             * @return  {void}
             */
            At$1: function (row, column, value) {
                var index = this.FindItem(row, column);
                if (index >= 0) {
                    if (Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, value, T)) {
                        this.RemoveAtIndexUnchecked(index, row);
                    } else {
                        this.Values[System.Array.index(index, this.Values)] = value;
                    }
                } else {
                    if (Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, value, T)) {
                        return;
                    }

                    index = ~index;
                    var valueCount = this.RowPointers[System.Array.index(((this.RowPointers.length - 1) | 0), this.RowPointers)];

                    if ((valueCount === this.Values.length) && (System.Int64(valueCount).lt((System.Int64(this.RowCount).mul(System.Int64(this.ColumnCount)))))) {
                        var size = System.Int64.min(System.Int64(this.Values.length + this.GrowthSize()), System.Int64(this.RowCount).mul(System.Int64(this.ColumnCount)));
                        if (size.gt(System.Int64(2147483647))) {
                            throw new System.NotSupportedException.$ctor1("Resources.TooManyElements");
                        }

                        System.Array.resize(Bridge.ref(this, "Values"), System.Int64.clip32(size), function () {
                            return Bridge.getDefaultValue(T);
                        }, T);
                        System.Array.resize(Bridge.ref(this, "ColumnIndices"), System.Int64.clip32(size), 0, System.Int32);
                    }

                    System.Array.copy(this.Values, index, this.Values, ((index + 1) | 0), ((valueCount - index) | 0));
                    System.Array.copy(this.ColumnIndices, index, this.ColumnIndices, ((index + 1) | 0), ((valueCount - index) | 0));

                    this.Values[System.Array.index(index, this.Values)] = value;
                    this.ColumnIndices[System.Array.index(index, this.ColumnIndices)] = column;

                    for (var i = (row + 1) | 0; i < this.RowPointers.length; i = (i + 1) | 0) {
                        this.RowPointers[System.Array.index(i, this.RowPointers)] = (this.RowPointers[System.Array.index(i, this.RowPointers)] + 1) | 0;
                    }
                }
            },
            /**
             * Delete value from internal storage
             *
             * @instance
             * @private
             * @this MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1
             * @param   {number}    itemIndex    Index of value in nonZeroValues array
             * @param   {number}    row          Row number of matrix
             * @return  {void}
             */
            RemoveAtIndexUnchecked: function (itemIndex, row) {
                var valueCount = this.RowPointers[System.Array.index(((this.RowPointers.length - 1) | 0), this.RowPointers)];

                System.Array.copy(this.Values, ((itemIndex + 1) | 0), this.Values, itemIndex, ((((valueCount - itemIndex) | 0) - 1) | 0));
                System.Array.copy(this.ColumnIndices, ((itemIndex + 1) | 0), this.ColumnIndices, itemIndex, ((((valueCount - itemIndex) | 0) - 1) | 0));

                for (var i = (row + 1) | 0; i < this.RowPointers.length; i = (i + 1) | 0) {
                    this.RowPointers[System.Array.index(i, this.RowPointers)] = (this.RowPointers[System.Array.index(i, this.RowPointers)] - 1) | 0;
                }

                valueCount = (valueCount - 1) | 0;

                if ((valueCount > 1024) && (valueCount < ((Bridge.Int.div(this.Values.length, 2)) | 0))) {
                    System.Array.resize(Bridge.ref(this, "Values"), valueCount, function () {
                        return Bridge.getDefaultValue(T);
                    }, T);
                    System.Array.resize(Bridge.ref(this, "ColumnIndices"), valueCount, 0, System.Int32);
                }
            },
            /**
             * Find item Index in nonZeroValues array
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1
             * @param   {number}    row       Matrix row index
             * @param   {number}    column    Matrix column index
             * @return  {number}              Item index
             */
            FindItem: function (row, column) {
                return System.Array.binarySearch(this.ColumnIndices, this.RowPointers[System.Array.index(row, this.RowPointers)], ((this.RowPointers[System.Array.index(((row + 1) | 0), this.RowPointers)] - this.RowPointers[System.Array.index(row, this.RowPointers)]) | 0), column);
            },
            /**
             * Calculates the amount with which to grow the storage array's if they need to be
             increased in size.
             *
             * @instance
             * @private
             * @this MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1
             * @return  {number}        The amount grown.
             */
            GrowthSize: function () {
                var delta;
                if (this.Values.length > 1024) {
                    delta = (Bridge.Int.div(this.Values.length, 4)) | 0;
                } else {
                    if (this.Values.length > 256) {
                        delta = 512;
                    } else {
                        delta = this.Values.length > 64 ? 128 : 32;
                    }
                }

                return delta;
            },
            Normalize: function () {
                this.NormalizeOrdering();
                this.NormalizeZeros();
            },
            NormalizeOrdering: function () {
                for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                    var index = this.RowPointers[System.Array.index(i, this.RowPointers)];
                    var count = (this.RowPointers[System.Array.index(((i + 1) | 0), this.RowPointers)] - index) | 0;
                    if (count > 1) {
                        MathNet.Numerics.Sorting.Sort$3(System.Int32, T, this.ColumnIndices, this.Values, index, count);
                    }
                }
            },
            NormalizeZeros: function () {
                this.MapInplace(function (x) {
                    return x;
                }, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            /**
             * Returns a hash code for this instance.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1
             * @return  {number}        A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
             */
            getHashCode: function () {
                var values = this.Values;
                var hashNum = Math.min(this.ValueCount, 25);
                var hash = 17;
                for (var i = 0; i < hashNum; i = (i + 1) | 0) {
                    hash = (Bridge.Int.mul(hash, 31) + Bridge.getHashCode(values[i])) | 0;
                }
                return hash;
            },
            Clear: function () {
                System.Array.fill(this.RowPointers, 0, 0, this.RowPointers.length);
            },
            ClearUnchecked: function (rowIndex, rowCount, columnIndex, columnCount) {
                if (rowIndex === 0 && columnIndex === 0 && rowCount === this.RowCount && columnCount === this.ColumnCount) {
                    this.Clear();
                    return;
                }

                var valueCount = this.RowPointers[System.Array.index(((this.RowPointers.length - 1) | 0), this.RowPointers)];

                for (var row = (((rowIndex + rowCount) | 0) - 1) | 0; row >= rowIndex; row = (row - 1) | 0) {
                    var startIndex = this.RowPointers[System.Array.index(row, this.RowPointers)];
                    var endIndex = this.RowPointers[System.Array.index(((row + 1) | 0), this.RowPointers)];

                    if (startIndex === endIndex) {
                        continue;
                    }

                    var first = System.Array.binarySearch(this.ColumnIndices, startIndex, ((endIndex - startIndex) | 0), columnIndex);
                    var last = System.Array.binarySearch(this.ColumnIndices, startIndex, ((endIndex - startIndex) | 0), ((((columnIndex + columnCount) | 0) - 1) | 0));
                    if (first < 0) {
                        first = ~first;
                    }
                    if (last < 0) {
                        last = (~last - 1) | 0;
                    }
                    var count = (((last - first) | 0) + 1) | 0;

                    if (count > 0) {
                        System.Array.copy(this.Values, ((first + count) | 0), this.Values, first, ((((valueCount - first) | 0) - count) | 0));
                        System.Array.copy(this.ColumnIndices, ((first + count) | 0), this.ColumnIndices, first, ((((valueCount - first) | 0) - count) | 0));

                        for (var k = (row + 1) | 0; k < this.RowPointers.length; k = (k + 1) | 0) {
                            this.RowPointers[System.Array.index(k, this.RowPointers)] = (this.RowPointers[System.Array.index(k, this.RowPointers)] - count) | 0;
                        }

                        valueCount = (valueCount - count) | 0;
                    }
                }

                if ((valueCount > 1024) && (valueCount < ((Bridge.Int.div(this.Values.length, 2)) | 0))) {
                    System.Array.resize(Bridge.ref(this, "Values"), valueCount, function () {
                        return Bridge.getDefaultValue(T);
                    }, T);
                    System.Array.resize(Bridge.ref(this, "ColumnIndices"), valueCount, 0, System.Int32);
                }
            },
            ClearRowsUnchecked: function (rowIndices) {
                var rows = System.Array.init(this.RowCount, false, System.Boolean);
                for (var i = 0; i < rowIndices.length; i = (i + 1) | 0) {
                    rows[System.Array.index(rowIndices[System.Array.index(i, rowIndices)], rows)] = true;
                }
                this.MapIndexedInplace(function (i1, j, x) {
                    return rows[System.Array.index(i1, rows)] ? MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero : x;
                }, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            ClearColumnsUnchecked: function (columnIndices) {
                var columns = System.Array.init(this.ColumnCount, false, System.Boolean);
                for (var i = 0; i < columnIndices.length; i = (i + 1) | 0) {
                    columns[System.Array.index(columnIndices[System.Array.index(i, columnIndices)], columns)] = true;
                }
                this.MapIndexedInplace(function (i1, j, x) {
                    return columns[System.Array.index(j, columns)] ? MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero : x;
                }, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            CopyToUnchecked: function (target, existingData) {
                var sparseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T));
                if (sparseTarget != null) {
                    this.CopyToUnchecked$2(sparseTarget);
                    return;
                }

                var denseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T));
                if (denseTarget != null) {
                    this.CopyToUnchecked$1(denseTarget, existingData);
                    return;
                }


                if (existingData === MathNet.Numerics.LinearAlgebra.ExistingData.Clear) {
                    target.Clear();
                }

                if (this.ValueCount !== 0) {
                    for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                        var startIndex = this.RowPointers[System.Array.index(row, this.RowPointers)];
                        var endIndex = this.RowPointers[System.Array.index(((row + 1) | 0), this.RowPointers)];
                        for (var j = startIndex; j < endIndex; j = (j + 1) | 0) {
                            target.At$1(row, this.ColumnIndices[System.Array.index(j, this.ColumnIndices)], this.Values[System.Array.index(j, this.Values)]);
                        }
                    }
                }
            },
            CopyToUnchecked$2: function (target) {
                target.Values = System.Array.init(this.ValueCount, function (){
                    return Bridge.getDefaultValue(T);
                }, T);
                target.ColumnIndices = System.Array.init(this.ValueCount, 0, System.Int32);

                if (this.ValueCount !== 0) {
                    System.Array.copy(this.Values, 0, target.Values, 0, this.ValueCount);


                    System.Array.copy(this.ColumnIndices, 0, target.ColumnIndices, 0, this.ValueCount);
                    System.Array.copy(this.RowPointers, 0, target.RowPointers, 0, (((this.RowCount + 1) | 0)));
                }
            },
            CopyToUnchecked$1: function (target, existingData) {
                if (existingData === MathNet.Numerics.LinearAlgebra.ExistingData.Clear) {
                    target.Clear();
                }


                if (this.ValueCount !== 0) {
                    for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                        var startIndex = this.RowPointers[System.Array.index(row, this.RowPointers)];
                        var endIndex = this.RowPointers[System.Array.index(((row + 1) | 0), this.RowPointers)];
                        for (var j = startIndex; j < endIndex; j = (j + 1) | 0) {
                            target.At$1(row, this.ColumnIndices[System.Array.index(j, this.ColumnIndices)], this.Values[System.Array.index(j, this.Values)]);
                        }
                    }
                }
            },
            CopySubMatrixToUnchecked: function (target, sourceRowIndex, targetRowIndex, rowCount, sourceColumnIndex, targetColumnIndex, columnCount, existingData) {
                if (target == null) {
                    throw new System.ArgumentNullException.$ctor1("target");
                }

                var sparseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T));
                if (sparseTarget != null) {
                    this.CopySubMatrixToUnchecked$1(sparseTarget, sourceRowIndex, targetRowIndex, rowCount, sourceColumnIndex, targetColumnIndex, columnCount, existingData);
                    return;
                }


                if (existingData === MathNet.Numerics.LinearAlgebra.ExistingData.Clear) {
                    target.ClearUnchecked(targetRowIndex, rowCount, targetColumnIndex, columnCount);
                }

                for (var i = sourceRowIndex, row = 0; i < ((sourceRowIndex + rowCount) | 0); i = (i + 1) | 0, row = (row + 1) | 0) {
                    var startIndex = this.RowPointers[System.Array.index(i, this.RowPointers)];
                    var endIndex = this.RowPointers[System.Array.index(((i + 1) | 0), this.RowPointers)];

                    for (var j = startIndex; j < endIndex; j = (j + 1) | 0) {
                        if ((this.ColumnIndices[System.Array.index(j, this.ColumnIndices)] >= sourceColumnIndex) && (this.ColumnIndices[System.Array.index(j, this.ColumnIndices)] < ((sourceColumnIndex + columnCount) | 0))) {
                            var column = (this.ColumnIndices[System.Array.index(j, this.ColumnIndices)] - sourceColumnIndex) | 0;
                            target.At$1(((targetRowIndex + row) | 0), ((targetColumnIndex + column) | 0), this.Values[System.Array.index(j, this.Values)]);
                        }
                    }
                }
            },
            CopySubMatrixToUnchecked$1: function (target, sourceRowIndex, targetRowIndex, rowCount, sourceColumnIndex, targetColumnIndex, columnCount, existingData) {
                var rowOffset = (targetRowIndex - sourceRowIndex) | 0;
                var columnOffset = (targetColumnIndex - sourceColumnIndex) | 0;

                if (target.ValueCount === 0) {
                    var values = new (System.Collections.Generic.List$1(T)).$ctor2(this.ValueCount);
                    var columnIndices = new (System.Collections.Generic.List$1(System.Int32)).$ctor2(this.ValueCount);
                    var rowPointers = target.RowPointers;

                    for (var i = sourceRowIndex; i < ((sourceRowIndex + rowCount) | 0); i = (i + 1) | 0) {
                        rowPointers[System.Array.index(((i + rowOffset) | 0), rowPointers)] = values.Count;

                        var startIndex = this.RowPointers[System.Array.index(i, this.RowPointers)];
                        var endIndex = this.RowPointers[System.Array.index(((i + 1) | 0), this.RowPointers)];

                        for (var k = startIndex; k < endIndex; k = (k + 1) | 0) {
                            if ((this.ColumnIndices[System.Array.index(k, this.ColumnIndices)] >= sourceColumnIndex) && (this.ColumnIndices[System.Array.index(k, this.ColumnIndices)] < ((sourceColumnIndex + columnCount) | 0))) {
                                values.add(this.Values[System.Array.index(k, this.Values)]);
                                columnIndices.add(((this.ColumnIndices[System.Array.index(k, this.ColumnIndices)] + columnOffset) | 0));
                            }
                        }
                    }

                    for (var i1 = (targetRowIndex + rowCount) | 0; i1 < rowPointers.length; i1 = (i1 + 1) | 0) {
                        rowPointers[System.Array.index(i1, rowPointers)] = values.Count;
                    }

                    target.RowPointers[System.Array.index(target.RowCount, target.RowPointers)] = values.Count;
                    target.Values = values.ToArray();
                    target.ColumnIndices = columnIndices.ToArray();

                    return;
                }

                if (existingData === MathNet.Numerics.LinearAlgebra.ExistingData.Clear) {
                    target.ClearUnchecked(targetRowIndex, rowCount, targetColumnIndex, columnCount);
                }

                for (var i2 = sourceRowIndex, row = 0; row < rowCount; i2 = (i2 + 1) | 0, row = (row + 1) | 0) {
                    var startIndex1 = this.RowPointers[System.Array.index(i2, this.RowPointers)];
                    var endIndex1 = this.RowPointers[System.Array.index(((i2 + 1) | 0), this.RowPointers)];

                    for (var j = startIndex1; j < endIndex1; j = (j + 1) | 0) {
                        if ((this.ColumnIndices[System.Array.index(j, this.ColumnIndices)] >= sourceColumnIndex) && (this.ColumnIndices[System.Array.index(j, this.ColumnIndices)] < ((sourceColumnIndex + columnCount) | 0))) {
                            var column = (this.ColumnIndices[System.Array.index(j, this.ColumnIndices)] - sourceColumnIndex) | 0;
                            target.At$1(((targetRowIndex + row) | 0), ((targetColumnIndex + column) | 0), this.Values[System.Array.index(j, this.Values)]);
                        }
                    }
                }
            },
            CopySubRowToUnchecked: function (target, rowIndex, sourceColumnIndex, targetColumnIndex, columnCount, existingData) {
                var startIndexOfRow = this.RowPointers[System.Array.index(rowIndex, this.RowPointers)];
                var endIndexOfRow = this.RowPointers[System.Array.index(((rowIndex + 1) | 0), this.RowPointers)];

                if (startIndexOfRow === endIndexOfRow) {
                    if (existingData === MathNet.Numerics.LinearAlgebra.ExistingData.Clear) {
                        target.Clear$1(targetColumnIndex, columnCount);
                    }
                    return;
                }

                var targetSparse = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(T));
                if (targetSparse != null) {
                    if ((sourceColumnIndex === 0) && (targetColumnIndex === 0) && (columnCount === this.ColumnCount) && (this.ColumnCount === targetSparse.Length)) {
                        targetSparse.ValueCount = (endIndexOfRow - startIndexOfRow) | 0;
                        targetSparse.Values = System.Array.init(targetSparse.ValueCount, function (){
                            return Bridge.getDefaultValue(T);
                        }, T);
                        targetSparse.Indices = System.Array.init(targetSparse.ValueCount, 0, System.Int32);
                        System.Array.copy(this.ColumnIndices, startIndexOfRow, targetSparse.Indices, 0, targetSparse.ValueCount);
                        System.Array.copy(this.Values, startIndexOfRow, targetSparse.Values, 0, targetSparse.ValueCount);
                    } else {
                        var sourceStartPos = System.Array.binarySearch(this.ColumnIndices, startIndexOfRow, ((endIndexOfRow - startIndexOfRow) | 0), sourceColumnIndex);
                        if (sourceStartPos < 0) {
                            sourceStartPos = ~sourceStartPos;
                        }
                        var sourceEndPos = System.Array.binarySearch(this.ColumnIndices, startIndexOfRow, ((endIndexOfRow - startIndexOfRow) | 0), ((sourceColumnIndex + columnCount) | 0));
                        if (sourceEndPos < 0) {
                            sourceEndPos = ~sourceEndPos;
                        }
                        var positionsToCopy = (sourceEndPos - sourceStartPos) | 0;
                        if (positionsToCopy > 0) {
                            var targetStartPos = System.Array.binarySearch(targetSparse.Indices, 0, targetSparse.ValueCount, targetColumnIndex);
                            if (targetStartPos < 0) {
                                targetStartPos = ~targetStartPos;
                            }
                            var targetEndPos = System.Array.binarySearch(targetSparse.Indices, 0, targetSparse.ValueCount, ((targetColumnIndex + columnCount) | 0));
                            if (targetEndPos < 0) {
                                targetEndPos = Math.max(~targetEndPos, targetStartPos);
                            }
                            var newValueCount = (((targetSparse.ValueCount - (((targetEndPos - targetStartPos) | 0))) | 0) + positionsToCopy) | 0;
                            var newValues = System.Array.init(newValueCount, function (){
                                return Bridge.getDefaultValue(T);
                            }, T);
                            var newIndices = System.Array.init(newValueCount, 0, System.Int32);
                            System.Array.copy(targetSparse.Indices, 0, newIndices, 0, targetStartPos);
                            System.Array.copy(targetSparse.Values, 0, newValues, 0, targetStartPos);
                            var shiftRight = (targetColumnIndex - sourceColumnIndex) | 0;
                            for (var i = 0; i < positionsToCopy; i = (i + 1) | 0) {
                                newIndices[System.Array.index(((targetStartPos + i) | 0), newIndices)] = (this.ColumnIndices[System.Array.index(((sourceStartPos + i) | 0), this.ColumnIndices)] + shiftRight) | 0;
                            }
                            System.Array.copy(this.Values, sourceStartPos, newValues, targetStartPos, positionsToCopy);
                            System.Array.copy(targetSparse.Indices, targetEndPos, newIndices, ((positionsToCopy + targetStartPos) | 0), ((targetSparse.ValueCount - targetEndPos) | 0));
                            System.Array.copy(targetSparse.Values, targetEndPos, newValues, ((positionsToCopy + targetStartPos) | 0), ((targetSparse.ValueCount - targetEndPos) | 0));
                            targetSparse.Values = newValues;
                            targetSparse.Indices = newIndices;
                            targetSparse.ValueCount = newValueCount;
                        } else {
                            if (existingData === MathNet.Numerics.LinearAlgebra.ExistingData.Clear) {
                                target.Clear$1(targetColumnIndex, columnCount);
                            }
                        }
                    }
                    return;
                }
                if (existingData === MathNet.Numerics.LinearAlgebra.ExistingData.Clear) {
                    target.Clear$1(targetColumnIndex, columnCount);
                }
                for (var i1 = sourceColumnIndex, j = 0; i1 < ((sourceColumnIndex + columnCount) | 0); i1 = (i1 + 1) | 0, j = (j + 1) | 0) {
                    var index = this.FindItem(rowIndex, i1);
                    target.At$1(j, index >= 0 ? this.Values[System.Array.index(index, this.Values)] : MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero);
                }
            },
            TransposeToUnchecked: function (target, existingData) {
                var sparseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(T));
                if (sparseTarget != null) {
                    this.TransposeToUnchecked$2(sparseTarget);
                    return;
                }

                var denseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(T));
                if (denseTarget != null) {
                    this.TransposeToUnchecked$1(denseTarget, existingData);
                    return;
                }


                if (existingData === MathNet.Numerics.LinearAlgebra.ExistingData.Clear) {
                    target.Clear();
                }

                if (this.ValueCount !== 0) {
                    for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                        var startIndex = this.RowPointers[System.Array.index(row, this.RowPointers)];
                        var endIndex = this.RowPointers[System.Array.index(((row + 1) | 0), this.RowPointers)];
                        for (var j = startIndex; j < endIndex; j = (j + 1) | 0) {
                            target.At$1(this.ColumnIndices[System.Array.index(j, this.ColumnIndices)], row, this.Values[System.Array.index(j, this.Values)]);
                        }
                    }
                }
            },
            TransposeToUnchecked$2: function (target) {
                var $t, $t1, $t2;
                target.Values = System.Array.init(this.ValueCount, function (){
                    return Bridge.getDefaultValue(T);
                }, T);
                target.ColumnIndices = System.Array.init(this.ValueCount, 0, System.Int32);
                var cx = target.Values;
                var cp = target.RowPointers;
                var ci = target.ColumnIndices;

                var w = System.Array.init(this.ColumnCount, 0, System.Int32);
                for (var p = 0; p < this.RowPointers[System.Array.index(this.RowCount, this.RowPointers)]; p = (p + 1) | 0) {
                    w[System.Array.index(($t = this.ColumnIndices[System.Array.index(p, this.ColumnIndices)]), w)] = (w[System.Array.index($t, w)] + 1) | 0;
                }

                var nz = 0;
                for (var i = 0; i < this.ColumnCount; i = (i + 1) | 0) {
                    cp[System.Array.index(i, cp)] = nz;
                    nz = (nz + w[System.Array.index(i, w)]) | 0;
                    w[System.Array.index(i, w)] = cp[System.Array.index(i, cp)];
                }
                cp[System.Array.index(this.ColumnCount, cp)] = nz;

                for (var i1 = 0; i1 < this.RowCount; i1 = (i1 + 1) | 0) {
                    for (var p1 = this.RowPointers[System.Array.index(i1, this.RowPointers)]; p1 < this.RowPointers[System.Array.index(((i1 + 1) | 0), this.RowPointers)]; p1 = (p1 + 1) | 0) {
                        var j = Bridge.identity(w[System.Array.index(($t1 = this.ColumnIndices[System.Array.index(p1, this.ColumnIndices)]), w)], (($t2 = (w[System.Array.index($t1, w)] + 1) | 0, w[System.Array.index($t1, w)] = $t2, $t2)));

                        ci[System.Array.index(j, ci)] = i1;
                        cx[System.Array.index(j, cx)] = this.Values[System.Array.index(p1, this.Values)];
                    }
                }
            },
            TransposeToUnchecked$1: function (target, existingData) {
                if (existingData === MathNet.Numerics.LinearAlgebra.ExistingData.Clear) {
                    target.Clear();
                }

                if (this.ValueCount !== 0) {
                    for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                        var targetIndex = Bridge.Int.mul(row, this.ColumnCount);
                        var startIndex = this.RowPointers[System.Array.index(row, this.RowPointers)];
                        var endIndex = this.RowPointers[System.Array.index(((row + 1) | 0), this.RowPointers)];
                        for (var j = startIndex; j < endIndex; j = (j + 1) | 0) {
                            target.Data[System.Array.index(((targetIndex + this.ColumnIndices[System.Array.index(j, this.ColumnIndices)]) | 0), target.Data)] = this.Values[System.Array.index(j, this.Values)];
                        }
                    }
                }
            },
            TransposeSquareInplaceUnchecked: function () {
                var $t, $t1, $t2;
                var cx = System.Array.init(this.ValueCount, function (){
                    return Bridge.getDefaultValue(T);
                }, T);
                var cp = System.Array.init(((this.RowCount + 1) | 0), 0, System.Int32);
                var ci = System.Array.init(this.ValueCount, 0, System.Int32);

                var w = System.Array.init(this.ColumnCount, 0, System.Int32);
                for (var p = 0; p < this.RowPointers[System.Array.index(this.RowCount, this.RowPointers)]; p = (p + 1) | 0) {
                    w[System.Array.index(($t = this.ColumnIndices[System.Array.index(p, this.ColumnIndices)]), w)] = (w[System.Array.index($t, w)] + 1) | 0;
                }

                var nz = 0;
                for (var i = 0; i < this.ColumnCount; i = (i + 1) | 0) {
                    cp[System.Array.index(i, cp)] = nz;
                    nz = (nz + w[System.Array.index(i, w)]) | 0;
                    w[System.Array.index(i, w)] = cp[System.Array.index(i, cp)];
                }
                cp[System.Array.index(this.ColumnCount, cp)] = nz;

                for (var i1 = 0; i1 < this.RowCount; i1 = (i1 + 1) | 0) {
                    for (var p1 = this.RowPointers[System.Array.index(i1, this.RowPointers)]; p1 < this.RowPointers[System.Array.index(((i1 + 1) | 0), this.RowPointers)]; p1 = (p1 + 1) | 0) {
                        var j = Bridge.identity(w[System.Array.index(($t1 = this.ColumnIndices[System.Array.index(p1, this.ColumnIndices)]), w)], (($t2 = (w[System.Array.index($t1, w)] + 1) | 0, w[System.Array.index($t1, w)] = $t2, $t2)));

                        ci[System.Array.index(j, ci)] = i1;
                        cx[System.Array.index(j, cx)] = this.Values[System.Array.index(p1, this.Values)];
                    }
                }

                System.Array.copy(cx, 0, this.Values, 0, this.ValueCount);

                System.Array.copy(ci, 0, this.ColumnIndices, 0, this.ValueCount);
                System.Array.copy(cp, 0, this.RowPointers, 0, (((this.RowCount + 1) | 0)));
            },
            ToRowMajorArray: function () {
                var ret = System.Array.init(Bridge.Int.mul(this.RowCount, this.ColumnCount), function (){
                    return Bridge.getDefaultValue(T);
                }, T);
                if (this.ValueCount !== 0) {
                    for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                        var offset = Bridge.Int.mul(row, this.ColumnCount);
                        var startIndex = this.RowPointers[System.Array.index(row, this.RowPointers)];
                        var endIndex = this.RowPointers[System.Array.index(((row + 1) | 0), this.RowPointers)];
                        for (var j = startIndex; j < endIndex; j = (j + 1) | 0) {
                            ret[System.Array.index(((offset + this.ColumnIndices[System.Array.index(j, this.ColumnIndices)]) | 0), ret)] = this.Values[System.Array.index(j, this.Values)];
                        }
                    }
                }
                return ret;
            },
            ToColumnMajorArray: function () {
                var ret = System.Array.init(Bridge.Int.mul(this.RowCount, this.ColumnCount), function (){
                    return Bridge.getDefaultValue(T);
                }, T);
                if (this.ValueCount !== 0) {
                    for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                        var startIndex = this.RowPointers[System.Array.index(row, this.RowPointers)];
                        var endIndex = this.RowPointers[System.Array.index(((row + 1) | 0), this.RowPointers)];
                        for (var j = startIndex; j < endIndex; j = (j + 1) | 0) {
                            ret[System.Array.index(((Bridge.Int.mul((this.ColumnIndices[System.Array.index(j, this.ColumnIndices)]), this.RowCount) + row) | 0), ret)] = this.Values[System.Array.index(j, this.Values)];
                        }
                    }
                }
                return ret;
            },
            ToRowArrays: function () {
                var ret = System.Array.init(this.RowCount, null, System.Array.type(T));
                if (this.ValueCount !== 0) {
                    for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                        var array = System.Array.init(this.ColumnCount, function (){
                            return Bridge.getDefaultValue(T);
                        }, T);
                        var startIndex = this.RowPointers[System.Array.index(row, this.RowPointers)];
                        var endIndex = this.RowPointers[System.Array.index(((row + 1) | 0), this.RowPointers)];
                        for (var j = startIndex; j < endIndex; j = (j + 1) | 0) {
                            array[System.Array.index(this.ColumnIndices[System.Array.index(j, this.ColumnIndices)], array)] = this.Values[System.Array.index(j, this.Values)];
                        }
                        ret[System.Array.index(row, ret)] = array;
                    }
                }
                return ret;
            },
            ToColumnArrays: function () {
                var $t;
                var ret = System.Array.init(this.ColumnCount, null, System.Array.type(T));
                for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                    ret[System.Array.index(j, ret)] = System.Array.init(this.RowCount, function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                }
                if (this.ValueCount !== 0) {
                    for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                        var startIndex = this.RowPointers[System.Array.index(row, this.RowPointers)];
                        var endIndex = this.RowPointers[System.Array.index(((row + 1) | 0), this.RowPointers)];
                        for (var j1 = startIndex; j1 < endIndex; j1 = (j1 + 1) | 0) {
                            ($t = ret[System.Array.index(this.ColumnIndices[System.Array.index(j1, this.ColumnIndices)], ret)])[System.Array.index(row, $t)] = this.Values[System.Array.index(j1, this.Values)];
                        }
                    }
                }
                return ret;
            },
            ToArray: function () {
                var ret = System.Array.create(function (){
                    return Bridge.getDefaultValue(T);
                }, null, T, this.RowCount, this.ColumnCount);
                if (this.ValueCount !== 0) {
                    for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                        var startIndex = this.RowPointers[System.Array.index(row, this.RowPointers)];
                        var endIndex = this.RowPointers[System.Array.index(((row + 1) | 0), this.RowPointers)];
                        for (var j = startIndex; j < endIndex; j = (j + 1) | 0) {
                            ret.set([row, this.ColumnIndices[System.Array.index(j, this.ColumnIndices)]], this.Values[System.Array.index(j, this.Values)]);
                        }
                    }
                }
                return ret;
            },
            Enumerate: function () {
                return new (Bridge.GeneratorEnumerable$1(T))(Bridge.fn.bind(this, function ()  {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        k,
                        row,
                        col,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(T))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        k = 0;
                                            row = 0;
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ( row < this.RowCount ) {
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 9;
                                        continue;
                                    }
                                    case 2: {
                                        col = 0;
                                            $step = 3;
                                            continue;
                                    }
                                    case 3: {
                                        if ( col < this.ColumnCount ) {
                                                $step = 4;
                                                continue;
                                            }
                                        $step = 7;
                                        continue;
                                    }
                                    case 4: {
                                        $enumerator.current = k < this.RowPointers[System.Array.index(((row + 1) | 0), this.RowPointers)] && this.ColumnIndices[System.Array.index(k, this.ColumnIndices)] === col ? this.Values[System.Array.index(Bridge.identity(k, ((k = (k + 1) | 0))), this.Values)] : MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero;
                                            $step = 5;
                                            return true;
                                    }
                                    case 5: {
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        col = (col + 1) | 0;
                                        $step = 3;
                                        continue;
                                    }
                                    case 7: {
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        row = (row + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 9: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }));
            },
            EnumerateIndexed: function () {
                return new (Bridge.GeneratorEnumerable$1(System.Tuple$3(System.Int32,System.Int32,T)))(Bridge.fn.bind(this, function ()  {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        k,
                        row,
                        col,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Tuple$3(System.Int32,System.Int32,T)))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        k = 0;
                                            row = 0;
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ( row < this.RowCount ) {
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 9;
                                        continue;
                                    }
                                    case 2: {
                                        col = 0;
                                            $step = 3;
                                            continue;
                                    }
                                    case 3: {
                                        if ( col < this.ColumnCount ) {
                                                $step = 4;
                                                continue;
                                            }
                                        $step = 7;
                                        continue;
                                    }
                                    case 4: {
                                        $enumerator.current = k < this.RowPointers[System.Array.index(((row + 1) | 0), this.RowPointers)] && this.ColumnIndices[System.Array.index(k, this.ColumnIndices)] === col ? { Item1: row, Item2: col, Item3: this.Values[System.Array.index(Bridge.identity(k, ((k = (k + 1) | 0))), this.Values)] } : { Item1: row, Item2: col, Item3: MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero };
                                            $step = 5;
                                            return true;
                                    }
                                    case 5: {
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        col = (col + 1) | 0;
                                        $step = 3;
                                        continue;
                                    }
                                    case 7: {
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        row = (row + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 9: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }));
            },
            EnumerateNonZero: function () {
                return System.Linq.Enumerable.from(this.Values, T).take(this.ValueCount).where(function (x) {
                    return !Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, x, T);
                });
            },
            EnumerateNonZeroIndexed: function () {
                return new (Bridge.GeneratorEnumerable$1(System.Tuple$3(System.Int32,System.Int32,T)))(Bridge.fn.bind(this, function ()  {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        row,
                        startIndex,
                        endIndex,
                        j,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Tuple$3(System.Int32,System.Int32,T)))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        row = 0;
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ( row < this.RowCount ) {
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 11;
                                        continue;
                                    }
                                    case 2: {
                                        startIndex = this.RowPointers[System.Array.index(row, this.RowPointers)];
                                            endIndex = this.RowPointers[System.Array.index(((row + 1) | 0), this.RowPointers)];
                                            j = startIndex;
                                            $step = 3;
                                            continue;
                                    }
                                    case 3: {
                                        if ( j < endIndex ) {
                                                $step = 4;
                                                continue;
                                            }
                                        $step = 9;
                                        continue;
                                    }
                                    case 4: {
                                        if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, this.Values[System.Array.index(j, this.Values)], T)) {
                                                $step = 5;
                                                continue;
                                            } 
                                            $step = 7;
                                            continue;
                                    }
                                    case 5: {
                                        $enumerator.current = { Item1: row, Item2: this.ColumnIndices[System.Array.index(j, this.ColumnIndices)], Item3: this.Values[System.Array.index(j, this.Values)] };
                                            $step = 6;
                                            return true;
                                    }
                                    case 6: {
                                        $step = 7;
                                        continue;
                                    }
                                    case 7: {
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        j = (j + 1) | 0;
                                        $step = 3;
                                        continue;
                                    }
                                    case 9: {
                                        $step = 10;
                                        continue;
                                    }
                                    case 10: {
                                        row = (row + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 11: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }));
            },
            Find: function (predicate, zeros) {
                for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                    var startIndex = this.RowPointers[System.Array.index(row, this.RowPointers)];
                    var endIndex = this.RowPointers[System.Array.index(((row + 1) | 0), this.RowPointers)];
                    for (var j = startIndex; j < endIndex; j = (j + 1) | 0) {
                        if (predicate(this.Values[System.Array.index(j, this.Values)])) {
                            return { Item1: row, Item2: this.ColumnIndices[System.Array.index(j, this.ColumnIndices)], Item3: this.Values[System.Array.index(j, this.Values)] };
                        }
                    }
                }
                if (zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include && this.ValueCount < (Bridge.Int.mul(this.RowCount, this.ColumnCount))) {
                    if (predicate(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero)) {
                        var k = 0;
                        for (var row1 = 0; row1 < this.RowCount; row1 = (row1 + 1) | 0) {
                            for (var col = 0; col < this.ColumnCount; col = (col + 1) | 0) {
                                if (k < this.RowPointers[System.Array.index(((row1 + 1) | 0), this.RowPointers)] && this.ColumnIndices[System.Array.index(k, this.ColumnIndices)] === col) {
                                    k = (k + 1) | 0;
                                } else {
                                    return { Item1: row1, Item2: col, Item3: MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero };
                                }
                            }
                        }
                    }
                }
                return null;
            },
            Find2Unchecked: function (TOther, other, predicate, zeros) {
                var denseOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(TOther));
                if (denseOther != null) {
                    var otherData = denseOther.Data;
                    var k = 0;
                    for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                        for (var col = 0; col < this.ColumnCount; col = (col + 1) | 0) {
                            var available = k < this.RowPointers[System.Array.index(((row + 1) | 0), this.RowPointers)] && this.ColumnIndices[System.Array.index(k, this.ColumnIndices)] === col;
                            if (predicate(available ? this.Values[System.Array.index(Bridge.identity(k, ((k = (k + 1) | 0))), this.Values)] : MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, otherData[System.Array.index(((Bridge.Int.mul(col, this.RowCount) + row) | 0), otherData)])) {
                                return { Item1: row, Item2: col, Item3: available ? this.Values[System.Array.index(((k - 1) | 0), this.Values)] : MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, Item4: otherData[System.Array.index(((Bridge.Int.mul(col, this.RowCount) + row) | 0), otherData)] };
                            }
                        }
                    }
                    return null;
                }

                var diagonalOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(TOther));
                if (diagonalOther != null) {
                    var otherData1 = diagonalOther.Data;
                    var otherZero = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(TOther).Matrix.Zero;

                    if (zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include && predicate(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, otherZero)) {
                        var k1 = 0;
                        for (var row1 = 0; row1 < this.RowCount; row1 = (row1 + 1) | 0) {
                            for (var col1 = 0; col1 < this.ColumnCount; col1 = (col1 + 1) | 0) {
                                var available1 = k1 < this.RowPointers[System.Array.index(((row1 + 1) | 0), this.RowPointers)] && this.ColumnIndices[System.Array.index(k1, this.ColumnIndices)] === col1;
                                if (predicate(available1 ? this.Values[System.Array.index(Bridge.identity(k1, ((k1 = (k1 + 1) | 0))), this.Values)] : MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, row1 === col1 ? otherData1[System.Array.index(row1, otherData1)] : otherZero)) {
                                    return { Item1: row1, Item2: col1, Item3: available1 ? this.Values[System.Array.index(((k1 - 1) | 0), this.Values)] : MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, Item4: row1 === col1 ? otherData1[System.Array.index(row1, otherData1)] : otherZero };
                                }
                            }
                        }
                        return null;
                    }

                    for (var row2 = 0; row2 < this.RowCount; row2 = (row2 + 1) | 0) {
                        var diagonal = false;
                        var startIndex = this.RowPointers[System.Array.index(row2, this.RowPointers)];
                        var endIndex = this.RowPointers[System.Array.index(((row2 + 1) | 0), this.RowPointers)];
                        for (var j = startIndex; j < endIndex; j = (j + 1) | 0) {
                            if (this.ColumnIndices[System.Array.index(j, this.ColumnIndices)] === row2) {
                                diagonal = true;
                                if (predicate(this.Values[System.Array.index(j, this.Values)], otherData1[System.Array.index(row2, otherData1)])) {
                                    return { Item1: row2, Item2: row2, Item3: this.Values[System.Array.index(j, this.Values)], Item4: otherData1[System.Array.index(row2, otherData1)] };
                                }
                            } else {
                                if (predicate(this.Values[System.Array.index(j, this.Values)], otherZero)) {
                                    return { Item1: row2, Item2: this.ColumnIndices[System.Array.index(j, this.ColumnIndices)], Item3: this.Values[System.Array.index(j, this.Values)], Item4: otherZero };
                                }
                            }
                        }
                        if (!diagonal && row2 < this.ColumnCount) {
                            if (predicate(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, otherData1[System.Array.index(row2, otherData1)])) {
                                return { Item1: row2, Item2: row2, Item3: MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, Item4: otherData1[System.Array.index(row2, otherData1)] };
                            }
                        }
                    }
                    return null;
                }

                var sparseOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(TOther));
                if (sparseOther != null) {
                    var otherRowPointers = sparseOther.RowPointers;
                    var otherColumnIndices = sparseOther.ColumnIndices;
                    var otherValues = sparseOther.Values;
                    var otherZero1 = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(TOther).Matrix.Zero;

                    if (zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include) {
                        var k2 = 0, otherk = 0;
                        for (var row3 = 0; row3 < this.RowCount; row3 = (row3 + 1) | 0) {
                            for (var col2 = 0; col2 < this.ColumnCount; col2 = (col2 + 1) | 0) {
                                var available2 = k2 < this.RowPointers[System.Array.index(((row3 + 1) | 0), this.RowPointers)] && this.ColumnIndices[System.Array.index(k2, this.ColumnIndices)] === col2;
                                var otherAvailable = otherk < otherRowPointers[System.Array.index(((row3 + 1) | 0), otherRowPointers)] && otherColumnIndices[System.Array.index(otherk, otherColumnIndices)] === col2;
                                if (predicate(available2 ? this.Values[System.Array.index(Bridge.identity(k2, ((k2 = (k2 + 1) | 0))), this.Values)] : MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, otherAvailable ? otherValues[System.Array.index(Bridge.identity(otherk, ((otherk = (otherk + 1) | 0))), otherValues)] : otherZero1)) {
                                    return { Item1: row3, Item2: col2, Item3: available2 ? this.Values[System.Array.index(((k2 - 1) | 0), this.Values)] : MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, Item4: otherAvailable ? otherValues[System.Array.index(((otherk - 1) | 0), otherValues)] : otherZero1 };
                                }
                            }
                        }
                        return null;
                    }

                    for (var row4 = 0; row4 < this.RowCount; row4 = (row4 + 1) | 0) {
                        var endIndex1 = this.RowPointers[System.Array.index(((row4 + 1) | 0), this.RowPointers)];
                        var otherEndIndex = otherRowPointers[System.Array.index(((row4 + 1) | 0), otherRowPointers)];
                        var k3 = this.RowPointers[System.Array.index(row4, this.RowPointers)];
                        var otherk1 = otherRowPointers[System.Array.index(row4, otherRowPointers)];
                        while (k3 < endIndex1 || otherk1 < otherEndIndex) {
                            if (k3 === endIndex1 || otherk1 < otherEndIndex && this.ColumnIndices[System.Array.index(k3, this.ColumnIndices)] > otherColumnIndices[System.Array.index(otherk1, otherColumnIndices)]) {
                                if (predicate(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, otherValues[System.Array.index(Bridge.identity(otherk1, ((otherk1 = (otherk1 + 1) | 0))), otherValues)])) {
                                    return { Item1: row4, Item2: otherColumnIndices[System.Array.index(((otherk1 - 1) | 0), otherColumnIndices)], Item3: MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, Item4: otherValues[System.Array.index(((otherk1 - 1) | 0), otherValues)] };
                                }
                            } else if (otherk1 === otherEndIndex || this.ColumnIndices[System.Array.index(k3, this.ColumnIndices)] < otherColumnIndices[System.Array.index(otherk1, otherColumnIndices)]) {
                                if (predicate(this.Values[System.Array.index(Bridge.identity(k3, ((k3 = (k3 + 1) | 0))), this.Values)], otherZero1)) {
                                    return { Item1: row4, Item2: this.ColumnIndices[System.Array.index(((k3 - 1) | 0), this.ColumnIndices)], Item3: this.Values[System.Array.index(((k3 - 1) | 0), this.Values)], Item4: otherZero1 };
                                }
                            } else {
                                if (predicate(this.Values[System.Array.index(Bridge.identity(k3, ((k3 = (k3 + 1) | 0))), this.Values)], otherValues[System.Array.index(Bridge.identity(otherk1, ((otherk1 = (otherk1 + 1) | 0))), otherValues)])) {
                                    return { Item1: row4, Item2: this.ColumnIndices[System.Array.index(((k3 - 1) | 0), this.ColumnIndices)], Item3: this.Values[System.Array.index(((k3 - 1) | 0), this.Values)], Item4: otherValues[System.Array.index(((otherk1 - 1) | 0), otherValues)] };
                                }
                            }
                        }
                    }
                    return null;
                }


                return MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).prototype.Find2Unchecked.call(this, TOther, other, predicate, zeros);
            },
            MapInplace: function (f, zeros) {
                if (zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include || !Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, f(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero), T)) {
                    var newRowPointers = this.RowPointers;
                    var newColumnIndices = new (System.Collections.Generic.List$1(System.Int32)).$ctor2(this.ColumnIndices.length);
                    var newValues = new (System.Collections.Generic.List$1(T)).$ctor2(this.Values.length);

                    var k = 0;
                    for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                        newRowPointers[System.Array.index(row, newRowPointers)] = newValues.Count;
                        for (var col = 0; col < this.ColumnCount; col = (col + 1) | 0) {
                            var item = k < this.RowPointers[System.Array.index(((row + 1) | 0), this.RowPointers)] && this.ColumnIndices[System.Array.index(k, this.ColumnIndices)] === col ? f(this.Values[System.Array.index(Bridge.identity(k, ((k = (k + 1) | 0))), this.Values)]) : f(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero);
                            if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, item, T)) {
                                newValues.add(item);
                                newColumnIndices.add(col);
                            }
                        }
                    }

                    this.ColumnIndices = newColumnIndices.ToArray();
                    this.Values = newValues.ToArray();
                    newRowPointers[System.Array.index(this.RowCount, newRowPointers)] = newValues.Count;
                } else {
                    var nonZero = 0;
                    for (var row1 = 0; row1 < this.RowCount; row1 = (row1 + 1) | 0) {
                        var startIndex = this.RowPointers[System.Array.index(row1, this.RowPointers)];
                        var endIndex = this.RowPointers[System.Array.index(((row1 + 1) | 0), this.RowPointers)];
                        this.RowPointers[System.Array.index(row1, this.RowPointers)] = nonZero;
                        for (var j = startIndex; j < endIndex; j = (j + 1) | 0) {
                            var item1 = f(this.Values[System.Array.index(j, this.Values)]);
                            if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, item1, T)) {
                                this.Values[System.Array.index(nonZero, this.Values)] = item1;
                                this.ColumnIndices[System.Array.index(nonZero, this.ColumnIndices)] = this.ColumnIndices[System.Array.index(j, this.ColumnIndices)];
                                nonZero = (nonZero + 1) | 0;
                            }
                        }
                    }
                    System.Array.resize(Bridge.ref(this, "ColumnIndices"), nonZero, 0, System.Int32);
                    System.Array.resize(Bridge.ref(this, "Values"), nonZero, function () {
                        return Bridge.getDefaultValue(T);
                    }, T);
                    this.RowPointers[System.Array.index(this.RowCount, this.RowPointers)] = nonZero;
                }
            },
            MapIndexedInplace: function (f, zeros) {
                if (zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include || !Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, f(0, 1, MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero), T)) {
                    var newRowPointers = this.RowPointers;
                    var newColumnIndices = new (System.Collections.Generic.List$1(System.Int32)).$ctor2(this.ColumnIndices.length);
                    var newValues = new (System.Collections.Generic.List$1(T)).$ctor2(this.Values.length);

                    var k = 0;
                    for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                        newRowPointers[System.Array.index(row, newRowPointers)] = newValues.Count;
                        for (var col = 0; col < this.ColumnCount; col = (col + 1) | 0) {
                            var item = k < this.RowPointers[System.Array.index(((row + 1) | 0), this.RowPointers)] && this.ColumnIndices[System.Array.index(k, this.ColumnIndices)] === col ? f(row, col, this.Values[System.Array.index(Bridge.identity(k, ((k = (k + 1) | 0))), this.Values)]) : f(row, col, MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero);
                            if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, item, T)) {
                                newValues.add(item);
                                newColumnIndices.add(col);
                            }
                        }
                    }

                    this.ColumnIndices = newColumnIndices.ToArray();
                    this.Values = newValues.ToArray();
                    newRowPointers[System.Array.index(this.RowCount, newRowPointers)] = newValues.Count;
                } else {
                    var nonZero = 0;
                    for (var row1 = 0; row1 < this.RowCount; row1 = (row1 + 1) | 0) {
                        var startIndex = this.RowPointers[System.Array.index(row1, this.RowPointers)];
                        var endIndex = this.RowPointers[System.Array.index(((row1 + 1) | 0), this.RowPointers)];
                        this.RowPointers[System.Array.index(row1, this.RowPointers)] = nonZero;
                        for (var j = startIndex; j < endIndex; j = (j + 1) | 0) {
                            var item1 = f(row1, this.ColumnIndices[System.Array.index(j, this.ColumnIndices)], this.Values[System.Array.index(j, this.Values)]);
                            if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, item1, T)) {
                                this.Values[System.Array.index(nonZero, this.Values)] = item1;
                                this.ColumnIndices[System.Array.index(nonZero, this.ColumnIndices)] = this.ColumnIndices[System.Array.index(j, this.ColumnIndices)];
                                nonZero = (nonZero + 1) | 0;
                            }
                        }
                    }
                    System.Array.resize(Bridge.ref(this, "ColumnIndices"), nonZero, 0, System.Int32);
                    System.Array.resize(Bridge.ref(this, "Values"), nonZero, function () {
                        return Bridge.getDefaultValue(T);
                    }, T);
                    this.RowPointers[System.Array.index(this.RowCount, this.RowPointers)] = nonZero;
                }
            },
            MapToUnchecked: function (TU, target, f, zeros, existingData) {
                var processZeros = zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include || !Bridge.equals(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, f(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero));

                var sparseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(TU));
                if (sparseTarget != null) {
                    var newRowPointers = sparseTarget.RowPointers;
                    var newColumnIndices = new (System.Collections.Generic.List$1(System.Int32)).$ctor2(this.ColumnIndices.length);
                    var newValues = new (System.Collections.Generic.List$1(TU)).$ctor2(this.Values.length);

                    if (processZeros) {
                        var k = 0;
                        for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                            newRowPointers[System.Array.index(row, newRowPointers)] = newValues.Count;
                            for (var col = 0; col < this.ColumnCount; col = (col + 1) | 0) {
                                var item = k < this.RowPointers[System.Array.index(((row + 1) | 0), this.RowPointers)] && this.ColumnIndices[System.Array.index(k, this.ColumnIndices)] === col ? f(this.Values[System.Array.index(Bridge.identity(k, ((k = (k + 1) | 0))), this.Values)]) : f(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero);
                                if (!Bridge.equals(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, item)) {
                                    newValues.add(item);
                                    newColumnIndices.add(col);
                                }
                            }
                        }
                    } else {
                        for (var row1 = 0; row1 < this.RowCount; row1 = (row1 + 1) | 0) {
                            newRowPointers[System.Array.index(row1, newRowPointers)] = newValues.Count;
                            var startIndex = this.RowPointers[System.Array.index(row1, this.RowPointers)];
                            var endIndex = this.RowPointers[System.Array.index(((row1 + 1) | 0), this.RowPointers)];
                            for (var j = startIndex; j < endIndex; j = (j + 1) | 0) {
                                var item1 = f(this.Values[System.Array.index(j, this.Values)]);
                                if (!Bridge.equals(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, item1)) {
                                    newValues.add(item1);
                                    newColumnIndices.add(this.ColumnIndices[System.Array.index(j, this.ColumnIndices)]);
                                }
                            }
                        }
                    }

                    sparseTarget.ColumnIndices = newColumnIndices.ToArray();
                    sparseTarget.Values = newValues.ToArray();
                    newRowPointers[System.Array.index(this.RowCount, newRowPointers)] = newValues.Count;
                    return;
                }


                if (existingData === MathNet.Numerics.LinearAlgebra.ExistingData.Clear && !processZeros) {
                    target.Clear();
                }

                if (processZeros) {
                    for (var row2 = 0; row2 < this.RowCount; row2 = (row2 + 1) | 0) {
                        var index = this.RowPointers[System.Array.index(row2, this.RowPointers)];
                        var endIndex1 = this.RowPointers[System.Array.index(((row2 + 1) | 0), this.RowPointers)];
                        for (var j1 = 0; j1 < this.ColumnCount; j1 = (j1 + 1) | 0) {
                            if (index < endIndex1 && j1 === this.ColumnIndices[System.Array.index(index, this.ColumnIndices)]) {
                                target.At$1(row2, j1, f(this.Values[System.Array.index(index, this.Values)]));
                                index = Math.min(((index + 1) | 0), endIndex1);
                            } else {
                                target.At$1(row2, j1, f(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero));
                            }
                        }
                    }
                } else {
                    for (var row3 = 0; row3 < this.RowCount; row3 = (row3 + 1) | 0) {
                        var startIndex1 = this.RowPointers[System.Array.index(row3, this.RowPointers)];
                        var endIndex2 = this.RowPointers[System.Array.index(((row3 + 1) | 0), this.RowPointers)];
                        for (var j2 = startIndex1; j2 < endIndex2; j2 = (j2 + 1) | 0) {
                            target.At$1(row3, this.ColumnIndices[System.Array.index(j2, this.ColumnIndices)], f(this.Values[System.Array.index(j2, this.Values)]));
                        }
                    }
                }
            },
            MapIndexedToUnchecked: function (TU, target, f, zeros, existingData) {
                var processZeros = zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include || !Bridge.equals(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, f(0, 1, MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero));

                var sparseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(TU));
                if (sparseTarget != null) {
                    var newRowPointers = sparseTarget.RowPointers;
                    var newColumnIndices = new (System.Collections.Generic.List$1(System.Int32)).$ctor2(this.ColumnIndices.length);
                    var newValues = new (System.Collections.Generic.List$1(TU)).$ctor2(this.Values.length);

                    if (processZeros) {
                        var k = 0;
                        for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                            newRowPointers[System.Array.index(row, newRowPointers)] = newValues.Count;
                            for (var col = 0; col < this.ColumnCount; col = (col + 1) | 0) {
                                var item = k < this.RowPointers[System.Array.index(((row + 1) | 0), this.RowPointers)] && this.ColumnIndices[System.Array.index(k, this.ColumnIndices)] === col ? f(row, col, this.Values[System.Array.index(Bridge.identity(k, ((k = (k + 1) | 0))), this.Values)]) : f(row, col, MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero);
                                if (!Bridge.equals(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, item)) {
                                    newValues.add(item);
                                    newColumnIndices.add(col);
                                }
                            }
                        }
                    } else {
                        for (var row1 = 0; row1 < this.RowCount; row1 = (row1 + 1) | 0) {
                            newRowPointers[System.Array.index(row1, newRowPointers)] = newValues.Count;
                            var startIndex = this.RowPointers[System.Array.index(row1, this.RowPointers)];
                            var endIndex = this.RowPointers[System.Array.index(((row1 + 1) | 0), this.RowPointers)];
                            for (var j = startIndex; j < endIndex; j = (j + 1) | 0) {
                                var item1 = f(row1, this.ColumnIndices[System.Array.index(j, this.ColumnIndices)], this.Values[System.Array.index(j, this.Values)]);
                                if (!Bridge.equals(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, item1)) {
                                    newValues.add(item1);
                                    newColumnIndices.add(this.ColumnIndices[System.Array.index(j, this.ColumnIndices)]);
                                }
                            }
                        }
                    }

                    sparseTarget.ColumnIndices = newColumnIndices.ToArray();
                    sparseTarget.Values = newValues.ToArray();
                    newRowPointers[System.Array.index(this.RowCount, newRowPointers)] = newValues.Count;
                    return;
                }


                if (existingData === MathNet.Numerics.LinearAlgebra.ExistingData.Clear && !processZeros) {
                    target.Clear();
                }

                if (processZeros) {
                    for (var row2 = 0; row2 < this.RowCount; row2 = (row2 + 1) | 0) {
                        var index = this.RowPointers[System.Array.index(row2, this.RowPointers)];
                        var endIndex1 = this.RowPointers[System.Array.index(((row2 + 1) | 0), this.RowPointers)];
                        for (var j1 = 0; j1 < this.ColumnCount; j1 = (j1 + 1) | 0) {
                            if (index < endIndex1 && j1 === this.ColumnIndices[System.Array.index(index, this.ColumnIndices)]) {
                                target.At$1(row2, j1, f(row2, j1, this.Values[System.Array.index(index, this.Values)]));
                                index = Math.min(((index + 1) | 0), endIndex1);
                            } else {
                                target.At$1(row2, j1, f(row2, j1, MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero));
                            }
                        }
                    }
                } else {
                    for (var row3 = 0; row3 < this.RowCount; row3 = (row3 + 1) | 0) {
                        var startIndex1 = this.RowPointers[System.Array.index(row3, this.RowPointers)];
                        var endIndex2 = this.RowPointers[System.Array.index(((row3 + 1) | 0), this.RowPointers)];
                        for (var j2 = startIndex1; j2 < endIndex2; j2 = (j2 + 1) | 0) {
                            target.At$1(row3, this.ColumnIndices[System.Array.index(j2, this.ColumnIndices)], f(row3, this.ColumnIndices[System.Array.index(j2, this.ColumnIndices)], this.Values[System.Array.index(j2, this.Values)]));
                        }
                    }
                }
            },
            MapSubMatrixIndexedToUnchecked: function (TU, target, f, sourceRowIndex, targetRowIndex, rowCount, sourceColumnIndex, targetColumnIndex, columnCount, zeros, existingData) {
                var sparseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(TU));
                if (sparseTarget != null) {
                    this.MapSubMatrixIndexedToUnchecked$1(TU, sparseTarget, f, sourceRowIndex, targetRowIndex, rowCount, sourceColumnIndex, targetColumnIndex, columnCount, zeros, existingData);
                    return;
                }


                var processZeros = zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include || !Bridge.equals(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, f(0, 1, MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero));
                if (existingData === MathNet.Numerics.LinearAlgebra.ExistingData.Clear && !processZeros) {
                    target.ClearUnchecked(targetRowIndex, rowCount, targetColumnIndex, columnCount);
                }

                if (processZeros) {
                    for (var sr = sourceRowIndex, tr = targetRowIndex; sr < ((sourceRowIndex + rowCount) | 0); sr = (sr + 1) | 0, tr = (tr + 1) | 0) {
                        var index = this.RowPointers[System.Array.index(sr, this.RowPointers)];
                        var endIndex = this.RowPointers[System.Array.index(((sr + 1) | 0), this.RowPointers)];

                        for (; this.ColumnIndices[System.Array.index(index, this.ColumnIndices)] < sourceColumnIndex && index < endIndex; index = (index + 1) | 0) {
                        }
                        for (var sc = sourceColumnIndex, tc = targetColumnIndex; sc < ((sourceColumnIndex + columnCount) | 0); sc = (sc + 1) | 0, tc = (tc + 1) | 0) {
                            if (index < endIndex && sc === this.ColumnIndices[System.Array.index(index, this.ColumnIndices)]) {
                                target.At$1(tr, tc, f(tr, tc, this.Values[System.Array.index(index, this.Values)]));
                                index = Math.min(((index + 1) | 0), endIndex);
                            } else {
                                target.At$1(tr, tc, f(tr, tc, MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero));
                            }
                        }
                    }
                } else {
                    var columnOffset = (targetColumnIndex - sourceColumnIndex) | 0;
                    for (var sr1 = sourceRowIndex, tr1 = targetRowIndex; sr1 < ((sourceRowIndex + rowCount) | 0); sr1 = (sr1 + 1) | 0, tr1 = (tr1 + 1) | 0) {
                        var startIndex = this.RowPointers[System.Array.index(sr1, this.RowPointers)];
                        var endIndex1 = this.RowPointers[System.Array.index(((sr1 + 1) | 0), this.RowPointers)];
                        for (var k = startIndex; k < endIndex1; k = (k + 1) | 0) {
                            if ((this.ColumnIndices[System.Array.index(k, this.ColumnIndices)] >= sourceColumnIndex) && (this.ColumnIndices[System.Array.index(k, this.ColumnIndices)] < ((sourceColumnIndex + columnCount) | 0))) {
                                var tc1 = (this.ColumnIndices[System.Array.index(k, this.ColumnIndices)] + columnOffset) | 0;
                                target.At$1(tr1, tc1, f(tr1, tc1, this.Values[System.Array.index(k, this.Values)]));
                            }
                        }
                    }
                }
            },
            MapSubMatrixIndexedToUnchecked$1: function (TU, target, f, sourceRowIndex, targetRowIndex, rowCount, sourceColumnIndex, targetColumnIndex, columnCount, zeros, existingData) {
                var processZeros = zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include || !Bridge.equals(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, f(0, 1, MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero));
                if (existingData === MathNet.Numerics.LinearAlgebra.ExistingData.Clear && !processZeros) {
                    target.ClearUnchecked(targetRowIndex, rowCount, targetColumnIndex, columnCount);
                }

                var rowOffset = (targetRowIndex - sourceRowIndex) | 0;
                var columnOffset = (targetColumnIndex - sourceColumnIndex) | 0;
                var zero = MathNet.Numerics.LinearAlgebra.Matrix$1(TU).Zero;

                if (target.ValueCount === 0) {
                    var values = new (System.Collections.Generic.List$1(TU)).$ctor2(this.ValueCount);
                    var columnIndices = new (System.Collections.Generic.List$1(System.Int32)).$ctor2(this.ValueCount);
                    var rowPointers = target.RowPointers;

                    if (processZeros) {
                        for (var sr = sourceRowIndex; sr < ((sourceRowIndex + rowCount) | 0); sr = (sr + 1) | 0) {
                            var tr = (sr + rowOffset) | 0;
                            rowPointers[System.Array.index(tr, rowPointers)] = values.Count;

                            var index = this.RowPointers[System.Array.index(sr, this.RowPointers)];
                            var endIndex = this.RowPointers[System.Array.index(((sr + 1) | 0), this.RowPointers)];

                            for (; this.ColumnIndices[System.Array.index(index, this.ColumnIndices)] < sourceColumnIndex && index < endIndex; index = (index + 1) | 0) {
                            }
                            for (var sc = sourceColumnIndex, tc = targetColumnIndex; sc < ((sourceColumnIndex + columnCount) | 0); sc = (sc + 1) | 0, tc = (tc + 1) | 0) {
                                if (index < endIndex && sc === this.ColumnIndices[System.Array.index(index, this.ColumnIndices)]) {
                                    var item = f(tr, tc, this.Values[System.Array.index(index, this.Values)]);
                                    if (!Bridge.equalsT(zero, item, TU)) {
                                        values.add(item);
                                        columnIndices.add(tc);
                                    }
                                    index = Math.min(((index + 1) | 0), endIndex);
                                } else {
                                    var item1 = f(tr, tc, MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero);
                                    if (!Bridge.equalsT(zero, item1, TU)) {
                                        values.add(item1);
                                        columnIndices.add(tc);
                                    }
                                }
                            }
                        }
                    } else {
                        for (var sr1 = sourceRowIndex; sr1 < ((sourceRowIndex + rowCount) | 0); sr1 = (sr1 + 1) | 0) {
                            var tr1 = (sr1 + rowOffset) | 0;
                            rowPointers[System.Array.index(tr1, rowPointers)] = values.Count;

                            var startIndex = this.RowPointers[System.Array.index(sr1, this.RowPointers)];
                            var endIndex1 = this.RowPointers[System.Array.index(((sr1 + 1) | 0), this.RowPointers)];

                            for (var k = startIndex; k < endIndex1; k = (k + 1) | 0) {
                                if ((this.ColumnIndices[System.Array.index(k, this.ColumnIndices)] >= sourceColumnIndex) && (this.ColumnIndices[System.Array.index(k, this.ColumnIndices)] < ((sourceColumnIndex + columnCount) | 0))) {
                                    var tc1 = (this.ColumnIndices[System.Array.index(k, this.ColumnIndices)] + columnOffset) | 0;
                                    var item2 = f(tr1, tc1, this.Values[System.Array.index(k, this.Values)]);
                                    if (!Bridge.equalsT(zero, item2, TU)) {
                                        values.add(item2);
                                        columnIndices.add(tc1);
                                    }
                                }
                            }
                        }
                    }

                    for (var i = (targetRowIndex + rowCount) | 0; i < rowPointers.length; i = (i + 1) | 0) {
                        rowPointers[System.Array.index(i, rowPointers)] = values.Count;
                    }

                    target.RowPointers[System.Array.index(target.RowCount, target.RowPointers)] = values.Count;
                    target.Values = values.ToArray();
                    target.ColumnIndices = columnIndices.ToArray();
                    return;
                }


                if (processZeros) {
                    for (var sr2 = sourceRowIndex, tr2 = targetRowIndex; sr2 < ((sourceRowIndex + rowCount) | 0); sr2 = (sr2 + 1) | 0, tr2 = (tr2 + 1) | 0) {
                        var index1 = this.RowPointers[System.Array.index(sr2, this.RowPointers)];
                        var endIndex2 = this.RowPointers[System.Array.index(((sr2 + 1) | 0), this.RowPointers)];

                        for (; this.ColumnIndices[System.Array.index(index1, this.ColumnIndices)] < sourceColumnIndex && index1 < endIndex2; index1 = (index1 + 1) | 0) {
                        }
                        for (var sc1 = sourceColumnIndex, tc2 = targetColumnIndex; sc1 < ((sourceColumnIndex + columnCount) | 0); sc1 = (sc1 + 1) | 0, tc2 = (tc2 + 1) | 0) {
                            if (index1 < endIndex2 && sc1 === this.ColumnIndices[System.Array.index(index1, this.ColumnIndices)]) {
                                target.At$1(tr2, tc2, f(tr2, tc2, this.Values[System.Array.index(index1, this.Values)]));
                                index1 = Math.min(((index1 + 1) | 0), endIndex2);
                            } else {
                                target.At$1(tr2, tc2, f(tr2, tc2, MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero));
                            }
                        }
                    }
                } else {
                    for (var sr3 = sourceRowIndex, tr3 = targetRowIndex; sr3 < ((sourceRowIndex + rowCount) | 0); sr3 = (sr3 + 1) | 0, tr3 = (tr3 + 1) | 0) {
                        var startIndex1 = this.RowPointers[System.Array.index(sr3, this.RowPointers)];
                        var endIndex3 = this.RowPointers[System.Array.index(((sr3 + 1) | 0), this.RowPointers)];
                        for (var k1 = startIndex1; k1 < endIndex3; k1 = (k1 + 1) | 0) {
                            if ((this.ColumnIndices[System.Array.index(k1, this.ColumnIndices)] >= sourceColumnIndex) && (this.ColumnIndices[System.Array.index(k1, this.ColumnIndices)] < ((sourceColumnIndex + columnCount) | 0))) {
                                var tc3 = (this.ColumnIndices[System.Array.index(k1, this.ColumnIndices)] + columnOffset) | 0;
                                target.At$1(tr3, tc3, f(tr3, tc3, this.Values[System.Array.index(k1, this.Values)]));
                            }
                        }
                    }
                }
            },
            FoldByRowUnchecked: function (TU, target, f, finalize, state, zeros) {
                if (zeros === MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip) {
                    for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                        var startIndex = this.RowPointers[System.Array.index(row, this.RowPointers)];
                        var endIndex = this.RowPointers[System.Array.index(((row + 1) | 0), this.RowPointers)];
                        var s = state[System.Array.index(row, state)];
                        for (var j = startIndex; j < endIndex; j = (j + 1) | 0) {
                            s = f(s, this.Values[System.Array.index(j, this.Values)]);
                        }
                        target[System.Array.index(row, target)] = finalize(s, ((endIndex - startIndex) | 0));
                    }
                } else {
                    for (var row1 = 0; row1 < this.RowCount; row1 = (row1 + 1) | 0) {
                        var index = this.RowPointers[System.Array.index(row1, this.RowPointers)];
                        var endIndex1 = this.RowPointers[System.Array.index(((row1 + 1) | 0), this.RowPointers)];
                        var s1 = state[System.Array.index(row1, state)];
                        for (var j1 = 0; j1 < this.ColumnCount; j1 = (j1 + 1) | 0) {
                            if (index < endIndex1 && j1 === this.ColumnIndices[System.Array.index(index, this.ColumnIndices)]) {
                                s1 = f(s1, this.Values[System.Array.index(index, this.Values)]);
                                index = Math.min(((index + 1) | 0), endIndex1);
                            } else {
                                s1 = f(s1, MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero);
                            }
                        }
                        target[System.Array.index(row1, target)] = finalize(s1, this.ColumnCount);
                    }
                }
            },
            FoldByColumnUnchecked: function (TU, target, f, finalize, state, zeros) {
                if (!Bridge.referenceEquals(state, target)) {
                    System.Array.copy(state, 0, target, 0, state.length);
                }
                if (zeros === MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip) {
                    var count = System.Array.init(this.ColumnCount, 0, System.Int32);
                    for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                        var startIndex = this.RowPointers[System.Array.index(row, this.RowPointers)];
                        var endIndex = this.RowPointers[System.Array.index(((row + 1) | 0), this.RowPointers)];
                        for (var j = startIndex; j < endIndex; j = (j + 1) | 0) {
                            var column = this.ColumnIndices[System.Array.index(j, this.ColumnIndices)];
                            target[System.Array.index(column, target)] = f(target[System.Array.index(column, target)], this.Values[System.Array.index(j, this.Values)]);
                            count[System.Array.index(column, count)] = (count[System.Array.index(column, count)] + 1) | 0;
                        }
                    }
                    for (var j1 = 0; j1 < this.ColumnCount; j1 = (j1 + 1) | 0) {
                        target[System.Array.index(j1, target)] = finalize(target[System.Array.index(j1, target)], count[System.Array.index(j1, count)]);
                    }
                } else {
                    for (var row1 = 0; row1 < this.RowCount; row1 = (row1 + 1) | 0) {
                        var index = this.RowPointers[System.Array.index(row1, this.RowPointers)];
                        var endIndex1 = this.RowPointers[System.Array.index(((row1 + 1) | 0), this.RowPointers)];
                        for (var j2 = 0; j2 < this.ColumnCount; j2 = (j2 + 1) | 0) {
                            if (index < endIndex1 && j2 === this.ColumnIndices[System.Array.index(index, this.ColumnIndices)]) {
                                target[System.Array.index(j2, target)] = f(target[System.Array.index(j2, target)], this.Values[System.Array.index(index, this.Values)]);
                                index = Math.min(((index + 1) | 0), endIndex1);
                            } else {
                                target[System.Array.index(j2, target)] = f(target[System.Array.index(j2, target)], MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero);
                            }
                        }
                    }
                    for (var j3 = 0; j3 < this.ColumnCount; j3 = (j3 + 1) | 0) {
                        target[System.Array.index(j3, target)] = finalize(target[System.Array.index(j3, target)], this.RowCount);
                    }
                }
            },
            Fold2Unchecked: function (TOther, TState, other, f, state, zeros) {
                var denseOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(TOther));
                if (denseOther != null) {
                    var otherData = denseOther.Data;
                    var k = 0;
                    for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                        for (var col = 0; col < this.ColumnCount; col = (col + 1) | 0) {
                            var available = k < this.RowPointers[System.Array.index(((row + 1) | 0), this.RowPointers)] && this.ColumnIndices[System.Array.index(k, this.ColumnIndices)] === col;
                            state = f(state, available ? this.Values[System.Array.index(Bridge.identity(k, ((k = (k + 1) | 0))), this.Values)] : MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, otherData[System.Array.index(((Bridge.Int.mul(col, this.RowCount) + row) | 0), otherData)]);
                        }
                    }
                    return state;
                }

                var diagonalOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(TOther));
                if (diagonalOther != null) {
                    var otherData1 = diagonalOther.Data;
                    var otherZero = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(TOther).Matrix.Zero;

                    if (zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include) {
                        var k1 = 0;
                        for (var row1 = 0; row1 < this.RowCount; row1 = (row1 + 1) | 0) {
                            for (var col1 = 0; col1 < this.ColumnCount; col1 = (col1 + 1) | 0) {
                                var available1 = k1 < this.RowPointers[System.Array.index(((row1 + 1) | 0), this.RowPointers)] && this.ColumnIndices[System.Array.index(k1, this.ColumnIndices)] === col1;
                                state = f(state, available1 ? this.Values[System.Array.index(Bridge.identity(k1, ((k1 = (k1 + 1) | 0))), this.Values)] : MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, row1 === col1 ? otherData1[System.Array.index(row1, otherData1)] : otherZero);
                            }
                        }
                        return state;
                    }

                    for (var row2 = 0; row2 < this.RowCount; row2 = (row2 + 1) | 0) {
                        var diagonal = false;

                        var startIndex = this.RowPointers[System.Array.index(row2, this.RowPointers)];
                        var endIndex = this.RowPointers[System.Array.index(((row2 + 1) | 0), this.RowPointers)];
                        for (var j = startIndex; j < endIndex; j = (j + 1) | 0) {
                            if (this.ColumnIndices[System.Array.index(j, this.ColumnIndices)] === row2) {
                                diagonal = true;
                                state = f(state, this.Values[System.Array.index(j, this.Values)], otherData1[System.Array.index(row2, otherData1)]);
                            } else {
                                state = f(state, this.Values[System.Array.index(j, this.Values)], otherZero);
                            }
                        }

                        if (!diagonal && row2 < this.ColumnCount) {
                            state = f(state, MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, otherData1[System.Array.index(row2, otherData1)]);
                        }
                    }
                    return state;
                }

                var sparseOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(TOther));
                if (sparseOther != null) {
                    var otherRowPointers = sparseOther.RowPointers;
                    var otherColumnIndices = sparseOther.ColumnIndices;
                    var otherValues = sparseOther.Values;
                    var otherZero1 = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(TOther).Matrix.Zero;

                    if (zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include) {
                        var k2 = 0, otherk = 0;
                        for (var row3 = 0; row3 < this.RowCount; row3 = (row3 + 1) | 0) {
                            for (var col2 = 0; col2 < this.ColumnCount; col2 = (col2 + 1) | 0) {
                                var available2 = k2 < this.RowPointers[System.Array.index(((row3 + 1) | 0), this.RowPointers)] && this.ColumnIndices[System.Array.index(k2, this.ColumnIndices)] === col2;
                                var otherAvailable = otherk < otherRowPointers[System.Array.index(((row3 + 1) | 0), otherRowPointers)] && otherColumnIndices[System.Array.index(otherk, otherColumnIndices)] === col2;
                                state = f(state, available2 ? this.Values[System.Array.index(Bridge.identity(k2, ((k2 = (k2 + 1) | 0))), this.Values)] : MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, otherAvailable ? otherValues[System.Array.index(Bridge.identity(otherk, ((otherk = (otherk + 1) | 0))), otherValues)] : otherZero1);
                            }
                        }
                        return state;
                    }

                    for (var row4 = 0; row4 < this.RowCount; row4 = (row4 + 1) | 0) {
                        var startIndex1 = this.RowPointers[System.Array.index(row4, this.RowPointers)];
                        var endIndex1 = this.RowPointers[System.Array.index(((row4 + 1) | 0), this.RowPointers)];
                        var otherStartIndex = otherRowPointers[System.Array.index(row4, otherRowPointers)];
                        var otherEndIndex = otherRowPointers[System.Array.index(((row4 + 1) | 0), otherRowPointers)];

                        var j1 = startIndex1;
                        var j2 = otherStartIndex;

                        while (j1 < endIndex1 || j2 < otherEndIndex) {
                            if (j1 === endIndex1 || j2 < otherEndIndex && this.ColumnIndices[System.Array.index(j1, this.ColumnIndices)] > otherColumnIndices[System.Array.index(j2, otherColumnIndices)]) {
                                state = f(state, MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).Zero, otherValues[System.Array.index(Bridge.identity(j2, ((j2 = (j2 + 1) | 0))), otherValues)]);
                            } else if (j2 === otherEndIndex || this.ColumnIndices[System.Array.index(j1, this.ColumnIndices)] < otherColumnIndices[System.Array.index(j2, otherColumnIndices)]) {
                                state = f(state, this.Values[System.Array.index(Bridge.identity(j1, ((j1 = (j1 + 1) | 0))), this.Values)], otherZero1);
                            } else {
                                state = f(state, this.Values[System.Array.index(Bridge.identity(j1, ((j1 = (j1 + 1) | 0))), this.Values)], otherValues[System.Array.index(Bridge.identity(j2, ((j2 = (j2 + 1) | 0))), otherValues)]);
                            }
                        }
                    }
                    return state;
                }


                return MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage$1(T).prototype.Fold2Unchecked.call(this, TOther, TState, other, f, state, zeros);
            }
        }
    }; });

    Bridge.define("MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1", function (T) { return {
        inherits: [MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T)],
        statics: {
            methods: {
                OfVector: function (vector) {
                    var storage = new (MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(T))(vector.Length);
                    vector.CopyToUnchecked(storage, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                    return storage;
                },
                OfValue: function (length, value) {
                    var $t;
                    if (Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, value, T)) {
                        return new (MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(T))(length);
                    }

                    if (length < 1) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("length", System.String.format("Resources.ArgumentLessThanOne{0}", [Bridge.box(length, System.Int32)]));
                    }

                    var indices = System.Array.init(length, 0, System.Int32);
                    var values = System.Array.init(length, function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                    for (var i = 0; i < indices.length; i = (i + 1) | 0) {
                        indices[System.Array.index(i, indices)] = i;
                        values[System.Array.index(i, values)] = value;
                    }

                    return ($t = new (MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(T))(length), $t.Indices = indices, $t.Values = values, $t.ValueCount = length, $t);
                },
                OfInit: function (length, init) {
                    var $t;
                    if (length < 1) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("length", System.String.format("Resources.ArgumentLessThanOne{0}", [Bridge.box(length, System.Int32)]));
                    }

                    var indices = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                    var values = new (System.Collections.Generic.List$1(T)).ctor();
                    for (var i = 0; i < length; i = (i + 1) | 0) {
                        var item = init(i);
                        if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, item, T)) {
                            values.add(item);
                            indices.add(i);
                        }
                    }
                    return ($t = new (MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(T))(length), $t.Indices = indices.ToArray(), $t.Values = values.ToArray(), $t.ValueCount = values.Count, $t);
                },
                OfEnumerable: function (data) {
                    var $t, $t1;
                    if (data == null) {
                        throw new System.ArgumentNullException.$ctor1("data");
                    }

                    var indices = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                    var values = new (System.Collections.Generic.List$1(T)).ctor();
                    var index = 0;

                    $t = Bridge.getEnumerator(data, T);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, item, T)) {
                                values.add(item);
                                indices.add(index);
                            }
                            index = (index + 1) | 0;
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    return ($t1 = new (MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(T))(index), $t1.Indices = indices.ToArray(), $t1.Values = values.ToArray(), $t1.ValueCount = values.Count, $t1);
                },
                OfIndexedEnumerable: function (length, data) {
                    var $t, $t1;
                    if (data == null) {
                        throw new System.ArgumentNullException.$ctor1("data");
                    }

                    var indices = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                    var values = new (System.Collections.Generic.List$1(T)).ctor();
                    $t = Bridge.getEnumerator(data, System.Tuple$2(System.Int32,T));
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, item.Item2, T)) {
                                values.add(item.Item2);
                                indices.add(item.Item1);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    var indicesArray = indices.ToArray();
                    var valuesArray = values.ToArray();
                    MathNet.Numerics.Sorting.Sort$2(System.Int32, T, indicesArray, valuesArray);

                    return ($t1 = new (MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(T))(length), $t1.Indices = indicesArray, $t1.Values = valuesArray, $t1.ValueCount = values.Count, $t1);
                }
            }
        },
        fields: {
            /**
             * Array that contains the indices of the non-zero values.
             *
             * @instance
             * @public
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1
             * @type Array.<number>
             */
            Indices: null,
            /**
             * Array that contains the non-zero elements of the vector.
             *
             * @instance
             * @public
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1
             * @type Array.<T>
             */
            Values: null,
            /**
             * Gets the number of non-zero elements in the vector.
             *
             * @instance
             * @public
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1
             * @type number
             */
            ValueCount: 0
        },
        props: {
            /**
             * True if the vector storage format is dense.
             *
             * @instance
             * @public
             * @override
             * @readonly
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1
             * @function IsDense
             * @type boolean
             */
            IsDense: {
                get: function () {
                    return false;
                }
            }
        },
        alias: ["equalsT", "System$IEquatable$1$MathNet$Numerics$LinearAlgebra$Storage$VectorStorage$1$" + Bridge.getTypeAlias(T) + "$equalsT"],
        ctors: {
            ctor: function (length) {
                this.$initialize();
                MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).ctor.call(this, length);
                this.Indices = System.Array.init(0, 0, System.Int32);
                this.Values = System.Array.init(0, function (){
                    return Bridge.getDefaultValue(T);
                }, T);
                this.ValueCount = 0;
            }
        },
        methods: {
            /**
             * Retrieves the requested element without range checking.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1
             * @param   {number}    index
             * @return  {T}
             */
            At: function (index) {
                var itemIndex = System.Array.binarySearch(this.Indices, 0, this.ValueCount, index);
                return itemIndex >= 0 ? this.Values[System.Array.index(itemIndex, this.Values)] : MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero;
            },
            /**
             * Sets the element without range checking.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1
             * @param   {number}    index    
             * @param   {T}         value
             * @return  {void}
             */
            At$1: function (index, value) {
                var itemIndex = System.Array.binarySearch(this.Indices, 0, this.ValueCount, index);
                if (itemIndex >= 0) {
                    if (Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, value, T)) {
                        this.RemoveAtIndexUnchecked(itemIndex);
                    } else {
                        this.Values[System.Array.index(itemIndex, this.Values)] = value;
                    }
                } else {
                    if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, value, T)) {
                        this.InsertAtIndexUnchecked(~itemIndex, index, value);
                    }
                }
            },
            InsertAtIndexUnchecked: function (itemIndex, index, value) {
                if ((this.ValueCount === this.Values.length) && (this.ValueCount < this.Length)) {
                    var size = Math.min(((this.Values.length + this.GrowthSize()) | 0), this.Length);
                    System.Array.resize(Bridge.ref(this, "Values"), size, function () {
                        return Bridge.getDefaultValue(T);
                    }, T);
                    System.Array.resize(Bridge.ref(this, "Indices"), size, 0, System.Int32);
                }

                System.Array.copy(this.Values, itemIndex, this.Values, ((itemIndex + 1) | 0), ((this.ValueCount - itemIndex) | 0));
                System.Array.copy(this.Indices, itemIndex, this.Indices, ((itemIndex + 1) | 0), ((this.ValueCount - itemIndex) | 0));

                this.Values[System.Array.index(itemIndex, this.Values)] = value;
                this.Indices[System.Array.index(itemIndex, this.Indices)] = index;

                this.ValueCount = (this.ValueCount + 1) | 0;
            },
            RemoveAtIndexUnchecked: function (itemIndex) {
                System.Array.copy(this.Values, ((itemIndex + 1) | 0), this.Values, itemIndex, ((((this.ValueCount - itemIndex) | 0) - 1) | 0));
                System.Array.copy(this.Indices, ((itemIndex + 1) | 0), this.Indices, itemIndex, ((((this.ValueCount - itemIndex) | 0) - 1) | 0));

                this.ValueCount = (this.ValueCount - 1) | 0;

                if ((this.ValueCount > 1024) && (this.ValueCount < ((Bridge.Int.div(this.Indices.length, 2)) | 0))) {
                    System.Array.resize(Bridge.ref(this, "Values"), this.ValueCount, function () {
                        return Bridge.getDefaultValue(T);
                    }, T);
                    System.Array.resize(Bridge.ref(this, "Indices"), this.ValueCount, 0, System.Int32);
                }
            },
            /**
             * Calculates the amount with which to grow the storage array's if they need to be
             increased in size.
             *
             * @instance
             * @private
             * @this MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1
             * @return  {number}        The amount grown.
             */
            GrowthSize: function () {
                var delta;
                if (this.Values.length > 1024) {
                    delta = (Bridge.Int.div(this.Values.length, 4)) | 0;
                } else {
                    if (this.Values.length > 256) {
                        delta = 512;
                    } else {
                        delta = this.Values.length > 64 ? 128 : 32;
                    }
                }

                return delta;
            },
            equalsT: function (other) {
                if (other == null || this.Length !== other.Length) {
                    return false;
                }

                if (Bridge.referenceEquals(this, other)) {
                    return true;
                }

                var otherSparse = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(T));
                if (otherSparse == null) {
                    return MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).prototype.equalsT.call(this, other);
                }

                var i = 0, j = 0;
                while (i < this.ValueCount || j < otherSparse.ValueCount) {
                    if (j >= otherSparse.ValueCount || i < this.ValueCount && this.Indices[System.Array.index(i, this.Indices)] < otherSparse.Indices[System.Array.index(j, otherSparse.Indices)]) {
                        if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, this.Values[System.Array.index(Bridge.identity(i, ((i = (i + 1) | 0))), this.Values)], T)) {
                            return false;
                        }
                        continue;
                    }

                    if (i >= this.ValueCount || j < otherSparse.ValueCount && otherSparse.Indices[System.Array.index(j, otherSparse.Indices)] < this.Indices[System.Array.index(i, this.Indices)]) {
                        if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, otherSparse.Values[System.Array.index(Bridge.identity(j, ((j = (j + 1) | 0))), otherSparse.Values)], T)) {
                            return false;
                        }
                        continue;
                    }

                    if (!Bridge.equalsT(this.Values[System.Array.index(i, this.Values)], otherSparse.Values[System.Array.index(j, otherSparse.Values)], T)) {
                        return false;
                    }

                    i = (i + 1) | 0;
                    j = (j + 1) | 0;
                }

                return true;
            },
            /**
             * Returns a hash code for this instance.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1
             * @memberof MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1
             * @return  {number}        A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
             */
            getHashCode: function () {
                var values = this.Values;
                var hashNum = Math.min(this.ValueCount, 25);
                var hash = 17;
                for (var i = 0; i < hashNum; i = (i + 1) | 0) {
                    hash = (Bridge.Int.mul(hash, 31) + Bridge.getHashCode(values[i])) | 0;
                }
                return hash;
            },
            Clear: function () {
                this.ValueCount = 0;
            },
            Clear$1: function (index, count) {
                if (index === 0 && count === this.Length) {
                    this.Clear();
                    return;
                }

                var first = System.Array.binarySearch(this.Indices, 0, this.ValueCount, index);
                var last = System.Array.binarySearch(this.Indices, 0, this.ValueCount, ((((index + count) | 0) - 1) | 0));
                if (first < 0) {
                    first = ~first;
                }
                if (last < 0) {
                    last = (~last - 1) | 0;
                }
                var itemCount = (((last - first) | 0) + 1) | 0;

                if (itemCount > 0) {
                    System.Array.copy(this.Values, ((first + itemCount) | 0), this.Values, first, ((((this.ValueCount - first) | 0) - itemCount) | 0));
                    System.Array.copy(this.Indices, ((first + itemCount) | 0), this.Indices, first, ((((this.ValueCount - first) | 0) - itemCount) | 0));

                    this.ValueCount = (this.ValueCount - itemCount) | 0;
                }

                if ((this.ValueCount > 1024) && (this.ValueCount < ((Bridge.Int.div(this.Indices.length, 2)) | 0))) {
                    System.Array.resize(Bridge.ref(this, "Values"), this.ValueCount, function () {
                        return Bridge.getDefaultValue(T);
                    }, T);
                    System.Array.resize(Bridge.ref(this, "Indices"), this.ValueCount, 0, System.Int32);
                }
            },
            CopyToRowUnchecked: function (target, rowIndex, existingData) {
                if (existingData === MathNet.Numerics.LinearAlgebra.ExistingData.Clear) {
                    target.ClearUnchecked(rowIndex, 1, 0, this.Length);
                }

                if (this.ValueCount === 0) {
                    return;
                }

                for (var i = 0; i < this.ValueCount; i = (i + 1) | 0) {
                    target.At$1(rowIndex, this.Indices[System.Array.index(i, this.Indices)], this.Values[System.Array.index(i, this.Values)]);
                }
            },
            CopyToColumnUnchecked: function (target, columnIndex, existingData) {
                if (existingData === MathNet.Numerics.LinearAlgebra.ExistingData.Clear) {
                    target.ClearUnchecked(0, this.Length, columnIndex, 1);
                }

                if (this.ValueCount === 0) {
                    return;
                }

                for (var i = 0; i < this.ValueCount; i = (i + 1) | 0) {
                    target.At$1(this.Indices[System.Array.index(i, this.Indices)], columnIndex, this.Values[System.Array.index(i, this.Values)]);
                }
            },
            CopySubVectorToUnchecked: function (target, sourceIndex, targetIndex, count, existingData) {
                var sparseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(T));
                if (sparseTarget != null) {
                    this.CopySubVectorToUnchecked$1(sparseTarget, sourceIndex, targetIndex, count, existingData);
                    return;
                }


                var offset = (targetIndex - sourceIndex) | 0;

                var sourceFirst = System.Array.binarySearch(this.Indices, 0, this.ValueCount, sourceIndex);
                var sourceLast = System.Array.binarySearch(this.Indices, 0, this.ValueCount, ((((sourceIndex + count) | 0) - 1) | 0));
                if (sourceFirst < 0) {
                    sourceFirst = ~sourceFirst;
                }
                if (sourceLast < 0) {
                    sourceLast = (~sourceLast - 1) | 0;
                }

                if (existingData === MathNet.Numerics.LinearAlgebra.ExistingData.Clear) {
                    target.Clear$1(targetIndex, count);
                }

                for (var i = sourceFirst; i <= sourceLast; i = (i + 1) | 0) {
                    target.At$1(((this.Indices[System.Array.index(i, this.Indices)] + offset) | 0), this.Values[System.Array.index(i, this.Values)]);
                }
            },
            CopySubVectorToUnchecked$1: function (target, sourceIndex, targetIndex, count, existingData) {
                var offset = (targetIndex - sourceIndex) | 0;

                var sourceFirst = System.Array.binarySearch(this.Indices, 0, this.ValueCount, sourceIndex);
                var sourceLast = System.Array.binarySearch(this.Indices, 0, this.ValueCount, ((((sourceIndex + count) | 0) - 1) | 0));
                if (sourceFirst < 0) {
                    sourceFirst = ~sourceFirst;
                }
                if (sourceLast < 0) {
                    sourceLast = (~sourceLast - 1) | 0;
                }
                var sourceCount = (((sourceLast - sourceFirst) | 0) + 1) | 0;

                if (Bridge.referenceEquals(this, target)) {
                    var values = System.Array.init(sourceCount, function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                    var indices = System.Array.init(sourceCount, 0, System.Int32);

                    System.Array.copy(this.Values, sourceFirst, values, 0, sourceCount);
                    for (var i = 0; i < indices.length; i = (i + 1) | 0) {
                        indices[System.Array.index(i, indices)] = this.Indices[System.Array.index(((i + sourceFirst) | 0), this.Indices)];
                    }

                    if (existingData === MathNet.Numerics.LinearAlgebra.ExistingData.Clear) {
                        this.Clear$1(targetIndex, count);
                    }

                    for (var i1 = sourceFirst; i1 <= sourceLast; i1 = (i1 + 1) | 0) {
                        this.At$1(((indices[System.Array.index(i1, indices)] + offset) | 0), values[System.Array.index(i1, values)]);
                    }

                    return;
                }

                if (target.ValueCount === 0) {
                    var values1 = System.Array.init(sourceCount, function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                    var indices1 = System.Array.init(sourceCount, 0, System.Int32);

                    System.Array.copy(this.Values, sourceFirst, values1, 0, sourceCount);
                    for (var i2 = 0; i2 < indices1.length; i2 = (i2 + 1) | 0) {
                        indices1[System.Array.index(i2, indices1)] = (this.Indices[System.Array.index(((i2 + sourceFirst) | 0), this.Indices)] + offset) | 0;
                    }

                    target.ValueCount = sourceCount;
                    target.Values = values1;
                    target.Indices = indices1;

                    return;
                }

                if (existingData === MathNet.Numerics.LinearAlgebra.ExistingData.Clear) {
                    target.Clear$1(targetIndex, count);
                }

                for (var i3 = sourceFirst; i3 <= sourceLast; i3 = (i3 + 1) | 0) {
                    target.At$1(((this.Indices[System.Array.index(i3, this.Indices)] + offset) | 0), this.Values[System.Array.index(i3, this.Values)]);
                }
            },
            ToArray: function () {
                var ret = System.Array.init(this.Length, function (){
                    return Bridge.getDefaultValue(T);
                }, T);
                for (var i = 0; i < this.ValueCount; i = (i + 1) | 0) {
                    ret[System.Array.index(this.Indices[System.Array.index(i, this.Indices)], ret)] = this.Values[System.Array.index(i, this.Values)];
                }
                return ret;
            },
            Enumerate: function () {
                return new (Bridge.GeneratorEnumerable$1(T))(Bridge.fn.bind(this, function ()  {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        k,
                        i,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(T))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        k = 0;
                                            i = 0;
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ( i < this.Length ) {
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 5;
                                        continue;
                                    }
                                    case 2: {
                                        $enumerator.current = k < this.ValueCount && this.Indices[System.Array.index(k, this.Indices)] === i ? this.Values[System.Array.index(Bridge.identity(k, ((k = (k + 1) | 0))), this.Values)] : MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero;
                                            $step = 3;
                                            return true;
                                    }
                                    case 3: {
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        i = (i + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 5: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }));
            },
            EnumerateIndexed: function () {
                return new (Bridge.GeneratorEnumerable$1(System.Tuple$2(System.Int32,T)))(Bridge.fn.bind(this, function ()  {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        k,
                        i,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Tuple$2(System.Int32,T)))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        k = 0;
                                            i = 0;
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ( i < this.Length ) {
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 5;
                                        continue;
                                    }
                                    case 2: {
                                        $enumerator.current = k < this.ValueCount && this.Indices[System.Array.index(k, this.Indices)] === i ? { Item1: i, Item2: this.Values[System.Array.index(Bridge.identity(k, ((k = (k + 1) | 0))), this.Values)] } : { Item1: i, Item2: MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero };
                                            $step = 3;
                                            return true;
                                    }
                                    case 3: {
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        i = (i + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 5: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }));
            },
            EnumerateNonZero: function () {
                return System.Linq.Enumerable.from(this.Values, T).take(this.ValueCount).where(function (x) {
                    return !Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, x, T);
                });
            },
            EnumerateNonZeroIndexed: function () {
                return new (Bridge.GeneratorEnumerable$1(System.Tuple$2(System.Int32,T)))(Bridge.fn.bind(this, function ()  {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        i,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Tuple$2(System.Int32,T)))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        i = 0;
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ( i < this.ValueCount ) {
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 7;
                                        continue;
                                    }
                                    case 2: {
                                        if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, this.Values[System.Array.index(i, this.Values)], T)) {
                                                $step = 3;
                                                continue;
                                            } 
                                            $step = 5;
                                            continue;
                                    }
                                    case 3: {
                                        $enumerator.current = { Item1: this.Indices[System.Array.index(i, this.Indices)], Item2: this.Values[System.Array.index(i, this.Values)] };
                                            $step = 4;
                                            return true;
                                    }
                                    case 4: {
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        i = (i + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 7: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }));
            },
            Find: function (predicate, zeros) {
                for (var i = 0; i < this.ValueCount; i = (i + 1) | 0) {
                    if (predicate(this.Values[System.Array.index(i, this.Values)])) {
                        return { Item1: this.Indices[System.Array.index(i, this.Indices)], Item2: this.Values[System.Array.index(i, this.Values)] };
                    }
                }
                if (zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include && this.ValueCount < this.Length && predicate(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero)) {
                    for (var i1 = 0; i1 < this.Length; i1 = (i1 + 1) | 0) {
                        if (i1 >= this.ValueCount || this.Indices[System.Array.index(i1, this.Indices)] !== i1) {
                            return { Item1: i1, Item2: MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero };
                        }
                    }
                }
                return null;
            },
            Find2Unchecked: function (TOther, other, predicate, zeros) {
                var denseOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(TOther));
                if (denseOther != null) {
                    var otherData = denseOther.Data;
                    var k = 0;
                    for (var i = 0; i < otherData.length; i = (i + 1) | 0) {
                        if (k < this.ValueCount && this.Indices[System.Array.index(k, this.Indices)] === i) {
                            if (predicate(this.Values[System.Array.index(k, this.Values)], otherData[System.Array.index(i, otherData)])) {
                                return { Item1: i, Item2: this.Values[System.Array.index(k, this.Values)], Item3: otherData[System.Array.index(i, otherData)] };
                            }
                            k = (k + 1) | 0;
                        } else {
                            if (predicate(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, otherData[System.Array.index(i, otherData)])) {
                                return { Item1: i, Item2: MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, Item3: otherData[System.Array.index(i, otherData)] };
                            }
                        }
                    }
                    return null;
                }

                var sparseOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(TOther));
                if (sparseOther != null) {
                    var otherIndices = sparseOther.Indices;
                    var otherValues = sparseOther.Values;
                    var otherValueCount = sparseOther.ValueCount;
                    var otherZero = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(TOther).Matrix.Zero;

                    var k1 = 0, otherk = 0;
                    if (zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include && this.ValueCount < this.Length && sparseOther.ValueCount < this.Length && predicate(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, otherZero)) {
                        for (var i1 = 0; i1 < this.Length; i1 = (i1 + 1) | 0) {
                            var left = k1 < this.ValueCount && this.Indices[System.Array.index(k1, this.Indices)] === i1 ? this.Values[System.Array.index(Bridge.identity(k1, ((k1 = (k1 + 1) | 0))), this.Values)] : MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero;
                            var right = otherk < otherValueCount && otherIndices[System.Array.index(otherk, otherIndices)] === i1 ? otherValues[System.Array.index(Bridge.identity(otherk, ((otherk = (otherk + 1) | 0))), otherValues)] : otherZero;
                            if (predicate(left, right)) {
                                return { Item1: i1, Item2: left, Item3: right };
                            }
                        }
                        return null;
                    }

                    k1 = 0;
                    otherk = 0;
                    while (k1 < this.ValueCount || otherk < otherValueCount) {
                        if (k1 === this.ValueCount || otherk < otherValueCount && this.Indices[System.Array.index(k1, this.Indices)] > otherIndices[System.Array.index(otherk, otherIndices)]) {
                            if (predicate(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, otherValues[System.Array.index(Bridge.identity(otherk, ((otherk = (otherk + 1) | 0))), otherValues)])) {
                                return { Item1: otherIndices[System.Array.index(((otherk - 1) | 0), otherIndices)], Item2: MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, Item3: otherValues[System.Array.index(((otherk - 1) | 0), otherValues)] };
                            }
                        } else if (otherk === otherValueCount || this.Indices[System.Array.index(k1, this.Indices)] < otherIndices[System.Array.index(otherk, otherIndices)]) {
                            if (predicate(this.Values[System.Array.index(Bridge.identity(k1, ((k1 = (k1 + 1) | 0))), this.Values)], otherZero)) {
                                return { Item1: this.Indices[System.Array.index(((k1 - 1) | 0), this.Indices)], Item2: this.Values[System.Array.index(((k1 - 1) | 0), this.Values)], Item3: otherZero };
                            }
                        } else {
                            if (predicate(this.Values[System.Array.index(Bridge.identity(k1, ((k1 = (k1 + 1) | 0))), this.Values)], otherValues[System.Array.index(Bridge.identity(otherk, ((otherk = (otherk + 1) | 0))), otherValues)])) {
                                return { Item1: this.Indices[System.Array.index(((k1 - 1) | 0), this.Indices)], Item2: this.Values[System.Array.index(((k1 - 1) | 0), this.Values)], Item3: otherValues[System.Array.index(((otherk - 1) | 0), otherValues)] };
                            }
                        }
                    }
                    return null;
                }


                return MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).prototype.Find2Unchecked.call(this, TOther, other, predicate, zeros);
            },
            MapInplace: function (f, zeros) {
                var indices = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                var values = new (System.Collections.Generic.List$1(T)).$ctor2(this.ValueCount);
                if (zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include || !Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, f(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero), T)) {
                    var k = 0;
                    for (var i = 0; i < this.Length; i = (i + 1) | 0) {
                        var item = k < this.ValueCount && (this.Indices[System.Array.index(k, this.Indices)]) === i ? f(this.Values[System.Array.index(Bridge.identity(k, ((k = (k + 1) | 0))), this.Values)]) : f(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero);
                        if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, item, T)) {
                            values.add(item);
                            indices.add(i);
                        }
                    }
                } else {
                    for (var i1 = 0; i1 < this.ValueCount; i1 = (i1 + 1) | 0) {
                        var item1 = f(this.Values[System.Array.index(i1, this.Values)]);
                        if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, item1, T)) {
                            values.add(item1);
                            indices.add(this.Indices[System.Array.index(i1, this.Indices)]);
                        }
                    }
                }
                this.Indices = indices.ToArray();
                this.Values = values.ToArray();
                this.ValueCount = values.Count;
            },
            MapIndexedInplace: function (f, zeros) {
                var indices = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                var values = new (System.Collections.Generic.List$1(T)).$ctor2(this.ValueCount);
                if (zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include) {
                    var k = 0;
                    for (var i = 0; i < this.Length; i = (i + 1) | 0) {
                        var item = k < this.ValueCount && (this.Indices[System.Array.index(k, this.Indices)]) === i ? f(i, this.Values[System.Array.index(Bridge.identity(k, ((k = (k + 1) | 0))), this.Values)]) : f(i, MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero);
                        if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, item, T)) {
                            values.add(item);
                            indices.add(i);
                        }
                    }
                } else {
                    for (var i1 = 0; i1 < this.ValueCount; i1 = (i1 + 1) | 0) {
                        var item1 = f(this.Indices[System.Array.index(i1, this.Indices)], this.Values[System.Array.index(i1, this.Values)]);
                        if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, item1, T)) {
                            values.add(item1);
                            indices.add(this.Indices[System.Array.index(i1, this.Indices)]);
                        }
                    }
                }
                this.Indices = indices.ToArray();
                this.Values = values.ToArray();
                this.ValueCount = values.Count;
            },
            MapToUnchecked: function (TU, target, f, zeros, existingData) {
                var sparseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(TU));
                if (sparseTarget != null) {
                    var indices = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                    var values = new (System.Collections.Generic.List$1(TU)).ctor();
                    if (zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include || !Bridge.equals(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, f(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero))) {
                        var k = 0;
                        for (var i = 0; i < this.Length; i = (i + 1) | 0) {
                            var item = k < this.ValueCount && (this.Indices[System.Array.index(k, this.Indices)]) === i ? f(this.Values[System.Array.index(Bridge.identity(k, ((k = (k + 1) | 0))), this.Values)]) : f(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero);
                            if (!Bridge.equals(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, item)) {
                                values.add(item);
                                indices.add(i);
                            }
                        }
                    } else {
                        for (var i1 = 0; i1 < this.ValueCount; i1 = (i1 + 1) | 0) {
                            var item1 = f(this.Values[System.Array.index(i1, this.Values)]);
                            if (!Bridge.equals(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, item1)) {
                                values.add(item1);
                                indices.add(this.Indices[System.Array.index(i1, this.Indices)]);
                            }
                        }
                    }
                    sparseTarget.Indices = indices.ToArray();
                    sparseTarget.Values = values.ToArray();
                    sparseTarget.ValueCount = values.Count;
                    return;
                }

                var denseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(TU));
                if (denseTarget != null) {
                    if (existingData === MathNet.Numerics.LinearAlgebra.ExistingData.Clear) {
                        denseTarget.Clear();
                    }

                    if (zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include || !Bridge.equals(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, f(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero))) {
                        var k1 = 0;
                        for (var i2 = 0; i2 < this.Length; i2 = (i2 + 1) | 0) {
                            denseTarget.Data[System.Array.index(i2, denseTarget.Data)] = k1 < this.ValueCount && (this.Indices[System.Array.index(k1, this.Indices)]) === i2 ? f(this.Values[System.Array.index(Bridge.identity(k1, ((k1 = (k1 + 1) | 0))), this.Values)]) : f(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero);
                        }
                    } else {

                        for (var i3 = 0; i3 < this.ValueCount; i3 = (i3 + 1) | 0) {
                            denseTarget.Data[System.Array.index(this.Indices[System.Array.index(i3, this.Indices)], denseTarget.Data)] = f(this.Values[System.Array.index(i3, this.Values)]);
                        }

                    }
                    return;
                }


                MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).prototype.MapToUnchecked.call(this, TU, target, f, zeros, existingData);
            },
            MapIndexedToUnchecked: function (TU, target, f, zeros, existingData) {
                var sparseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(TU));
                if (sparseTarget != null) {
                    var indices = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                    var values = new (System.Collections.Generic.List$1(TU)).ctor();
                    if (zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include || !Bridge.equals(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, f(0, MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero))) {
                        var k = 0;
                        for (var i = 0; i < this.Length; i = (i + 1) | 0) {
                            var item = k < this.ValueCount && (this.Indices[System.Array.index(k, this.Indices)]) === i ? f(i, this.Values[System.Array.index(Bridge.identity(k, ((k = (k + 1) | 0))), this.Values)]) : f(i, MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero);
                            if (!Bridge.equals(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, item)) {
                                values.add(item);
                                indices.add(i);
                            }
                        }
                    } else {
                        for (var i1 = 0; i1 < this.ValueCount; i1 = (i1 + 1) | 0) {
                            var item1 = f(this.Indices[System.Array.index(i1, this.Indices)], this.Values[System.Array.index(i1, this.Values)]);
                            if (!Bridge.equals(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, item1)) {
                                values.add(item1);
                                indices.add(this.Indices[System.Array.index(i1, this.Indices)]);
                            }
                        }
                    }
                    sparseTarget.Indices = indices.ToArray();
                    sparseTarget.Values = values.ToArray();
                    sparseTarget.ValueCount = values.Count;
                    return;
                }

                var denseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(TU));
                if (denseTarget != null) {
                    if (existingData === MathNet.Numerics.LinearAlgebra.ExistingData.Clear) {
                        denseTarget.Clear();
                    }

                    if (zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include || !Bridge.equals(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, f(0, MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero))) {
                        var k1 = 0;
                        for (var i2 = 0; i2 < this.Length; i2 = (i2 + 1) | 0) {
                            denseTarget.Data[System.Array.index(i2, denseTarget.Data)] = k1 < this.ValueCount && (this.Indices[System.Array.index(k1, this.Indices)]) === i2 ? f(i2, this.Values[System.Array.index(Bridge.identity(k1, ((k1 = (k1 + 1) | 0))), this.Values)]) : f(i2, MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero);
                        }
                    } else {

                        for (var i3 = 0; i3 < this.ValueCount; i3 = (i3 + 1) | 0) {
                            denseTarget.Data[System.Array.index(this.Indices[System.Array.index(i3, this.Indices)], denseTarget.Data)] = f(this.Indices[System.Array.index(i3, this.Indices)], this.Values[System.Array.index(i3, this.Values)]);
                        }

                    }
                    return;
                }


                MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).prototype.MapIndexedToUnchecked.call(this, TU, target, f, zeros, existingData);
            },
            Map2ToUnchecked: function (target, other, f, zeros, existingData) {
                var processZeros = zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include || !Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, f(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero), T);

                var denseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(T));
                var denseOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(T));

                if (denseTarget == null && (denseOther != null || processZeros)) {
                    var intermediate = new (MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(T)).ctor(target.Length);
                    this.Map2ToUnchecked(intermediate, other, f, zeros, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                    intermediate.CopyTo(target, existingData);
                    return;
                }

                if (denseOther != null) {
                    var targetData = denseTarget.Data;
                    var otherData = denseOther.Data;

                    var k = 0;
                    for (var i = 0; i < otherData.length; i = (i + 1) | 0) {
                        if (k < this.ValueCount && this.Indices[System.Array.index(k, this.Indices)] === i) {
                            targetData[System.Array.index(i, targetData)] = f(this.Values[System.Array.index(k, this.Values)], otherData[System.Array.index(i, otherData)]);
                            k = (k + 1) | 0;
                        } else {
                            targetData[System.Array.index(i, targetData)] = f(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, otherData[System.Array.index(i, otherData)]);
                        }
                    }

                    return;
                }

                var sparseOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(T));
                if (sparseOther != null && denseTarget != null) {
                    var targetData1 = denseTarget.Data;
                    var otherIndices = sparseOther.Indices;
                    var otherValues = sparseOther.Values;
                    var otherValueCount = sparseOther.ValueCount;

                    if (processZeros) {
                        var p = 0, q = 0;
                        for (var i1 = 0; i1 < targetData1.length; i1 = (i1 + 1) | 0) {
                            var left = p < this.ValueCount && this.Indices[System.Array.index(p, this.Indices)] === i1 ? this.Values[System.Array.index(Bridge.identity(p, ((p = (p + 1) | 0))), this.Values)] : MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero;
                            var right = q < otherValueCount && otherIndices[System.Array.index(q, otherIndices)] === i1 ? otherValues[System.Array.index(Bridge.identity(q, ((q = (q + 1) | 0))), otherValues)] : MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero;
                            targetData1[System.Array.index(i1, targetData1)] = f(left, right);
                        }
                    } else {
                        if (existingData === MathNet.Numerics.LinearAlgebra.ExistingData.Clear) {
                            denseTarget.Clear();
                        }

                        var p1 = 0, q1 = 0;
                        while (p1 < this.ValueCount || q1 < otherValueCount) {
                            if (q1 >= otherValueCount || p1 < this.ValueCount && this.Indices[System.Array.index(p1, this.Indices)] < otherIndices[System.Array.index(q1, otherIndices)]) {
                                targetData1[System.Array.index(this.Indices[System.Array.index(p1, this.Indices)], targetData1)] = f(this.Values[System.Array.index(p1, this.Values)], MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero);
                                p1 = (p1 + 1) | 0;
                            } else if (p1 >= this.ValueCount || q1 < otherValueCount && this.Indices[System.Array.index(p1, this.Indices)] > otherIndices[System.Array.index(q1, otherIndices)]) {
                                targetData1[System.Array.index(otherIndices[System.Array.index(q1, otherIndices)], targetData1)] = f(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, otherValues[System.Array.index(q1, otherValues)]);
                                q1 = (q1 + 1) | 0;
                            } else {
                                System.Diagnostics.Debug.Assert(this.Indices[System.Array.index(p1, this.Indices)] === otherIndices[System.Array.index(q1, otherIndices)]);
                                targetData1[System.Array.index(this.Indices[System.Array.index(p1, this.Indices)], targetData1)] = f(this.Values[System.Array.index(p1, this.Values)], otherValues[System.Array.index(q1, otherValues)]);
                                p1 = (p1 + 1) | 0;
                                q1 = (q1 + 1) | 0;
                            }
                        }
                    }

                    return;
                }

                var sparseTarget = Bridge.as(target, MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(T));
                if (sparseOther != null && sparseTarget != null) {
                    var indices = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                    var values = new (System.Collections.Generic.List$1(T)).ctor();
                    var otherIndices1 = sparseOther.Indices;
                    var otherValues1 = sparseOther.Values;
                    var otherValueCount1 = sparseOther.ValueCount;

                    var p2 = 0, q2 = 0;
                    while (p2 < this.ValueCount || q2 < otherValueCount1) {
                        if (q2 >= otherValueCount1 || p2 < this.ValueCount && this.Indices[System.Array.index(p2, this.Indices)] < otherIndices1[System.Array.index(q2, otherIndices1)]) {
                            var value = f(this.Values[System.Array.index(p2, this.Values)], MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero);
                            if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, value, T)) {
                                indices.add(this.Indices[System.Array.index(p2, this.Indices)]);
                                values.add(value);
                            }

                            p2 = (p2 + 1) | 0;
                        } else if (p2 >= this.ValueCount || q2 < otherValueCount1 && this.Indices[System.Array.index(p2, this.Indices)] > otherIndices1[System.Array.index(q2, otherIndices1)]) {
                            var value1 = f(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, otherValues1[System.Array.index(q2, otherValues1)]);
                            if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, value1, T)) {
                                indices.add(otherIndices1[System.Array.index(q2, otherIndices1)]);
                                values.add(value1);
                            }

                            q2 = (q2 + 1) | 0;
                        } else {
                            var value2 = f(this.Values[System.Array.index(p2, this.Values)], otherValues1[System.Array.index(q2, otherValues1)]);
                            if (!Bridge.equalsT(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, value2, T)) {
                                indices.add(this.Indices[System.Array.index(p2, this.Indices)]);
                                values.add(value2);
                            }

                            p2 = (p2 + 1) | 0;
                            q2 = (q2 + 1) | 0;
                        }
                    }

                    sparseTarget.Indices = indices.ToArray();
                    sparseTarget.Values = values.ToArray();
                    sparseTarget.ValueCount = values.Count;
                    return;
                }


                MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).prototype.Map2ToUnchecked.call(this, target, other, f, zeros, existingData);
            },
            Fold2Unchecked: function (TOther, TState, other, f, state, zeros) {
                var sparseOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(TOther));
                if (sparseOther != null) {
                    var otherIndices = sparseOther.Indices;
                    var otherValues = sparseOther.Values;
                    var otherValueCount = sparseOther.ValueCount;
                    var otherZero = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(TOther).Vector.Zero;

                    if (zeros === MathNet.Numerics.LinearAlgebra.Zeros.Include) {
                        var p = 0, q = 0;
                        for (var i = 0; i < this.Length; i = (i + 1) | 0) {
                            var left = p < this.ValueCount && this.Indices[System.Array.index(p, this.Indices)] === i ? this.Values[System.Array.index(Bridge.identity(p, ((p = (p + 1) | 0))), this.Values)] : MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero;
                            var right = q < otherValueCount && otherIndices[System.Array.index(q, otherIndices)] === i ? otherValues[System.Array.index(Bridge.identity(q, ((q = (q + 1) | 0))), otherValues)] : otherZero;
                            state = f(state, left, right);
                        }
                    } else {
                        var p1 = 0, q1 = 0;
                        while (p1 < this.ValueCount || q1 < otherValueCount) {
                            if (q1 >= otherValueCount || p1 < this.ValueCount && this.Indices[System.Array.index(p1, this.Indices)] < otherIndices[System.Array.index(q1, otherIndices)]) {
                                state = f(state, this.Values[System.Array.index(p1, this.Values)], otherZero);
                                p1 = (p1 + 1) | 0;
                            } else if (p1 >= this.ValueCount || q1 < otherValueCount && this.Indices[System.Array.index(p1, this.Indices)] > otherIndices[System.Array.index(q1, otherIndices)]) {
                                state = f(state, MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, otherValues[System.Array.index(q1, otherValues)]);
                                q1 = (q1 + 1) | 0;
                            } else {
                                System.Diagnostics.Debug.Assert(this.Indices[System.Array.index(p1, this.Indices)] === otherIndices[System.Array.index(q1, otherIndices)]);
                                state = f(state, this.Values[System.Array.index(p1, this.Values)], otherValues[System.Array.index(q1, otherValues)]);
                                p1 = (p1 + 1) | 0;
                                q1 = (q1 + 1) | 0;
                            }
                        }
                    }

                    return state;
                }

                var denseOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(TOther));
                if (denseOther != null) {
                    var otherData = denseOther.Data;

                    var k = 0;
                    for (var i1 = 0; i1 < otherData.length; i1 = (i1 + 1) | 0) {
                        if (k < this.ValueCount && this.Indices[System.Array.index(k, this.Indices)] === i1) {
                            state = f(state, this.Values[System.Array.index(k, this.Values)], otherData[System.Array.index(i1, otherData)]);
                            k = (k + 1) | 0;
                        } else {
                            state = f(state, MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).Zero, otherData[System.Array.index(i1, otherData)]);
                        }
                    }

                    return state;
                }

                return MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(T).prototype.Fold2Unchecked.call(this, TOther, TState, other, f, state, zeros);
            }
        }
    }; });

    /**
     * A Matrix class with dense storage. The underlying storage is a one dimensional array in column-major order (column by column).
     *
     * @public
     * @class MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
     * @augments MathNet.Numerics.LinearAlgebra.Double.Matrix
     */
    Bridge.define("MathNet.Numerics.LinearAlgebra.Double.DenseMatrix", {
        inherits: [MathNet.Numerics.LinearAlgebra.Double.Matrix],
        statics: {
            methods: {
                /**
                 * Create a new dense matrix as a copy of the given other matrix.
                 This new matrix will be independent from the other matrix.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}              matrix
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}
                 */
                OfMatrix: function (matrix) {
                    return new MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(System.Double).OfMatrix(matrix.Storage));
                },
                /**
                 * Create a new dense matrix as a copy of the given two-dimensional array.
                 This new matrix will be independent from the provided array.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @param   {Array.<number>}                                       array
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}
                 */
                OfArray: function (array) {
                    return new MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(System.Double).OfArray(array));
                },
                /**
                 * Create a new dense matrix as a copy of the given indexed enumerable.
                 Keys must be provided at most once, zero is assumed if a key is omitted.
                 This new matrix will be independent from the enumerable.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @param   {number}                                               rows          
                 * @param   {number}                                               columns       
                 * @param   {System.Collections.Generic.IEnumerable$1}             enumerable
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}
                 */
                OfIndexed: function (rows, columns, enumerable) {
                    return new MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(System.Double).OfIndexedEnumerable(rows, columns, enumerable));
                },
                /**
                 * Create a new dense matrix as a copy of the given enumerable.
                 The enumerable is assumed to be in column-major order (column by column).
                 This new matrix will be independent from the enumerable.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @param   {number}                                               rows           
                 * @param   {number}                                               columns        
                 * @param   {System.Collections.Generic.IEnumerable$1}             columnMajor
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}
                 */
                OfColumnMajor: function (rows, columns, columnMajor) {
                    return new MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(System.Double).OfColumnMajorEnumerable(rows, columns, columnMajor));
                },
                /**
                 * Create a new dense matrix as a copy of the given enumerable of enumerable columns.
                 Each enumerable in the master enumerable specifies a column.
                 This new matrix will be independent from the enumerables.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @param   {System.Collections.Generic.IEnumerable$1}             data
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}
                 */
                OfColumns: function (data) {
                    return MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.OfColumnArrays$1(System.Linq.Enumerable.from(data, System.Collections.Generic.IEnumerable$1(System.Double)).select(function (v) {
                            var $t;
                            return ($t = System.Double, System.Linq.Enumerable.from(v, $t).ToArray($t));
                        }).ToArray(System.Array.type(System.Double)));
                },
                /**
                 * Create a new dense matrix as a copy of the given enumerable of enumerable columns.
                 Each enumerable in the master enumerable specifies a column.
                 This new matrix will be independent from the enumerables.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @param   {number}                                               rows       
                 * @param   {number}                                               columns    
                 * @param   {System.Collections.Generic.IEnumerable$1}             data
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}
                 */
                OfColumns$1: function (rows, columns, data) {
                    return new MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(System.Double).OfColumnEnumerables(rows, columns, data));
                },
                /**
                 * Create a new dense matrix as a copy of the given column arrays.
                 This new matrix will be independent from the arrays.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @param   {Array.<Array.<number>>}                               columns
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}
                 */
                OfColumnArrays$1: function (columns) {
                    if (columns === void 0) { columns = []; }
                    return new MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(System.Double).OfColumnArrays(columns));
                },
                /**
                 * Create a new dense matrix as a copy of the given column arrays.
                 This new matrix will be independent from the arrays.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @param   {System.Collections.Generic.IEnumerable$1}             columns
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}
                 */
                OfColumnArrays: function (columns) {
                    var $t;
                    return new MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(System.Double).OfColumnArrays((Bridge.as(columns, System.Array.type(System.Array.type(System.Double)))) || ($t = System.Array.type(System.Double), System.Linq.Enumerable.from(columns, $t).ToArray($t))));
                },
                /**
                 * Create a new dense matrix as a copy of the given column vectors.
                 This new matrix will be independent from the vectors.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @param   {Array.<MathNet.Numerics.LinearAlgebra.Vector$1>}      columns
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}
                 */
                OfColumnVectors: function (columns) {
                    if (columns === void 0) { columns = []; }
                    var storage = System.Array.init(columns.length, null, MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(System.Double));
                    for (var i = 0; i < columns.length; i = (i + 1) | 0) {
                        storage[System.Array.index(i, storage)] = columns[System.Array.index(i, columns)].Storage;
                    }
                    return new MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(System.Double).OfColumnVectors(storage));
                },
                /**
                 * Create a new dense matrix as a copy of the given column vectors.
                 This new matrix will be independent from the vectors.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @param   {System.Collections.Generic.IEnumerable$1}             columns
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}
                 */
                OfColumnVectors$1: function (columns) {
                    return new MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(System.Double).OfColumnVectors(System.Linq.Enumerable.from(columns, MathNet.Numerics.LinearAlgebra.Vector$1(System.Double)).select(function (c) {
                            return c.Storage;
                        }).ToArray(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(System.Double))));
                },
                /**
                 * Create a new dense matrix as a copy of the given enumerable of enumerable rows.
                 Each enumerable in the master enumerable specifies a row.
                 This new matrix will be independent from the enumerables.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @param   {System.Collections.Generic.IEnumerable$1}             data
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}
                 */
                OfRows: function (data) {
                    return MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.OfRowArrays$1(System.Linq.Enumerable.from(data, System.Collections.Generic.IEnumerable$1(System.Double)).select(function (v) {
                            var $t;
                            return ($t = System.Double, System.Linq.Enumerable.from(v, $t).ToArray($t));
                        }).ToArray(System.Array.type(System.Double)));
                },
                /**
                 * Create a new dense matrix as a copy of the given enumerable of enumerable rows.
                 Each enumerable in the master enumerable specifies a row.
                 This new matrix will be independent from the enumerables.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @param   {number}                                               rows       
                 * @param   {number}                                               columns    
                 * @param   {System.Collections.Generic.IEnumerable$1}             data
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}
                 */
                OfRows$1: function (rows, columns, data) {
                    return new MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(System.Double).OfRowEnumerables(rows, columns, data));
                },
                /**
                 * Create a new dense matrix as a copy of the given row arrays.
                 This new matrix will be independent from the arrays.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @param   {Array.<Array.<number>>}                               rows
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}
                 */
                OfRowArrays$1: function (rows) {
                    if (rows === void 0) { rows = []; }
                    return new MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(System.Double).OfRowArrays(rows));
                },
                /**
                 * Create a new dense matrix as a copy of the given row arrays.
                 This new matrix will be independent from the arrays.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @param   {System.Collections.Generic.IEnumerable$1}             rows
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}
                 */
                OfRowArrays: function (rows) {
                    var $t;
                    return new MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(System.Double).OfRowArrays((Bridge.as(rows, System.Array.type(System.Array.type(System.Double)))) || ($t = System.Array.type(System.Double), System.Linq.Enumerable.from(rows, $t).ToArray($t))));
                },
                /**
                 * Create a new dense matrix as a copy of the given row vectors.
                 This new matrix will be independent from the vectors.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @param   {Array.<MathNet.Numerics.LinearAlgebra.Vector$1>}      rows
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}
                 */
                OfRowVectors: function (rows) {
                    if (rows === void 0) { rows = []; }
                    var storage = System.Array.init(rows.length, null, MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(System.Double));
                    for (var i = 0; i < rows.length; i = (i + 1) | 0) {
                        storage[System.Array.index(i, storage)] = rows[System.Array.index(i, rows)].Storage;
                    }
                    return new MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(System.Double).OfRowVectors(storage));
                },
                /**
                 * Create a new dense matrix as a copy of the given row vectors.
                 This new matrix will be independent from the vectors.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @param   {System.Collections.Generic.IEnumerable$1}             rows
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}
                 */
                OfRowVectors$1: function (rows) {
                    return new MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(System.Double).OfRowVectors(System.Linq.Enumerable.from(rows, MathNet.Numerics.LinearAlgebra.Vector$1(System.Double)).select(function (r) {
                            return r.Storage;
                        }).ToArray(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(System.Double))));
                },
                /**
                 * Create a new dense matrix with the diagonal as a copy of the given vector.
                 This new matrix will be independent from the vector.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}              diagonal
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}
                 */
                OfDiagonalVector: function (diagonal) {
                    var m = new MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.$ctor2(diagonal.Count, diagonal.Count);
                    m.SetDiagonal$1(diagonal);
                    return m;
                },
                /**
                 * Create a new dense matrix with the diagonal as a copy of the given vector.
                 This new matrix will be independent from the vector.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @param   {number}                                               rows        
                 * @param   {number}                                               columns     
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}              diagonal
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}
                 */
                OfDiagonalVector$1: function (rows, columns, diagonal) {
                    var m = new MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.$ctor2(rows, columns);
                    m.SetDiagonal$1(diagonal);
                    return m;
                },
                /**
                 * Create a new dense matrix with the diagonal as a copy of the given array.
                 This new matrix will be independent from the array.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @param   {Array.<number>}                                       diagonal
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}
                 */
                OfDiagonalArray: function (diagonal) {
                    var m = new MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.$ctor2(diagonal.length, diagonal.length);
                    m.SetDiagonal(diagonal);
                    return m;
                },
                /**
                 * Create a new dense matrix with the diagonal as a copy of the given array.
                 This new matrix will be independent from the array.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @param   {number}                                               rows        
                 * @param   {number}                                               columns     
                 * @param   {Array.<number>}                                       diagonal
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}
                 */
                OfDiagonalArray$1: function (rows, columns, diagonal) {
                    var m = new MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.$ctor2(rows, columns);
                    m.SetDiagonal(diagonal);
                    return m;
                },
                /**
                 * Create a new dense matrix and initialize each value to the same provided value.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @param   {number}                                               rows       
                 * @param   {number}                                               columns    
                 * @param   {number}                                               value
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}
                 */
                Create: function (rows, columns, value) {
                    if (value === 0.0) {
                        return new MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.$ctor2(rows, columns);
                    }
                    return new MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(System.Double).OfValue(rows, columns, value));
                },
                /**
                 * Create a new dense matrix and initialize each value using the provided init function.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @param   {number}                                               rows       
                 * @param   {number}                                               columns    
                 * @param   {System.Func}                                          init
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}
                 */
                Create$1: function (rows, columns, init) {
                    return new MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(System.Double).OfInit(rows, columns, init));
                },
                /**
                 * Create a new diagonal dense matrix and initialize each diagonal value to the same provided value.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @param   {number}                                               rows       
                 * @param   {number}                                               columns    
                 * @param   {number}                                               value
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}
                 */
                CreateDiagonal: function (rows, columns, value) {
                    if (value === 0.0) {
                        return new MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.$ctor2(rows, columns);
                    }
                    return new MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(System.Double).OfDiagonalInit(rows, columns, function (i) {
                        return value;
                    }));
                },
                /**
                 * Create a new diagonal dense matrix and initialize each diagonal value using the provided init function.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @param   {number}                                               rows       
                 * @param   {number}                                               columns    
                 * @param   {System.Func}                                          init
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}
                 */
                CreateDiagonal$1: function (rows, columns, init) {
                    return new MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(System.Double).OfDiagonalInit(rows, columns, init));
                },
                /**
                 * Create a new square sparse identity matrix where each diagonal value is set to One.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @param   {number}                                               order
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}
                 */
                CreateIdentity: function (order) {
                    return new MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(System.Double).OfDiagonalInit(order, order, function (i) {
                        return MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double).One;
                    }));
                }/**
                 * Adds two matrices together and returns the results.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @throws If <b /> and <b /> don't have the same dimensions.
                 * @throws If <b /> or <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}    leftSide     The left matrix to add.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}    rightSide    The right matrix to add.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}                 The result of the addition.
                 */
                ,
                op_Addition: function (leftSide, rightSide) {
                    if (rightSide == null) {
                        throw new System.ArgumentNullException.$ctor1("rightSide");
                    }

                    if (leftSide == null) {
                        throw new System.ArgumentNullException.$ctor1("leftSide");
                    }

                    if (leftSide._rowCount !== rightSide._rowCount || leftSide._columnCount !== rightSide._columnCount) {
                        throw MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double).DimensionsDontMatch$2(System.ArgumentOutOfRangeException, leftSide, rightSide);
                    }

                    return Bridge.cast(leftSide.Add$1(rightSide), MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
                }/**
                 * Returns a <strong>Matrix</strong> containing the same values of <b />.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}    rightSide    The matrix to get the values from.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}                 A matrix containing a the same values as <b />.
                 */
                ,
                op_UnaryPlus: function (rightSide) {
                    if (rightSide == null) {
                        throw new System.ArgumentNullException.$ctor1("rightSide");
                    }

                    return Bridge.cast(rightSide.Clone(), MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
                }/**
                 * Subtracts two matrices together and returns the results.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @throws If <b /> and <b /> don't have the same dimensions.
                 * @throws If <b /> or <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}    leftSide     The left matrix to subtract.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}    rightSide    The right matrix to subtract.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}                 The result of the addition.
                 */
                ,
                op_Subtraction: function (leftSide, rightSide) {
                    if (rightSide == null) {
                        throw new System.ArgumentNullException.$ctor1("rightSide");
                    }

                    if (leftSide == null) {
                        throw new System.ArgumentNullException.$ctor1("leftSide");
                    }

                    if (leftSide._rowCount !== rightSide._rowCount || leftSide._columnCount !== rightSide._columnCount) {
                        throw MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double).DimensionsDontMatch$2(System.ArgumentOutOfRangeException, leftSide, rightSide);
                    }

                    return Bridge.cast(leftSide.Subtract$1(rightSide), MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
                }/**
                 * Negates each element of the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}    rightSide    The matrix to negate.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}                 A matrix containing the negated values.
                 */
                ,
                op_UnaryNegation: function (rightSide) {
                    if (rightSide == null) {
                        throw new System.ArgumentNullException.$ctor1("rightSide");
                    }

                    return Bridge.cast(rightSide.Negate(), MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
                }/**
                 * Multiplies a <strong>Matrix</strong> by a constant and returns the result.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}    leftSide     The matrix to multiply.
                 * @param   {number}                                               rightSide    The constant to multiply the matrix by.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}                 The result of the multiplication.
                 */
                ,
                op_Multiply$1: function (leftSide, rightSide) {
                    if (leftSide == null) {
                        throw new System.ArgumentNullException.$ctor1("leftSide");
                    }

                    return Bridge.cast(leftSide.Multiply(rightSide), MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
                }/**
                 * Multiplies a <strong>Matrix</strong> by a constant and returns the result.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {number}                                               leftSide     The matrix to multiply.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}    rightSide    The constant to multiply the matrix by.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}                 The result of the multiplication.
                 */
                ,
                op_Multiply$2: function (leftSide, rightSide) {
                    if (rightSide == null) {
                        throw new System.ArgumentNullException.$ctor1("rightSide");
                    }

                    return Bridge.cast(rightSide.Multiply(leftSide), MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
                }/**
                 * Multiplies two matrices.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @throws If <b /> or <b /> is {@link ArgumentNullException}.
                 * @throws If the dimensions of <b /> or <b /> don't conform.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}    leftSide     The left matrix to multiply.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}    rightSide    The right matrix to multiply.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}                 The result of multiplication.
                 */
                ,
                op_Multiply: function (leftSide, rightSide) {
                    if (leftSide == null) {
                        throw new System.ArgumentNullException.$ctor1("leftSide");
                    }

                    if (rightSide == null) {
                        throw new System.ArgumentNullException.$ctor1("rightSide");
                    }

                    if (leftSide._columnCount !== rightSide._rowCount) {
                        throw MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double).DimensionsDontMatch$2(System.ArgumentOutOfRangeException, leftSide, rightSide);
                    }

                    return Bridge.cast(leftSide.Multiply$1(rightSide), MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
                }/**
                 * Multiplies a <strong>Matrix</strong> and a Vector.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @throws If <b /> or <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}    leftSide     The matrix to multiply.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.DenseVector}    rightSide    The vector to multiply.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseVector}                 The result of multiplication.
                 */
                ,
                op_Multiply$3: function (leftSide, rightSide) {
                    if (leftSide == null) {
                        throw new System.ArgumentNullException.$ctor1("leftSide");
                    }

                    return Bridge.cast(leftSide.Multiply$2(rightSide), MathNet.Numerics.LinearAlgebra.Double.DenseVector);
                }/**
                 * Multiplies a Vector and a <strong>Matrix</strong>.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @throws If <b /> or <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.DenseVector}    leftSide     The vector to multiply.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}    rightSide    The matrix to multiply.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseVector}                 The result of multiplication.
                 */
                ,
                op_Multiply$4: function (leftSide, rightSide) {
                    if (rightSide == null) {
                        throw new System.ArgumentNullException.$ctor1("rightSide");
                    }

                    return Bridge.cast(rightSide.LeftMultiply(leftSide), MathNet.Numerics.LinearAlgebra.Double.DenseVector);
                }/**
                 * Multiplies a <strong>Matrix</strong> by a constant and returns the result.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}    leftSide     The matrix to multiply.
                 * @param   {number}                                               rightSide    The constant to multiply the matrix by.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}                 The result of the multiplication.
                 */
                ,
                op_Modulus: function (leftSide, rightSide) {
                    if (leftSide == null) {
                        throw new System.ArgumentNullException.$ctor1("leftSide");
                    }

                    return Bridge.cast(leftSide.Remainder(rightSide), MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
                }
            }
        },
        fields: {
            /**
             * Number of rows.
             *
             * @instance
             * @private
             * @readonly
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @type number
             */
            _rowCount: 0,
            /**
             * Number of columns.
             *
             * @instance
             * @private
             * @readonly
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @type number
             */
            _columnCount: 0,
            /**
             * Gets the matrix's data.
             *
             * @instance
             * @private
             * @readonly
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @type Array.<number>
             */
            _values: null
        },
        props: {
            /**
             * Create a new dense matrix with values sampled from the provided random distribution.
             * Gets the matrix's data.
             *
             * @instance
             * @public
             * @readonly
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @function Values
             * @type Array.<number>
             */
            Values: {
                get: function () {
                    return this._values;
                }
            }
        },
        ctors: {
            /**
             * Create a new dense matrix straight from an initialized matrix storage instance.
             The storage is used directly without copying.
             Intended for advanced scenarios where you're working directly with
             storage for performance or interop reasons.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @param   {MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1}    storage
             * @return  {void}
             */
            ctor: function (storage) {
                this.$initialize();
                MathNet.Numerics.LinearAlgebra.Double.Matrix.ctor.call(this, storage);
                this._rowCount = storage.RowCount;
                this._columnCount = storage.ColumnCount;
                this._values = storage.Data;
            },
            /**
             * Create a new square dense matrix with the given number of rows and columns.
             All cells of the matrix will be initialized to zero.
             Zero-length matrices are not supported.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @throws If the order is less than one.
             * @param   {number}    order
             * @return  {void}
             */
            $ctor1: function (order) {
                MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.ctor.call(this, new (MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(System.Double)).ctor(order, order));
            },
            /**
             * Create a new dense matrix with the given number of rows and columns.
             All cells of the matrix will be initialized to zero.
             Zero-length matrices are not supported.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @throws If the row or column count is less than one.
             * @param   {number}    rows       
             * @param   {number}    columns
             * @return  {void}
             */
            $ctor2: function (rows, columns) {
                MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.ctor.call(this, new (MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(System.Double)).ctor(rows, columns));
            },
            /**
             * Create a new dense matrix with the given number of rows and columns directly binding to a raw array.
             The array is assumed to be in column-major order (column by column) and is used directly without copying.
             Very efficient, but changes to the array and the matrix will affect each other.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @param   {number}            rows       
             * @param   {number}            columns    
             * @param   {Array.<number>}    storage
             * @return  {void}
             * @see {@link }
             */
            $ctor3: function (rows, columns, storage) {
                MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.ctor.call(this, new (MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(System.Double)).$ctor1(rows, columns, storage));
            }
        },
        methods: {
            /**
             * Calculates the induced L1 norm of this matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @return  {number}        The maximum absolute column sum of the matrix.
             */
            L1Norm: function () {
                var norm = 0.0;
                for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                    var s = 0.0;
                    for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                        s += Math.abs(this.At(i, j));
                    }
                    norm = Math.max(norm, s);
                }
                return norm;
            },
            /**
             * Calculates the induced infinity norm of this matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @return  {number}        The maximum absolute row sum of the matrix.
             */
            InfinityNorm: function () {
                var norm = 0.0;
                for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                    var s = 0.0;
                    for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                        s += Math.abs(this.At(i, j));
                    }
                    norm = Math.max(norm, s);
                }
                return norm;
            },
            /**
             * Calculates the entry-wise Frobenius norm of this matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @return  {number}        The square root of the sum of the squared values.
             */
            FrobeniusNorm: function () {
                var transpose = this.Transpose();
                var aat = MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double).op_Multiply$2(this, transpose);
                var norm = 0.0;
                for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                    norm += aat.At(i, i);
                }
                return Math.sqrt(norm);
            },
            /**
             * Negate each element of this matrix and place the results into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The result of the negation.
             * @return  {void}
             */
            DoNegate: function (result) {
                var denseResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
                if (denseResult != null) {
                    this.Map$1(function (x) {
                        return -x;
                    }, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                    return;
                }

                MathNet.Numerics.LinearAlgebra.Double.Matrix.prototype.DoNegate.call(this, result);
            },
            /**
             * Add a scalar to each element of the matrix and stores the result in the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @param   {number}                                     scalar    The scalar to add.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result of the addition.
             * @return  {void}
             */
            DoAdd: function (scalar, result) {
                var denseResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
                if (denseResult == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Matrix.prototype.DoAdd.call(this, scalar, result);
                    return;
                }

                this.Map$1(function (x) {
                    return x + scalar;
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            /**
             * Adds another matrix to this matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @throws If the other matrix is {@link ArgumentNullException}.
             * @throws If the two matrices don't have the same dimensions.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix to add to this matrix.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result of add
             * @return  {void}
             */
            DoAdd$1: function (other, result) {
                var denseOther = Bridge.as(other.Storage, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(System.Double));
                var denseResult = Bridge.as(result.Storage, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(System.Double));
                if (denseOther != null && denseResult != null) {
                    this.Map2$1(function (x, y) {
                        return x + y;
                    }, other, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                    return;
                }

                var diagonalOther = Bridge.as(other.Storage, MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(System.Double));
                if (diagonalOther != null) {
                    this.Storage.CopyToUnchecked(result.Storage, MathNet.Numerics.LinearAlgebra.ExistingData.Clear);
                    var diagonal = diagonalOther.Data;
                    for (var i = 0; i < diagonal.length; i = (i + 1) | 0) {
                        result.At$1(i, i, result.At(i, i) + diagonal[System.Array.index(i, diagonal)]);
                    }
                    return;
                }

                MathNet.Numerics.LinearAlgebra.Double.Matrix.prototype.DoAdd$1.call(this, other, result);
            },
            /**
             * Subtracts a scalar from each element of the matrix and stores the result in the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @param   {number}                                     scalar    The scalar to subtract.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result of the subtraction.
             * @return  {void}
             */
            DoSubtract: function (scalar, result) {
                var denseResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
                if (denseResult == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Matrix.prototype.DoSubtract.call(this, scalar, result);
                    return;
                }

                this.Map$1(function (x) {
                    return x - scalar;
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            /**
             * Subtracts another matrix from this matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix to subtract.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result of the subtraction.
             * @return  {void}
             */
            DoSubtract$1: function (other, result) {
                var denseOther = Bridge.as(other.Storage, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(System.Double));
                var denseResult = Bridge.as(result.Storage, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(System.Double));
                if (denseOther != null && denseResult != null) {
                    this.Map2$1(function (x, y) {
                        return x - y;
                    }, other, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                    return;
                }

                var diagonalOther = Bridge.as(other.Storage, MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(System.Double));
                if (diagonalOther != null) {
                    this.CopyTo(result);
                    var diagonal = diagonalOther.Data;
                    for (var i = 0; i < diagonal.length; i = (i + 1) | 0) {
                        result.At$1(i, i, result.At(i, i) - diagonal[System.Array.index(i, diagonal)]);
                    }
                    return;
                }

                MathNet.Numerics.LinearAlgebra.Double.Matrix.prototype.DoSubtract$1.call(this, other, result);
            },
            /**
             * Multiplies each element of the matrix by a scalar and places results into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @param   {number}                                     scalar    The scalar to multiply the matrix with.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result of the multiplication.
             * @return  {void}
             */
            DoMultiply: function (scalar, result) {
                var denseResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
                if (denseResult == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Matrix.prototype.DoMultiply.call(this, scalar, result);
                } else {
                    for (var x = 0; x < this.ColumnCount; x = (x + 1) | 0) {
                        for (var y = 0; y < this.RowCount; y = (y + 1) | 0) {
                            result.setItem(y, x, this._values[System.Array.index(((Bridge.Int.mul(x, 3) + y) | 0), this._values)] * scalar);
                        }
                    }
                }
            },
            /**
             * Multiplies this matrix with a vector and places the results into the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    rightSide    The vector to multiply with.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result       The result of the multiplication.
             * @return  {void}
             */
            DoMultiply$2: function (rightSide, result) {
                var denseRight = Bridge.as(rightSide, MathNet.Numerics.LinearAlgebra.Double.DenseVector);
                var denseResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DenseVector);

                if (denseRight == null || denseResult == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Matrix.prototype.DoMultiply$2.call(this, rightSide, result);
                } else {
                    for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                        var s = 0.0;
                        for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                            s += this.At(i, j) * rightSide.getItem(j);
                        }
                        result.setItem(i, s);
                    }
                }
            },
            /**
             * Multiplies this matrix with another matrix and places the results into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix to multiply with.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The result of the multiplication.
             * @return  {void}
             */
            DoMultiply$1: function (other, result) {
                var denseOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
                var denseResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
                if (denseOther != null && denseResult != null) {
                    for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                        for (var j = 0; j < other.ColumnCount; j = (j + 1) | 0) {
                            var s = 0.0;
                            for (var k = 0; k < this.ColumnCount; k = (k + 1) | 0) {
                                s += this.At(i, k) * other.At(k, j);
                            }
                            result.At$1(i, j, s);
                        }
                    }
                    return;
                }

                var diagonalOther = Bridge.as(other.Storage, MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(System.Double));
                if (diagonalOther != null) {
                    var diagonal = diagonalOther.Data;
                    var d = Math.min(this.ColumnCount, other.ColumnCount);
                    if (d < other.ColumnCount) {
                        result.ClearSubMatrix(0, this.RowCount, this.ColumnCount, ((other.ColumnCount - this.ColumnCount) | 0));
                    }
                    var index = 0;
                    for (var j1 = 0; j1 < d; j1 = (j1 + 1) | 0) {
                        for (var i1 = 0; i1 < this.RowCount; i1 = (i1 + 1) | 0) {
                            result.At$1(i1, j1, this._values[System.Array.index(index, this._values)] * diagonal[System.Array.index(j1, diagonal)]);
                            index = (index + 1) | 0;
                        }
                    }
                    return;
                }

                MathNet.Numerics.LinearAlgebra.Double.Matrix.prototype.DoMultiply$1.call(this, other, result);
            },
            /**
             * Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix to multiply with.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The result of the multiplication.
             * @return  {void}
             */
            DoTransposeAndMultiply: function (other, result) {
                var denseOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
                var denseResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
                if (denseOther != null && denseResult != null) {
                    for (var j = 0; j < other.RowCount; j = (j + 1) | 0) {
                        for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                            var s = 0.0;
                            for (var k = 0; k < this.ColumnCount; k = (k + 1) | 0) {
                                s += this.At(i, k) * other.At(j, k);
                            }
                            result.At$1(i, j, s);
                        }
                    }
                    return;
                }

                var diagonalOther = Bridge.as(other.Storage, MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(System.Double));
                if (diagonalOther != null) {
                    var diagonal = diagonalOther.Data;
                    var d = Math.min(this.ColumnCount, other.RowCount);
                    if (d < other.RowCount) {
                        result.ClearSubMatrix(0, this.RowCount, this.ColumnCount, ((other.RowCount - this.ColumnCount) | 0));
                    }
                    var index = 0;
                    for (var j1 = 0; j1 < d; j1 = (j1 + 1) | 0) {
                        for (var i1 = 0; i1 < this.RowCount; i1 = (i1 + 1) | 0) {
                            result.At$1(i1, j1, this._values[System.Array.index(index, this._values)] * diagonal[System.Array.index(j1, diagonal)]);
                            index = (index + 1) | 0;
                        }
                    }
                    return;
                }

                MathNet.Numerics.LinearAlgebra.Double.Matrix.prototype.DoTransposeAndMultiply.call(this, other, result);
            },
            /**
             * Multiplies the transpose of this matrix with a vector and places the results into the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    rightSide    The vector to multiply with.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result       The result of the multiplication.
             * @return  {void}
             */
            DoTransposeThisAndMultiply$1: function (rightSide, result) {
                var denseRight = Bridge.as(rightSide, MathNet.Numerics.LinearAlgebra.Double.DenseVector);
                var denseResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DenseVector);

                if (denseRight == null || denseResult == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Matrix.prototype.DoTransposeThisAndMultiply$1.call(this, rightSide, result);
                } else {
                    for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                        var s = 0.0;
                        for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                            s += this.At(i, j) * rightSide.getItem(i);
                        }
                        result.setItem(j, s);
                    }
                }
            },
            /**
             * Multiplies the transpose of this matrix with another matrix and places the results into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix to multiply with.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The result of the multiplication.
             * @return  {void}
             */
            DoTransposeThisAndMultiply: function (other, result) {
                var denseOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
                var denseResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
                if (denseOther != null && denseResult != null) {
                    for (var j = 0; j < other.ColumnCount; j = (j + 1) | 0) {
                        for (var i = 0; i < this.ColumnCount; i = (i + 1) | 0) {
                            var s = 0.0;
                            for (var k = 0; k < this.RowCount; k = (k + 1) | 0) {
                                s += this.At(k, i) * other.At(k, j);
                            }
                            result.At$1(i, j, s);
                        }
                    }
                    return;
                }

                var diagonalOther = Bridge.as(other.Storage, MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(System.Double));
                if (diagonalOther != null) {
                    var diagonal = diagonalOther.Data;
                    var d = Math.min(this.RowCount, other.ColumnCount);
                    if (d < other.ColumnCount) {
                        result.ClearSubMatrix(0, this.ColumnCount, this.RowCount, ((other.ColumnCount - this.RowCount) | 0));
                    }
                    var index = 0;
                    for (var i1 = 0; i1 < this.ColumnCount; i1 = (i1 + 1) | 0) {
                        for (var j1 = 0; j1 < d; j1 = (j1 + 1) | 0) {
                            result.At$1(i1, j1, this._values[System.Array.index(index, this._values)] * diagonal[System.Array.index(j1, diagonal)]);
                            index = (index + 1) | 0;
                        }
                        index = (index + (((this.RowCount - d) | 0))) | 0;
                    }
                    return;
                }

                MathNet.Numerics.LinearAlgebra.Double.Matrix.prototype.DoTransposeThisAndMultiply.call(this, other, result);
            },
            /**
             * Divides each element of the matrix by a scalar and places results into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @param   {number}                                     divisor    The scalar to divide the matrix with.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result     The matrix to store the result of the division.
             * @return  {void}
             */
            DoDivide: function (divisor, result) {
                var denseResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
                if (denseResult == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Matrix.prototype.DoDivide.call(this, divisor, result);
                } else {

                    var I = this.m_builder$1.Dense$1(this.ColumnCount, this.RowCount);

                    for (var x = 0; x < this.ColumnCount; x = (x + 1) | 0) {
                        for (var y = 0; y < this.RowCount; y = (y + 1) | 0) {
                            I.setItem(y, x, this.getItem(y, x) / divisor);
                        }
                    }
                    result = I;
                }
            },
            /**
             * Pointwise multiplies this matrix with another matrix and stores the result into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix to pointwise multiply with this one.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result of the pointwise multiplication.
             * @return  {void}
             */
            DoPointwiseMultiply: function (other, result) {
                var denseOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
                var denseResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);

                if (denseOther == null || denseResult == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Matrix.prototype.DoPointwiseMultiply.call(this, other, result);
                } else {
                    this.Map2$1(function (x, y) {
                        return x * y;
                    }, other, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                }
            },
            /**
             * Pointwise divide this matrix by another matrix and stores the result into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    divisor    The matrix to pointwise divide this one by.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result     The matrix to store the result of the pointwise division.
             * @return  {void}
             */
            DoPointwiseDivide: function (divisor, result) {
                var denseDivisor = Bridge.as(divisor, MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
                var denseResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);

                if (denseDivisor == null || denseResult == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Matrix.prototype.DoPointwiseDivide.call(this, divisor, result);
                } else {
                    this.Map2$1(function (x, y) {
                        return x / y;
                    }, divisor, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
                }
            },
            /**
             * Pointwise raise this matrix to an exponent and store the result into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    exponent    The exponent to raise this matrix values to.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result      The vector to store the result of the pointwise power.
             * @return  {void}
             */
            DoPointwisePower$1: function (exponent, result) {
                var denseExponent = Bridge.as(exponent, MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
                var denseResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);

                if (denseExponent == null || denseResult == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Matrix.prototype.DoPointwisePower$1.call(this, exponent, result);
                } else {
                    this.Map2(Math.pow, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
                }
            },
            /**
             * Computes the canonical modulus, where the result has the sign of the divisor,
             for the given divisor each element of the matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @param   {number}                                     divisor    The scalar denominator to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result     Matrix to store the results in.
             * @return  {void}
             */
            DoModulus: function (divisor, result) {
                var denseResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
                if (denseResult == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Matrix.prototype.DoModulus.call(this, divisor, result);
                    return;
                }

                if (!Bridge.referenceEquals(this, result)) {
                    this.CopyTo(result);
                }

                this.Map$1(function (x) {
                    return MathNet.Numerics.Euclid.Modulus(x, divisor);
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            /**
             * Computes the canonical modulus, where the result has the sign of the divisor,
             for the given dividend for each element of the matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @param   {number}                                     dividend    The scalar numerator to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result      A vector to store the results in.
             * @return  {void}
             */
            DoModulusByThis: function (dividend, result) {
                var denseResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
                if (denseResult == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Matrix.prototype.DoModulusByThis.call(this, dividend, result);
                    return;
                }

                this.Map$1(function (x) {
                    return MathNet.Numerics.Euclid.Modulus(dividend, x);
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            /**
             * Computes the remainder (% operator), where the result has the sign of the dividend,
             for the given divisor each element of the matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @param   {number}                                     divisor    The scalar denominator to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result     Matrix to store the results in.
             * @return  {void}
             */
            DoRemainder: function (divisor, result) {
                var denseResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
                if (denseResult == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Matrix.prototype.DoRemainder.call(this, divisor, result);
                    return;
                }

                if (!Bridge.referenceEquals(this, result)) {
                    this.CopyTo(result);
                }

                this.Map$1(function (x) {
                    return MathNet.Numerics.Euclid.Remainder(x, divisor);
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            /**
             * Computes the remainder (% operator), where the result has the sign of the dividend,
             for the given dividend for each element of the matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @param   {number}                                     dividend    The scalar numerator to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result      A vector to store the results in.
             * @return  {void}
             */
            DoRemainderByThis: function (dividend, result) {
                var denseResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
                if (denseResult == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Matrix.prototype.DoRemainderByThis.call(this, dividend, result);
                    return;
                }

                this.Map$1(function (x) {
                    return MathNet.Numerics.Euclid.Remainder(dividend, x);
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
            },
            /**
             * Computes the trace of this matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @throws If the matrix is not square
             * @return  {number}        The trace of this matrix
             */
            Trace: function () {
                if (this._rowCount !== this._columnCount) {
                    throw new System.ArgumentException.$ctor1("Resources.ArgumentMatrixSquare");
                }

                var sum = 0.0;
                for (var i = 0; i < this._rowCount; i = (i + 1) | 0) {
                    sum += this._values[System.Array.index((((Bridge.Int.mul(i, this._rowCount)) + i) | 0), this._values)];
                }

                return sum;
            },
            /**
             * Evaluates whether this matrix is symmetric.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
             * @return  {boolean}
             */
            IsSymmetric: function () {
                if (this.RowCount !== this.ColumnCount) {
                    return false;
                }

                for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                    var index = Bridge.Int.mul(j, this.RowCount);
                    for (var i = (j + 1) | 0; i < this.RowCount; i = (i + 1) | 0) {
                        if (this._values[System.Array.index((((Bridge.Int.mul(i, this.ColumnCount)) + j) | 0), this._values)] !== this._values[System.Array.index(((index + i) | 0), this._values)]) {
                            return false;
                        }
                    }
                }

                return true;
            },
            LU: function () {
                return MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseLU.Create(this);
            },
            Svd$1: function (computeVectors) {
                if (computeVectors === void 0) { computeVectors = true; }
                return MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseSvd.Create(this, computeVectors);
            }
        }
    });

    /**
     * A vector using dense storage.
     * Creates a double dense vector based on a string. The string can be in the following formats (without the
     quotes): 'n', 'n,n,..', '(n,n,..)', '[n,n,...]', where n is a double.
     * Converts the string representation of a real dense vector to double-precision dense vector equivalent.
     A return value indicates whether the conversion succeeded or failed.
     * Converts the string representation of a real dense vector to double-precision dense vector equivalent.
     A return value indicates whether the conversion succeeded or failed.
     *
     * @public
     * @class MathNet.Numerics.LinearAlgebra.Double.DenseVector
     * @augments MathNet.Numerics.LinearAlgebra.Double.Vector
     * @return  {[type]}        If the conversion succeeds, the result will contain a complex number equivalent to value.
     Otherwise the result will be <pre><code>null</code></pre>.
     */
    Bridge.define("MathNet.Numerics.LinearAlgebra.Double.DenseVector", {
        inherits: [MathNet.Numerics.LinearAlgebra.Double.Vector],
        statics: {
            methods: {
                /**
                 * Create a new dense vector as a copy of the given other vector.
                 This new vector will be independent from the other vector.
                 A new memory block will be allocated for storing the vector.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}              vector
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseVector}
                 */
                OfVector: function (vector) {
                    return new MathNet.Numerics.LinearAlgebra.Double.DenseVector.ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(System.Double).OfVector(vector.Storage));
                },
                /**
                 * Create a new dense vector as a copy of the given array.
                 This new vector will be independent from the array.
                 A new memory block will be allocated for storing the vector.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
                 * @param   {Array.<number>}                                       array
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseVector}
                 */
                OfArray: function (array) {
                    return new MathNet.Numerics.LinearAlgebra.Double.DenseVector.ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(System.Double).OfVector(new (MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(System.Double)).$ctor1(array.length, array)));
                },
                /**
                 * Create a new dense vector as a copy of the given enumerable.
                 This new vector will be independent from the enumerable.
                 A new memory block will be allocated for storing the vector.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
                 * @param   {System.Collections.Generic.IEnumerable$1}             enumerable
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseVector}
                 */
                OfEnumerable: function (enumerable) {
                    return new MathNet.Numerics.LinearAlgebra.Double.DenseVector.ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(System.Double).OfEnumerable(enumerable));
                },
                /**
                 * Create a new dense vector as a copy of the given indexed enumerable.
                 Keys must be provided at most once, zero is assumed if a key is omitted.
                 This new vector will be independent from the enumerable.
                 A new memory block will be allocated for storing the vector.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
                 * @param   {number}                                               length        
                 * @param   {System.Collections.Generic.IEnumerable$1}             enumerable
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseVector}
                 */
                OfIndexedEnumerable: function (length, enumerable) {
                    return new MathNet.Numerics.LinearAlgebra.Double.DenseVector.ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(System.Double).OfIndexedEnumerable(length, enumerable));
                },
                /**
                 * Create a new dense vector and initialize each value using the provided value.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
                 * @param   {number}                                               length    
                 * @param   {number}                                               value
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseVector}
                 */
                Create: function (length, value) {
                    if (value === 0.0) {
                        return new MathNet.Numerics.LinearAlgebra.Double.DenseVector.$ctor2(length);
                    }
                    return new MathNet.Numerics.LinearAlgebra.Double.DenseVector.ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(System.Double).OfValue(length, value));
                },
                /**
                 * Create a new dense vector and initialize each value using the provided init function.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
                 * @param   {number}                                               length    
                 * @param   {System.Func}                                          init
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseVector}
                 */
                Create$1: function (length, init) {
                    return new MathNet.Numerics.LinearAlgebra.Double.DenseVector.ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(System.Double).OfInit(length, init));
                }/**
                 * Returns a reference to the internal data structure.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.DenseVector}    vector    The <pre><code>DenseVector</code></pre> whose internal data we are
                 returning.
                 * @return  {Array.<number>}                                                 A reference to the internal date of the given vector.
                 */
                ,
                op_Explicit: function (vector) {
                    if (vector == null) {
                        throw new System.ArgumentNullException.$ctor1("vector");
                    }

                    return vector.Values;
                }/**
                 * Returns a vector bound directly to a reference of the provided array.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
                 * @param   {Array.<number>}                                       array    The array to bind to the <pre><code>DenseVector</code></pre> object.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseVector}             A <pre><code>DenseVector</code></pre> whose values are bound to the given array.
                 */
                ,
                op_Implicit: function (array) {
                    if (array == null) {
                        throw new System.ArgumentNullException.$ctor1("array");
                    }

                    return new MathNet.Numerics.LinearAlgebra.Double.DenseVector.$ctor1(array);
                }/**
                 * Adds two <strong>Vectors</strong> together and returns the results.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
                 * @throws If <b /> and <b /> are not the same size.
                 * @throws If <b /> or <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.DenseVector}    leftSide     One of the vectors to add.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.DenseVector}    rightSide    The other vector to add.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseVector}                 The result of the addition.
                 */
                ,
                op_Addition: function (leftSide, rightSide) {
                    if (rightSide == null) {
                        throw new System.ArgumentNullException.$ctor1("rightSide");
                    }

                    if (leftSide == null) {
                        throw new System.ArgumentNullException.$ctor1("leftSide");
                    }

                    if (leftSide.Count !== rightSide.Count) {
                        throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "rightSide");
                    }

                    return Bridge.cast(leftSide.Add$1(rightSide), MathNet.Numerics.LinearAlgebra.Double.DenseVector);
                }/**
                 * Returns a <strong>Vector</strong> containing the negated values of <b />.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.DenseVector}    rightSide    The vector to get the values from.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseVector}                 A vector containing the negated values as <b />.
                 */
                ,
                op_UnaryNegation: function (rightSide) {
                    if (rightSide == null) {
                        throw new System.ArgumentNullException.$ctor1("rightSide");
                    }

                    return Bridge.cast(rightSide.Negate(), MathNet.Numerics.LinearAlgebra.Double.DenseVector);
                }/**
                 * Subtracts two <strong>Vectors</strong> and returns the results.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
                 * @throws If <b /> and <b /> are not the same size.
                 * @throws If <b /> or <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.DenseVector}    leftSide     The vector to subtract from.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.DenseVector}    rightSide    The vector to subtract.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseVector}                 The result of the subtraction.
                 */
                ,
                op_Subtraction: function (leftSide, rightSide) {
                    if (leftSide == null) {
                        throw new System.ArgumentNullException.$ctor1("leftSide");
                    }

                    return Bridge.cast(leftSide.Subtract$1(rightSide), MathNet.Numerics.LinearAlgebra.Double.DenseVector);
                }/**
                 * Multiplies a vector with a scalar.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.DenseVector}    leftSide     The vector to scale.
                 * @param   {number}                                               rightSide    The scalar value.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseVector}                 The result of the multiplication.
                 */
                ,
                op_Multiply: function (leftSide, rightSide) {
                    if (leftSide == null) {
                        throw new System.ArgumentNullException.$ctor1("leftSide");
                    }

                    return Bridge.cast(leftSide.Multiply(rightSide), MathNet.Numerics.LinearAlgebra.Double.DenseVector);
                }/**
                 * Multiplies a vector with a scalar.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {number}                                               leftSide     The scalar value.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.DenseVector}    rightSide    The vector to scale.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseVector}                 The result of the multiplication.
                 */
                ,
                op_Multiply$1: function (leftSide, rightSide) {
                    if (rightSide == null) {
                        throw new System.ArgumentNullException.$ctor1("rightSide");
                    }

                    return Bridge.cast(rightSide.Multiply(leftSide), MathNet.Numerics.LinearAlgebra.Double.DenseVector);
                }/**
                 * Computes the dot product between two <strong>Vectors</strong>.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
                 * @throws If <b /> and <b /> are not the same size.
                 * @throws If <b /> or <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.DenseVector}    leftSide     The left row vector.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.DenseVector}    rightSide    The right column vector.
                 * @return  {number}                                                            The dot product between the two vectors.
                 */
                ,
                op_Multiply$2: function (leftSide, rightSide) {
                    if (leftSide == null) {
                        throw new System.ArgumentNullException.$ctor1("leftSide");
                    }

                    return leftSide.DotProduct(rightSide);
                }/**
                 * Divides a vector with a scalar.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.DenseVector}    leftSide     The vector to divide.
                 * @param   {number}                                               rightSide    The scalar value.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseVector}                 The result of the division.
                 */
                ,
                op_Division: function (leftSide, rightSide) {
                    if (leftSide == null) {
                        throw new System.ArgumentNullException.$ctor1("leftSide");
                    }

                    return Bridge.cast(leftSide.Divide(rightSide), MathNet.Numerics.LinearAlgebra.Double.DenseVector);
                }/**
                 * Computes the remainder (% operator), where the result has the sign of the dividend,
                 of each element of the vector of the given divisor.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.DenseVector}    leftSide     The vector whose elements we want to compute the remainder of.
                 * @param   {number}                                               rightSide    The divisor to use,
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DenseVector}
                 */
                ,
                op_Modulus: function (leftSide, rightSide) {
                    if (leftSide == null) {
                        throw new System.ArgumentNullException.$ctor1("leftSide");
                    }

                    return Bridge.cast(leftSide.Remainder(rightSide), MathNet.Numerics.LinearAlgebra.Double.DenseVector);
                }
            }
        },
        fields: {
            /**
             * Number of elements
             *
             * @instance
             * @private
             * @readonly
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @type number
             */
            _length: 0,
            /**
             * Gets the vector's data.
             *
             * @instance
             * @private
             * @readonly
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @type Array.<number>
             */
            _values: null
        },
        props: {
            /**
             * Create a new dense vector with values sampled from the provided random distribution.
             * Gets the vector's data.
             *
             * @instance
             * @public
             * @readonly
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @function Values
             * @type Array.<number>
             */
            Values: {
                get: function () {
                    return this._values;
                }
            }
        },
        ctors: {
            /**
             * Create a new dense vector straight from an initialized vector storage instance.
             The storage is used directly without copying.
             Intended for advanced scenarios where you're working directly with
             storage for performance or interop reasons.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @param   {MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1}    storage
             * @return  {void}
             */
            ctor: function (storage) {
                this.$initialize();
                MathNet.Numerics.LinearAlgebra.Double.Vector.ctor.call(this, storage);
                this._length = storage.Length;
                this._values = storage.Data;
            },
            /**
             * Create a new dense vector with the given length.
             All cells of the vector will be initialized to zero.
             Zero-length vectors are not supported.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @throws If length is less than one.
             * @param   {number}    length
             * @return  {void}
             */
            $ctor2: function (length) {
                MathNet.Numerics.LinearAlgebra.Double.DenseVector.ctor.call(this, new (MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(System.Double)).ctor(length));
            },
            /**
             * Create a new dense vector directly binding to a raw array.
             The array is used directly without copying.
             Very efficient, but changes to the array and the vector will affect each other.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @param   {Array.<number>}    storage
             * @return  {void}
             */
            $ctor1: function (storage) {
                MathNet.Numerics.LinearAlgebra.Double.DenseVector.ctor.call(this, new (MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(System.Double)).$ctor1(storage.length, storage));
            }
        },
        methods: {
            /**
             * Adds a scalar to each element of the vector and stores the result in the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @param   {number}                                     scalar    The scalar to add.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result of the addition.
             * @return  {void}
             */
            DoAdd: function (scalar, result) {
                var dense = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DenseVector);
                if (dense == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Vector.prototype.DoAdd.call(this, scalar, result);
                } else {

                    for (var i = 0; i < this._values.length; i = (i + 1) | 0) {
                        dense._values[System.Array.index(i, dense._values)] = this._values[System.Array.index(i, this._values)] + scalar;
                    }

                }
            },
            /**
             * Adds another vector to this vector and stores the result into the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other     The vector to add to this one.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result of the addition.
             * @return  {void}
             */
            DoAdd$1: function (other, result) {
                var otherDense = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Double.DenseVector);
                var resultDense = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DenseVector);

                if (otherDense == null || resultDense == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Vector.prototype.DoAdd$1.call(this, other, result);
                } else {
                    this.Map2$1(function (x, y) {
                        return x + y;
                    }, other, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                }
            },
            /**
             * Subtracts a scalar from each element of the vector and stores the result in the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @param   {number}                                     scalar    The scalar to subtract.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result of the subtraction.
             * @return  {void}
             */
            DoSubtract: function (scalar, result) {
                var dense = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DenseVector);
                if (dense == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Vector.prototype.DoSubtract.call(this, scalar, result);
                } else {

                    for (var i = 0; i < this._values.length; i = (i + 1) | 0) {
                        dense._values[System.Array.index(i, dense._values)] = this._values[System.Array.index(i, this._values)] - scalar;
                    }

                }
            },
            /**
             * Subtracts another vector to this vector and stores the result into the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other     The vector to subtract from this one.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result of the subtraction.
             * @return  {void}
             */
            DoSubtract$1: function (other, result) {
                var otherDense = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Double.DenseVector);
                var resultDense = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DenseVector);

                if (otherDense == null || resultDense == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Vector.prototype.DoSubtract$1.call(this, other, result);
                } else {
                    this.Map2$1(function (x, y) {
                        return x - y;
                    }, other, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                }
            },
            /**
             * Negates vector and saves result to <b />
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    Target vector
             * @return  {void}
             */
            DoNegate: function (result) {
                var denseResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DenseVector);
                if (denseResult == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Vector.prototype.DoNegate.call(this, result);
                    return;
                }

                this.Map$1(function (x) {
                    return -x;
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            /**
             * Multiplies a scalar to each element of the vector and stores the result in the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @param   {number}                                     scalar    The scalar to multiply.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result of the multiplication.
             * @return  {void}
             */
            DoMultiply: function (scalar, result) {
                var denseResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DenseVector);
                if (denseResult == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Vector.prototype.DoMultiply.call(this, scalar, result);
                    return;
                }

                this.Map$1(function (x) {
                    return x * scalar;
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            /**
             * Computes the dot product between this vector and another vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other    The other vector.
             * @return  {number}                                              The sum of a[i]*b[i] for all i.
             */
            DoDotProduct: function (other) {
                var dot = 0.0;
                for (var i = 0; i < this.Count; i = (i + 1) | 0) {
                    dot += this.At(i) * other.At(i);
                }
                return dot;
            },
            /**
             * Computes the canonical modulus, where the result has the sign of the divisor,
             for each element of the vector for the given divisor.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @param   {number}                                     divisor    The divisor to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result     A vector to store the results in.
             * @return  {void}
             */
            DoModulus: function (divisor, result) {
                var dense = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DenseVector);
                if (dense == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Vector.prototype.DoModulus.call(this, divisor, result);
                } else {

                    for (var i = 0; i < this._length; i = (i + 1) | 0) {
                        dense._values[System.Array.index(i, dense._values)] = MathNet.Numerics.Euclid.Modulus(this._values[System.Array.index(i, this._values)], divisor);
                    }

                }
            },
            /**
             * Computes the remainder (% operator), where the result has the sign of the dividend,
             for each element of the vector for the given divisor.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @param   {number}                                     divisor    The divisor to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result     A vector to store the results in.
             * @return  {void}
             */
            DoRemainder: function (divisor, result) {
                var dense = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DenseVector);
                if (dense == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Vector.prototype.DoRemainder.call(this, divisor, result);
                } else {

                    for (var i = 0; i < this._length; i = (i + 1) | 0) {
                        dense._values[System.Array.index(i, dense._values)] = this._values[System.Array.index(i, this._values)] % divisor;
                    }

                }
            },
            /**
             * Returns the index of the absolute minimum element.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @return  {number}        The index of absolute minimum element.
             */
            AbsoluteMinimumIndex: function () {
                var index = 0;
                var min = Math.abs(this._values[System.Array.index(index, this._values)]);
                for (var i = 1; i < this._length; i = (i + 1) | 0) {
                    var test = Math.abs(this._values[System.Array.index(i, this._values)]);
                    if (test < min) {
                        index = i;
                        min = test;
                    }
                }

                return index;
            },
            /**
             * Returns the index of the absolute maximum element.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @return  {number}        The index of absolute maximum element.
             */
            AbsoluteMaximumIndex: function () {
                var index = 0;
                var max = Math.abs(this._values[System.Array.index(index, this._values)]);
                for (var i = 1; i < this._length; i = (i + 1) | 0) {
                    var test = Math.abs(this._values[System.Array.index(i, this._values)]);
                    if (test > max) {
                        index = i;
                        max = test;
                    }
                }

                return index;
            },
            /**
             * Returns the index of the maximum element.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @return  {number}        The index of maximum element.
             */
            MaximumIndex: function () {
                var index = 0;
                var max = this._values[System.Array.index(0, this._values)];
                for (var i = 1; i < this._length; i = (i + 1) | 0) {
                    if (max < this._values[System.Array.index(i, this._values)]) {
                        index = i;
                        max = this._values[System.Array.index(i, this._values)];
                    }
                }

                return index;
            },
            /**
             * Returns the index of the minimum element.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @return  {number}        The index of minimum element.
             */
            MinimumIndex: function () {
                var index = 0;
                var min = this._values[System.Array.index(0, this._values)];
                for (var i = 1; i < this._length; i = (i + 1) | 0) {
                    if (min > this._values[System.Array.index(i, this._values)]) {
                        index = i;
                        min = this._values[System.Array.index(i, this._values)];
                    }
                }

                return index;
            },
            /**
             * Computes the sum of the vector's elements.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @return  {number}        The sum of the vector's elements.
             */
            Sum: function () {
                var sum = 0.0;
                for (var index = 0; index < this._length; index = (index + 1) | 0) {
                    sum += this._values[System.Array.index(index, this._values)];
                }
                return sum;
            },
            /**
             * Calculates the L1 norm of the vector, also known as Manhattan norm.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @return  {number}        The sum of the absolute values.
             */
            L1Norm: function () {
                var sum = 0.0;
                for (var index = 0; index < this._length; index = (index + 1) | 0) {
                    sum += Math.abs(this._values[System.Array.index(index, this._values)]);
                }
                return sum;
            },
            /**
             * Calculates the L2 norm of the vector, also known as Euclidean norm.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @return  {number}        The square root of the sum of the squared values.
             */
            L2Norm: function () {
                var $t;
                var total = 0.0;
                $t = Bridge.getEnumerator(this._values);
                try {
                    while ($t.moveNext()) {
                        var val = $t.Current;
                        total += Math.pow(Math.abs(val), 2.0);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                return Math.sqrt(total);
            },
            /**
             * Calculates the infinity norm of the vector.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @return  {number}        The maximum absolute value.
             */
            InfinityNorm: function () {
                var $t;
                var max = 0.0;
                $t = Bridge.getEnumerator(this._values);
                try {
                    while ($t.moveNext()) {
                        var val = $t.Current;
                        if (Math.abs(val) > max) {
                            max = Math.abs(val);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                return max;
            },
            /**
             * Computes the p-Norm.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @param   {number}    p    The p value.
             * @return  {number}         Scalar <pre><code>ret = ( â|this[i]|^p )^(1/p)</code></pre>
             */
            Norm: function (p) {
                if (p < 0.0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("p");
                }

                if (p === 1.0) {
                    return this.L1Norm();
                }
                if (p === 2.0) {
                    return this.L2Norm();
                }
                if ((p === Number.POSITIVE_INFINITY)) {
                    return this.InfinityNorm();
                }

                var sum = 0.0;
                for (var index = 0; index < this._length; index = (index + 1) | 0) {
                    sum += Math.pow(Math.abs(this._values[System.Array.index(index, this._values)]), p);
                }
                return Math.pow(sum, 1.0 / p);
            },
            /**
             * Pointwise divide this vector with another vector and stores the result into the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other     The vector to pointwise divide this one by.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result of the pointwise division.
             * @return  {void}
             */
            DoPointwiseMultiply: function (other, result) {
                var denseOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Double.DenseVector);
                var denseResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DenseVector);

                if (denseOther == null || denseResult == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Vector.prototype.DoPointwiseMultiply.call(this, other, result);
                } else {
                    this.Map2$1(function (x, y) {
                        return x * y;
                    }, other, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                }
            },
            /**
             * Pointwise divide this vector with another vector and stores the result into the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    divisor    The vector to pointwise divide this one by.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result     The vector to store the result of the pointwise division.
             * @return  {void}
             */
            DoPointwiseDivide: function (divisor, result) {
                var denseOther = Bridge.as(divisor, MathNet.Numerics.LinearAlgebra.Double.DenseVector);
                var denseResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DenseVector);

                if (denseOther == null || denseResult == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Vector.prototype.DoPointwiseDivide.call(this, divisor, result);
                } else {
                    this.Map2$1(function (x, y) {
                        return x / y;
                    }, divisor, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
                }
            },
            /**
             * Pointwise raise this vector to an exponent vector and store the result into the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DenseVector
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    exponent    The exponent vector to raise this vector values to.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result      The vector to store the result of the pointwise power.
             * @return  {void}
             */
            DoPointwisePower$1: function (exponent, result) {
                var denseExponent = Bridge.as(exponent, MathNet.Numerics.LinearAlgebra.Double.DenseVector);
                var denseResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DenseVector);

                if (denseExponent == null || denseResult == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Vector.prototype.DoPointwisePower$1.call(this, exponent, result);
                } else {
                    this.Map2$1(Math.pow, exponent, result, MathNet.Numerics.LinearAlgebra.Zeros.Include);
                }
            }
        }
    });

    /**
     * A matrix type for diagonal matrices.
     *
     * @public
     * @class MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
     * @augments MathNet.Numerics.LinearAlgebra.Double.Matrix
     */
    Bridge.define("MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix", {
        inherits: [MathNet.Numerics.LinearAlgebra.Double.Matrix],
        statics: {
            methods: {
                /**
                 * Create a new diagonal matrix as a copy of the given other matrix.
                 This new matrix will be independent from the other matrix.
                 The matrix to copy from must be diagonal as well.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}                 matrix
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix}
                 */
                OfMatrix: function (matrix) {
                    return new MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(System.Double).OfMatrix(matrix.Storage));
                },
                /**
                 * Create a new diagonal matrix as a copy of the given two-dimensional array.
                 This new matrix will be independent from the provided array.
                 The array to copy from must be diagonal as well.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
                 * @param   {Array.<number>}                                          array
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix}
                 */
                OfArray: function (array) {
                    return new MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(System.Double).OfArray(array));
                },
                /**
                 * Create a new diagonal matrix and initialize each diagonal value from the provided indexed enumerable.
                 Keys must be provided at most once, zero is assumed if a key is omitted.
                 This new matrix will be independent from the enumerable.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
                 * @param   {number}                                                  rows        
                 * @param   {number}                                                  columns     
                 * @param   {System.Collections.Generic.IEnumerable$1}                diagonal
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix}
                 */
                OfIndexedDiagonal: function (rows, columns, diagonal) {
                    return new MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(System.Double).OfIndexedEnumerable(rows, columns, diagonal));
                },
                /**
                 * Create a new diagonal matrix and initialize each diagonal value from the provided enumerable.
                 This new matrix will be independent from the enumerable.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
                 * @param   {number}                                                  rows        
                 * @param   {number}                                                  columns     
                 * @param   {System.Collections.Generic.IEnumerable$1}                diagonal
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix}
                 */
                OfDiagonal: function (rows, columns, diagonal) {
                    return new MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(System.Double).OfEnumerable(rows, columns, diagonal));
                },
                /**
                 * Create a new diagonal matrix and initialize each diagonal value using the provided init function.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
                 * @param   {number}                                                  rows       
                 * @param   {number}                                                  columns    
                 * @param   {System.Func}                                             init
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix}
                 */
                Create: function (rows, columns, init) {
                    return new MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(System.Double).OfInit(rows, columns, init));
                },
                /**
                 * Create a new square sparse identity matrix where each diagonal value is set to One.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
                 * @param   {number}                                                  order
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix}
                 */
                CreateIdentity: function (order) {
                    return new MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(System.Double).OfValue(order, order, MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double).One));
                }
            }
        },
        fields: {
            /**
             * Gets the matrix's data.
             *
             * @instance
             * @private
             * @readonly
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @type Array.<number>
             */
            _data: null
        },
        ctors: {
            /**
             * Create a new diagonal matrix straight from an initialized matrix storage instance.
             The storage is used directly without copying.
             Intended for advanced scenarios where you're working directly with
             storage for performance or interop reasons.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @param   {MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1}    storage
             * @return  {void}
             */
            ctor: function (storage) {
                this.$initialize();
                MathNet.Numerics.LinearAlgebra.Double.Matrix.ctor.call(this, storage);
                this._data = storage.Data;
            },
            /**
             * Create a new square diagonal matrix with the given number of rows and columns.
             All cells of the matrix will be initialized to zero.
             Zero-length matrices are not supported.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @throws If the order is less than one.
             * @param   {number}    order
             * @return  {void}
             */
            $ctor1: function (order) {
                MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.ctor.call(this, new (MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(System.Double)).ctor(order, order));
            },
            /**
             * Create a new diagonal matrix with the given number of rows and columns.
             All cells of the matrix will be initialized to zero.
             Zero-length matrices are not supported.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @throws If the row or column count is less than one.
             * @param   {number}    rows       
             * @param   {number}    columns
             * @return  {void}
             */
            $ctor2: function (rows, columns) {
                MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.ctor.call(this, new (MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(System.Double)).ctor(rows, columns));
            },
            /**
             * Create a new diagonal matrix with the given number of rows and columns.
             All diagonal cells of the matrix will be initialized to the provided value, all non-diagonal ones to zero.
             Zero-length matrices are not supported.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @throws If the row or column count is less than one.
             * @param   {number}    rows             
             * @param   {number}    columns          
             * @param   {number}    diagonalValue
             * @return  {void}
             */
            $ctor3: function (rows, columns, diagonalValue) {
                MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.$ctor2.call(this, rows, columns);
                for (var i = 0; i < this._data.length; i = (i + 1) | 0) {
                    this._data[System.Array.index(i, this._data)] = diagonalValue;
                }
            },
            /**
             * Create a new diagonal matrix with the given number of rows and columns directly binding to a raw array.
             The array is assumed to contain the diagonal elements only and is used directly without copying.
             Very efficient, but changes to the array and the matrix will affect each other.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @param   {number}            rows               
             * @param   {number}            columns            
             * @param   {Array.<number>}    diagonalStorage
             * @return  {void}
             */
            $ctor4: function (rows, columns, diagonalStorage) {
                MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.ctor.call(this, new (MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(System.Double)).$ctor1(rows, columns, diagonalStorage));
            }
        },
        methods: {
            /**
             * Create a new diagonal matrix with diagonal values sampled from the provided random distribution.
             * Negate each element of this matrix and place the results into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The result of the negation.
             * @return  {void}
             */
            DoNegate: function (result) {
                var diagResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix);
                if (diagResult != null) {
                    this.Map$1(function (x) {
                        return -x;
                    }, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                    return;
                }

                result.Clear();
                for (var i = 0; i < this._data.length; i = (i + 1) | 0) {
                    result.At$1(i, i, -this._data[System.Array.index(i, this._data)]);
                }
            },
            /**
             * Adds another matrix to this matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @throws If the two matrices don't have the same dimensions.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix to add to this matrix.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result of the addition.
             * @return  {void}
             */
            DoAdd$1: function (other, result) {
                var diagOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix);
                var diagResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix);
                if (diagOther != null && diagResult != null) {
                    this.Map2$1(function (x, y) {
                        return x + y;
                    }, other, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                    return;
                }

                other.CopyTo(result);
                for (var i = 0; i < this._data.length; i = (i + 1) | 0) {
                    result.At$1(i, i, result.At(i, i) + this._data[System.Array.index(i, this._data)]);
                }
            },
            /**
             * Subtracts another matrix from this matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @throws If the two matrices don't have the same dimensions.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix to subtract.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result of the subtraction.
             * @return  {void}
             */
            DoSubtract$1: function (other, result) {
                var diagOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix);
                var diagResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix);
                if (diagOther != null && diagResult != null) {
                    this.Map2$1(function (x, y) {
                        return x - y;
                    }, other, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                    return;
                }

                other.Negate$1(result);
                for (var i = 0; i < this._data.length; i = (i + 1) | 0) {
                    result.At$1(i, i, result.At(i, i) + this._data[System.Array.index(i, this._data)]);
                }
            },
            /**
             * Multiplies each element of the matrix by a scalar and places results into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @throws If the result matrix's dimensions are not the same as this matrix.
             * @param   {number}                                     scalar    The scalar to multiply the matrix with.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result of the multiplication.
             * @return  {void}
             */
            DoMultiply: function (scalar, result) {
                if (scalar === 0.0) {
                    result.Clear();
                    return;
                }

                if (scalar === 1.0) {
                    this.CopyTo(result);
                    return;
                }

                var diagResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix);
                if (diagResult == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Matrix.prototype.DoMultiply.call(this, scalar, result);
                } else {
                    var I = this.m_builder$1.Dense$1(this.ColumnCount, this.RowCount);

                    for (var x = 0; x < this.ColumnCount; x = (x + 1) | 0) {
                        for (var y = 0; y < this.RowCount; y = (y + 1) | 0) {
                            I.setItem(y, x, this.getItem(y, x) * scalar);
                        }
                    }
                    result = I;
                }
            },
            /**
             * Multiplies this matrix with a vector and places the results into the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    rightSide    The vector to multiply with.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result       The result of the multiplication.
             * @return  {void}
             */
            DoMultiply$2: function (rightSide, result) {
                var d = Math.min(this.ColumnCount, this.RowCount);
                if (d < this.RowCount) {
                    result.ClearSubVector(this.ColumnCount, ((this.RowCount - this.ColumnCount) | 0));
                }

                if (d === this.ColumnCount) {
                    var denseOther = Bridge.as(rightSide.Storage, MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(System.Double));
                    var denseResult = Bridge.as(result.Storage, MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(System.Double));
                    if (denseOther != null && denseResult != null) {
                        for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                            var s = 0.0;
                            for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                                s += this.At(i, j) * rightSide.getItem(j);
                            }
                            result.setItem(i, s);
                        }
                        return;
                    }
                }

                for (var i1 = 0; i1 < d; i1 = (i1 + 1) | 0) {
                    result.At$1(i1, this._data[System.Array.index(i1, this._data)] * rightSide.At(i1));
                }
            },
            /**
             * Multiplies this matrix with another matrix and places the results into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix to multiply with.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The result of the multiplication.
             * @return  {void}
             */
            DoMultiply$1: function (other, result) {
                var diagonalOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix);
                var diagonalResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix);
                if (diagonalOther != null && diagonalResult != null) {
                    var thisDataCopy = System.Array.init(diagonalResult._data.length, 0, System.Double);
                    var otherDataCopy = System.Array.init(diagonalResult._data.length, 0, System.Double);
                    System.Array.copy(this._data, 0, thisDataCopy, 0, (diagonalResult._data.length > this._data.length) ? this._data.length : diagonalResult._data.length);
                    System.Array.copy(diagonalOther._data, 0, otherDataCopy, 0, (diagonalResult._data.length > diagonalOther._data.length) ? diagonalOther._data.length : diagonalResult._data.length);
                    for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                        for (var j = 0; j < other.ColumnCount; j = (j + 1) | 0) {
                            var s = 0.0;
                            for (var k = 0; k < this.ColumnCount; k = (k + 1) | 0) {
                                s += this.At(i, k) * other.At(k, j);
                            }
                            result.At$1(i, j, s);
                        }
                    }
                    return;
                }

                var denseOther = Bridge.as(other.Storage, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(System.Double));
                if (denseOther != null) {
                    var dense = denseOther.Data;
                    var diagonal = this._data;
                    var d = Math.min(denseOther.RowCount, this.RowCount);
                    if (d < this.RowCount) {
                        result.ClearSubMatrix(denseOther.RowCount, ((this.RowCount - denseOther.RowCount) | 0), 0, denseOther.ColumnCount);
                    }
                    var index = 0;
                    for (var i1 = 0; i1 < denseOther.ColumnCount; i1 = (i1 + 1) | 0) {
                        for (var j1 = 0; j1 < d; j1 = (j1 + 1) | 0) {
                            result.At$1(j1, i1, dense[System.Array.index(index, dense)] * diagonal[System.Array.index(j1, diagonal)]);
                            index = (index + 1) | 0;
                        }
                        index = (index + (((denseOther.RowCount - d) | 0))) | 0;
                    }
                    return;
                }

                if (this.ColumnCount === this.RowCount) {
                    other.Storage.MapIndexedTo(System.Double, result.Storage, Bridge.fn.bind(this, function (i2, j2, x) {
                        return x * this._data[System.Array.index(i2, this._data)];
                    }), MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip, MathNet.Numerics.LinearAlgebra.ExistingData.Clear);
                } else {
                    result.Clear();
                    other.Storage.MapSubMatrixIndexedTo(System.Double, result.Storage, Bridge.fn.bind(this, function (i2, j2, x) {
                        return x * this._data[System.Array.index(i2, this._data)];
                    }), 0, 0, other.RowCount, 0, 0, other.ColumnCount, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                }
            },
            /**
             * Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix to multiply with.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The result of the multiplication.
             * @return  {void}
             */
            DoTransposeAndMultiply: function (other, result) {
                var diagonalOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix);
                var diagonalResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix);
                if (diagonalOther != null && diagonalResult != null) {
                    var thisDataCopy = System.Array.init(diagonalResult._data.length, 0, System.Double);
                    var otherDataCopy = System.Array.init(diagonalResult._data.length, 0, System.Double);
                    System.Array.copy(this._data, 0, thisDataCopy, 0, (diagonalResult._data.length > this._data.length) ? this._data.length : diagonalResult._data.length);
                    System.Array.copy(diagonalOther._data, 0, otherDataCopy, 0, (diagonalResult._data.length > diagonalOther._data.length) ? diagonalOther._data.length : diagonalResult._data.length);
                    for (var j = 0; j < other.RowCount; j = (j + 1) | 0) {
                        for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                            var s = 0.0;
                            for (var k = 0; k < this.ColumnCount; k = (k + 1) | 0) {
                                s += this.At(i, k) * other.At(j, k);
                            }
                            result.At$1(i, j, s);
                        }
                    }
                    return;
                }

                var denseOther = Bridge.as(other.Storage, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(System.Double));
                if (denseOther != null) {
                    var dense = denseOther.Data;
                    var diagonal = this._data;
                    var d = Math.min(denseOther.ColumnCount, this.RowCount);
                    if (d < this.RowCount) {
                        result.ClearSubMatrix(denseOther.ColumnCount, ((this.RowCount - denseOther.ColumnCount) | 0), 0, denseOther.RowCount);
                    }
                    var index = 0;
                    for (var j1 = 0; j1 < d; j1 = (j1 + 1) | 0) {
                        for (var i1 = 0; i1 < denseOther.RowCount; i1 = (i1 + 1) | 0) {
                            result.At$1(j1, i1, dense[System.Array.index(index, dense)] * diagonal[System.Array.index(j1, diagonal)]);
                            index = (index + 1) | 0;
                        }
                    }
                    return;
                }

                MathNet.Numerics.LinearAlgebra.Double.Matrix.prototype.DoTransposeAndMultiply.call(this, other, result);
            },
            /**
             * Multiplies the transpose of this matrix with another matrix and places the results into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix to multiply with.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The result of the multiplication.
             * @return  {void}
             */
            DoTransposeThisAndMultiply: function (other, result) {
                var diagonalOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix);
                var diagonalResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix);
                if (diagonalOther != null && diagonalResult != null) {
                    var thisDataCopy = System.Array.init(diagonalResult._data.length, 0, System.Double);
                    var otherDataCopy = System.Array.init(diagonalResult._data.length, 0, System.Double);
                    System.Array.copy(this._data, 0, thisDataCopy, 0, (diagonalResult._data.length > this._data.length) ? this._data.length : diagonalResult._data.length);
                    System.Array.copy(diagonalOther._data, 0, otherDataCopy, 0, (diagonalResult._data.length > diagonalOther._data.length) ? diagonalOther._data.length : diagonalResult._data.length);
                    for (var j = 0; j < other.ColumnCount; j = (j + 1) | 0) {
                        for (var i = 0; i < this.ColumnCount; i = (i + 1) | 0) {
                            var s = 0.0;
                            for (var k = 0; k < this.RowCount; k = (k + 1) | 0) {
                                s += this.At(k, i) * other.At(k, j);
                            }
                            result.At$1(i, j, s);
                        }
                    }
                    return;
                }

                var denseOther = Bridge.as(other.Storage, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(System.Double));
                if (denseOther != null) {
                    var dense = denseOther.Data;
                    var diagonal = this._data;
                    var d = Math.min(denseOther.RowCount, this.ColumnCount);
                    if (d < this.ColumnCount) {
                        result.ClearSubMatrix(denseOther.RowCount, ((this.ColumnCount - denseOther.RowCount) | 0), 0, denseOther.ColumnCount);
                    }
                    var index = 0;
                    for (var i1 = 0; i1 < denseOther.ColumnCount; i1 = (i1 + 1) | 0) {
                        for (var j1 = 0; j1 < d; j1 = (j1 + 1) | 0) {
                            result.At$1(j1, i1, dense[System.Array.index(index, dense)] * diagonal[System.Array.index(j1, diagonal)]);
                            index = (index + 1) | 0;
                        }
                        index = (index + (((denseOther.RowCount - d) | 0))) | 0;
                    }
                    return;
                }

                if (this.ColumnCount === this.RowCount) {
                    other.Storage.MapIndexedTo(System.Double, result.Storage, Bridge.fn.bind(this, function (i2, j2, x) {
                        return x * this._data[System.Array.index(i2, this._data)];
                    }), MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip, MathNet.Numerics.LinearAlgebra.ExistingData.Clear);
                } else {
                    result.Clear();
                    other.Storage.MapSubMatrixIndexedTo(System.Double, result.Storage, Bridge.fn.bind(this, function (i2, j2, x) {
                        return x * this._data[System.Array.index(i2, this._data)];
                    }), 0, 0, other.RowCount, 0, 0, other.ColumnCount, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                }
            },
            /**
             * Multiplies the transpose of this matrix with a vector and places the results into the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    rightSide    The vector to multiply with.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result       The result of the multiplication.
             * @return  {void}
             */
            DoTransposeThisAndMultiply$1: function (rightSide, result) {
                var d = Math.min(this.ColumnCount, this.RowCount);
                if (d < this.ColumnCount) {
                    result.ClearSubVector(this.RowCount, ((this.ColumnCount - this.RowCount) | 0));
                }

                if (d === this.RowCount) {
                    var denseOther = Bridge.as(rightSide.Storage, MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(System.Double));
                    var denseResult = Bridge.as(result.Storage, MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage$1(System.Double));
                    if (denseOther != null && denseResult != null) {
                        for (var j = 0; j < this.ColumnCount; j = (j + 1) | 0) {
                            var s = 0.0;
                            for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                                s += this.At(i, j) * rightSide.getItem(i);
                            }
                            result.setItem(j, s);
                        }
                        return;
                    }
                }

                for (var i1 = 0; i1 < d; i1 = (i1 + 1) | 0) {
                    result.At$1(i1, this._data[System.Array.index(i1, this._data)] * rightSide.At(i1));
                }
            },
            /**
             * Divides each element of the matrix by a scalar and places results into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @param   {number}                                     divisor    The scalar to divide the matrix with.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result     The matrix to store the result of the division.
             * @return  {void}
             */
            DoDivide: function (divisor, result) {
                if (divisor === 1.0) {
                    this.CopyTo(result);
                    return;
                }

                var diagResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix);
                if (diagResult != null) {
                    this.Map$1(function (x) {
                        return x / divisor;
                    }, result, divisor === 0.0 ? MathNet.Numerics.LinearAlgebra.Zeros.Include : MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                    return;
                }

                result.Clear();
                for (var i = 0; i < this._data.length; i = (i + 1) | 0) {
                    result.At$1(i, i, this._data[System.Array.index(i, this._data)] / divisor);
                }
            },
            /**
             * Divides a scalar by each element of the matrix and stores the result in the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @param   {number}                                     dividend    The scalar to add.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result      The matrix to store the result of the division.
             * @return  {void}
             */
            DoDivideByThis: function (dividend, result) {
                var diagResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix);
                if (diagResult != null) {
                    var resultData = diagResult._data;

                    for (var i = 0; i < this._data.length; i = (i + 1) | 0) {
                        resultData[System.Array.index(i, resultData)] = dividend / this._data[System.Array.index(i, this._data)];
                    }

                    return;
                }

                result.Clear();
                for (var i1 = 0; i1 < this._data.length; i1 = (i1 + 1) | 0) {
                    result.At$1(i1, i1, dividend / this._data[System.Array.index(i1, this._data)]);
                }
            },
            /**
             * Computes the determinant of this matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @return  {number}        The determinant of this matrix.
             */
            Determinant: function () {
                if (this.RowCount !== this.ColumnCount) {
                    throw new System.ArgumentException.$ctor1("Resources.ArgumentMatrixSquare");
                }

                return System.Linq.Enumerable.from(this._data, System.Double).aggregate(1.0, function (current, t) {
                        return current * t;
                    });
            },
            /**
             * Returns the elements of the diagonal in a {@link }.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @return  {MathNet.Numerics.LinearAlgebra.Vector$1}        The elements of the diagonal.
             */
            Diagonal: function () {
                return new MathNet.Numerics.LinearAlgebra.Double.DenseVector.$ctor1(this._data).Clone();
            },
            /**
             * Copies the values of the given array to the diagonal.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @throws If the length of <b /> does not
             equal Min(Rows, Columns).
             * @param   {Array.<number>}    source    The array to copy the values from. The length of the vector should be
             Min(Rows, Columns).
             * @return  {void}
             */
            SetDiagonal: function (source) {
                if (source.length !== this._data.length) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentArraysSameLength", "source");
                }
                var m = new MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.$ctor2(source.length, source.length);



                System.Array.copy(source, 0, this._data, 0, source.length);
            },
            /**
             * Copies the values of the given {@link } to the diagonal.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @throws If the length of <b /> does not
             equal Min(Rows, Columns).
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    source    The vector to copy the values from. The length of the vector should be
             Min(Rows, Columns).
             * @return  {void}
             */
            SetDiagonal$1: function (source) {
                var denseSource = Bridge.as(source, MathNet.Numerics.LinearAlgebra.Double.DenseVector);
                if (denseSource == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Matrix.prototype.SetDiagonal$1.call(this, source);
                    return;
                }

                if (this._data.length !== denseSource.Values.length) {
                    throw new System.ArgumentException.$ctor3("Resources.ArgumentVectorsSameLength", "source");
                }

                System.Array.copy(denseSource.Values, 0, this._data, 0, denseSource.Values.length);
            },
            /**
             * Calculates the induced L1 norm of this matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @return  {number}        The maximum absolute column sum of the matrix.
             */
            L1Norm: function () {
                return System.Linq.Enumerable.from(this._data, System.Double).aggregate(0.0, function (current, t) {
                        return Math.max(current, Math.abs(t));
                    });
            },
            /**
             * Calculates the induced L2 norm of the matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @return  {number}        The largest singular value of the matrix.
             */
            L2Norm: function () {
                return System.Linq.Enumerable.from(this._data, System.Double).aggregate(0.0, function (current, t) {
                        return Math.max(current, Math.abs(t));
                    });
            },
            /**
             * Calculates the induced infinity norm of this matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @return  {number}        The maximum absolute row sum of the matrix.
             */
            InfinityNorm: function () {
                return this.L1Norm();
            },
            /**
             * Calculates the entry-wise Frobenius norm of this matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @return  {number}        The square root of the sum of the squared values.
             */
            FrobeniusNorm: function () {
                return Math.sqrt(System.Linq.Enumerable.from(this._data, System.Double).sum(function (t) {
                        return t * t;
                    }));
            },
            /**
             * Calculates the condition number of this matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @return  {number}        The condition number of the matrix.
             */
            ConditionNumber: function () {
                var $t;
                var maxSv = Number.NEGATIVE_INFINITY;
                var minSv = Number.POSITIVE_INFINITY;
                $t = Bridge.getEnumerator(this._data);
                try {
                    while ($t.moveNext()) {
                        var t = $t.Current;
                        maxSv = Math.max(maxSv, Math.abs(t));
                        minSv = Math.min(minSv, Math.abs(t));
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                return maxSv / minSv;
            },
            /**
             * Computes the inverse of this matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @throws If {@link ArgumentException} is not a square matrix.
             * @throws If {@link ArgumentException} is singular.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}        The inverse of this matrix.
             */
            Inverse: function () {
                if (this.RowCount !== this.ColumnCount) {
                    throw new System.ArgumentException.$ctor1("Resources.ArgumentMatrixSquare");
                }

                var inverse = Bridge.cast(this.Clone(), MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix);
                for (var i = 0; i < this._data.length; i = (i + 1) | 0) {
                    if (this._data[System.Array.index(i, this._data)] !== 0.0) {
                        inverse._data[System.Array.index(i, inverse._data)] = 1.0 / this._data[System.Array.index(i, this._data)];
                    } else {
                        throw new System.ArgumentException.$ctor1("Resources.ArgumentMatrixNotSingular");
                    }
                }

                return inverse;
            },
            /**
             * Returns a new matrix containing the lower triangle of this matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}        The lower triangle of this matrix.
             */
            LowerTriangle: function () {
                return this.Clone();
            },
            /**
             * Puts the lower triangle of this matrix into the result matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @throws If the result matrix's dimensions are not the same as this matrix.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    Where to store the lower triangle.
             * @return  {void}
             */
            LowerTriangle$1: function (result) {
                if (result.RowCount !== this.RowCount || result.ColumnCount !== this.ColumnCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double).DimensionsDontMatch$2(System.ArgumentException, this, result, "result");
                }

                if (Bridge.referenceEquals(this, result)) {
                    return;
                }

                result.Clear();
                for (var i = 0; i < this._data.length; i = (i + 1) | 0) {
                    result.At$1(i, i, this._data[System.Array.index(i, this._data)]);
                }
            },
            /**
             * Returns a new matrix containing the lower triangle of this matrix. The new matrix
             does not contain the diagonal elements of this matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}        The lower triangle of this matrix.
             */
            StrictlyLowerTriangle: function () {
                return new MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.$ctor2(this.RowCount, this.ColumnCount);
            },
            /**
             * Puts the strictly lower triangle of this matrix into the result matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @throws If the result matrix's dimensions are not the same as this matrix.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    Where to store the lower triangle.
             * @return  {void}
             */
            StrictlyLowerTriangle$1: function (result) {
                if (result.RowCount !== this.RowCount || result.ColumnCount !== this.ColumnCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double).DimensionsDontMatch$2(System.ArgumentException, this, result, "result");
                }

                result.Clear();
            },
            /**
             * Returns a new matrix containing the upper triangle of this matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}        The upper triangle of this matrix.
             */
            UpperTriangle: function () {
                return this.Clone();
            },
            /**
             * Puts the upper triangle of this matrix into the result matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @throws If the result matrix's dimensions are not the same as this matrix.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    Where to store the lower triangle.
             * @return  {void}
             */
            UpperTriangle$1: function (result) {
                if (result.RowCount !== this.RowCount || result.ColumnCount !== this.ColumnCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double).DimensionsDontMatch$2(System.ArgumentException, this, result, "result");
                }

                result.Clear();
                for (var i = 0; i < this._data.length; i = (i + 1) | 0) {
                    result.At$1(i, i, this._data[System.Array.index(i, this._data)]);
                }
            },
            /**
             * Returns a new matrix containing the upper triangle of this matrix. The new matrix
             does not contain the diagonal elements of this matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}        The upper triangle of this matrix.
             */
            StrictlyUpperTriangle: function () {
                return new MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.$ctor2(this.RowCount, this.ColumnCount);
            },
            /**
             * Puts the strictly upper triangle of this matrix into the result matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @throws If the result matrix's dimensions are not the same as this matrix.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    Where to store the lower triangle.
             * @return  {void}
             */
            StrictlyUpperTriangle$1: function (result) {
                if (result.RowCount !== this.RowCount || result.ColumnCount !== this.ColumnCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double).DimensionsDontMatch$2(System.ArgumentException, this, result, "result");
                }

                result.Clear();
            },
            /**
             * Creates a matrix that contains the values from the requested sub-matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @throws If:
             * @throws If <b /> or <b />
             is not positive.
             * @param   {number}                                     rowIndex       The row to start copying from.
             * @param   {number}                                     rowCount       The number of rows to copy. Must be positive.
             * @param   {number}                                     columnIndex    The column to start copying from.
             * @param   {number}                                     columnCount    The number of columns to copy. Must be positive.
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}                   The requested sub-matrix.
             */
            SubMatrix: function (rowIndex, rowCount, columnIndex, columnCount) {
                var target = rowIndex === columnIndex ? Bridge.cast(new MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.$ctor2(rowCount, columnCount), MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double)) : new MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.$ctor2(rowCount, columnCount);

                this.Storage.CopySubMatrixTo(target.Storage, rowIndex, 0, rowCount, columnIndex, 0, columnCount, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                return target;
            },
            /**
             * Permute the columns of a matrix according to a permutation.
             * Evaluates whether this matrix is symmetric.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @throws Always thrown
             * @return  {boolean}
             */
            IsSymmetric: function () {
                return true;
            },
            /**
             * Computes the canonical modulus, where the result has the sign of the divisor,
             for the given divisor each element of the matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @param   {number}                                     divisor    The scalar denominator to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result     Matrix to store the results in.
             * @return  {void}
             */
            DoModulus: function (divisor, result) {
                var diagonalResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix);
                if (diagonalResult == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Matrix.prototype.DoModulus.call(this, divisor, result);
                    return;
                }


                var r = diagonalResult._data;
                for (var i = 0; i < this._data.length; i = (i + 1) | 0) {
                    r[System.Array.index(i, r)] = MathNet.Numerics.Euclid.Modulus(this._data[System.Array.index(i, this._data)], divisor);
                }

            },
            /**
             * Computes the canonical modulus, where the result has the sign of the divisor,
             for the given dividend for each element of the matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @param   {number}                                     dividend    The scalar numerator to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result      A vector to store the results in.
             * @return  {void}
             */
            DoModulusByThis: function (dividend, result) {
                var diagonalResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix);
                if (diagonalResult == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Matrix.prototype.DoModulusByThis.call(this, dividend, result);
                    return;
                }


                var r = diagonalResult._data;
                for (var i = 0; i < this._data.length; i = (i + 1) | 0) {
                    r[System.Array.index(i, r)] = MathNet.Numerics.Euclid.Modulus(dividend, this._data[System.Array.index(i, this._data)]);
                }

            },
            /**
             * Computes the remainder (% operator), where the result has the sign of the dividend,
             for the given divisor each element of the matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @param   {number}                                     divisor    The scalar denominator to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result     Matrix to store the results in.
             * @return  {void}
             */
            DoRemainder: function (divisor, result) {
                var diagonalResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix);
                if (diagonalResult == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Matrix.prototype.DoRemainder.call(this, divisor, result);
                    return;
                }


                var r = diagonalResult._data;
                for (var i = 0; i < this._data.length; i = (i + 1) | 0) {
                    r[System.Array.index(i, r)] = this._data[System.Array.index(i, this._data)] % divisor;
                }

            },
            /**
             * Computes the remainder (% operator), where the result has the sign of the dividend,
             for the given dividend for each element of the matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
             * @param   {number}                                     dividend    The scalar numerator to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result      A vector to store the results in.
             * @return  {void}
             */
            DoRemainderByThis: function (dividend, result) {
                var diagonalResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix);
                if (diagonalResult == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Matrix.prototype.DoRemainderByThis.call(this, dividend, result);
                    return;
                }


                var r = diagonalResult._data;
                for (var i = 0; i < this._data.length; i = (i + 1) | 0) {
                    r[System.Array.index(i, r)] = dividend % this._data[System.Array.index(i, this._data)];
                }

            },
            LU: function () {
                throw new System.NotImplementedException.ctor();
            }
        }
    });

    /** @namespace MathNet.Numerics.LinearAlgebra.Double.Factorization */

    /**
     * <p>A class which encapsulates the functionality of an LU factorization.</p><p>For a matrix A, the LU factorization is a pair of lower triangular matrix L and
     upper triangular matrix U so that A = L*U.</p><p>In the Math.Net implementation we also store a set of pivot elements for increased
     numerical stability. The pivot elements encode a permutation matrix P such that P*A = L*U.</p>
     *
     * @abstract
     * @class MathNet.Numerics.LinearAlgebra.Double.Factorization.LU
     * @augments MathNet.Numerics.LinearAlgebra.Factorization.LU$1
     */
    Bridge.define("MathNet.Numerics.LinearAlgebra.Double.Factorization.LU", {
        inherits: [MathNet.Numerics.LinearAlgebra.Factorization.LU$1(System.Double)],
        props: {
            /**
             * Gets the determinant of the matrix for which the LU factorization was computed.
             *
             * @instance
             * @public
             * @override
             * @readonly
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Factorization.LU
             * @function Determinant
             * @type number
             */
            Determinant: {
                get: function () {
                    var det = 1.0;
                    for (var j = 0; j < this.Factors.RowCount; j = (j + 1) | 0) {
                        if (this.Pivots[System.Array.index(j, this.Pivots)] !== j) {
                            det *= -this.Factors.At(j, j);
                        } else {
                            det *= this.Factors.At(j, j);
                        }
                    }

                    return det;
                }
            }
        },
        ctors: {
            ctor: function (factors, pivots) {
                this.$initialize();
                MathNet.Numerics.LinearAlgebra.Factorization.LU$1(System.Double).ctor.call(this, factors, pivots);
            }
        }
    });

    /**
     * <p>A class which encapsulates the functionality of the singular value decomposition (SVD).</p><p>Suppose M is an m-by-n matrix whose entries are real numbers.
     Then there exists a factorization of the form M = UÎ£VT where:
     - U is an m-by-m unitary matrix;
     - Î£ is m-by-n diagonal matrix with nonnegative real numbers on the diagonal;
     - VT denotes transpose of V, an n-by-n unitary matrix;
     Such a factorization is called a singular-value decomposition of M. A common convention is to order the diagonal
     entries Î£(i,i) in descending order. In this case, the diagonal matrix Î£ is uniquely determined
     by M (though the matrices U and V are not). The diagonal entries of Î£ are known as the singular values of M.</p>
     *
     * @abstract
     * @class MathNet.Numerics.LinearAlgebra.Double.Factorization.Svd
     * @augments MathNet.Numerics.LinearAlgebra.Factorization.Svd$1
     */
    Bridge.define("MathNet.Numerics.LinearAlgebra.Double.Factorization.Svd", {
        inherits: [MathNet.Numerics.LinearAlgebra.Factorization.Svd$1(System.Double)],
        props: {
            /**
             * Gets the effective numerical matrix rank.
             *
             * @instance
             * @public
             * @override
             * @readonly
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Factorization.Svd
             * @function Rank
             * @type number
             */
            Rank: {
                get: function () {
                    var tolerance = 4.94065645841247E-324;
                    return System.Linq.Enumerable.from(this.S, System.Double).count(function (t) {
                            return Math.abs(t) > tolerance;
                        });
                }
            },
            /**
             * Gets the two norm of the {@link }.
             *
             * @instance
             * @public
             * @override
             * @readonly
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Factorization.Svd
             * @function L2Norm
             * @type number
             * @return  {[type]}        The 2-norm of the {@link }.
             */
            L2Norm: {
                get: function () {
                    return Math.abs(this.S.getItem(0));
                }
            },
            /**
             * Gets the condition number <b>max(S) / min(S)</b>
             *
             * @instance
             * @public
             * @override
             * @readonly
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Factorization.Svd
             * @function ConditionNumber
             * @type number
             * @return  {[type]}        The condition number.
             */
            ConditionNumber: {
                get: function () {
                    var tmp = (Math.min(this.U.RowCount, this.VT.ColumnCount) - 1) | 0;
                    return Math.abs(this.S.getItem(0)) / Math.abs(this.S.getItem(tmp));
                }
            },
            /**
             * Gets the determinant of the square matrix for which the SVD was computed.
             *
             * @instance
             * @public
             * @override
             * @readonly
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Factorization.Svd
             * @function Determinant
             * @type number
             */
            Determinant: {
                get: function () {
                    var $t;
                    if (this.U.RowCount !== this.VT.ColumnCount) {
                        throw new System.ArgumentException.$ctor1("Resources.ArgumentMatrixSquare");
                    }

                    var det = 1.0;
                    $t = Bridge.getEnumerator(this.S, System.Double);
                    try {
                        while ($t.moveNext()) {
                            var value = $t.Current;
                            det *= value;
                            if (Math.abs(value) <= (Math.pow(10, -5))) {
                                return 0;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    return Math.abs(det);
                }
            }
        },
        ctors: {
            ctor: function (s, u, vt, vectorsComputed) {
                this.$initialize();
                MathNet.Numerics.LinearAlgebra.Factorization.Svd$1(System.Double).ctor.call(this, s, u, vt, vectorsComputed);
            }
        }
    });

    /**
     * A Matrix with sparse storage, intended for very large matrices where most of the cells are zero.
     The underlying storage scheme is 3-array compressed-sparse-row (CSR) Format.
     <a href="http://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_row_.28CSR_or_CRS.29">Wikipedia - CSR</a>.
     *
     * @public
     * @class MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
     * @augments MathNet.Numerics.LinearAlgebra.Double.Matrix
     */
    Bridge.define("MathNet.Numerics.LinearAlgebra.Double.SparseMatrix", {
        inherits: [MathNet.Numerics.LinearAlgebra.Double.Matrix],
        statics: {
            methods: {
                /**
                 * Create a new sparse matrix as a copy of the given other matrix.
                 This new matrix will be independent from the other matrix.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}               matrix
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}
                 */
                OfMatrix: function (matrix) {
                    return new MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(System.Double).OfMatrix(matrix.Storage));
                },
                /**
                 * Create a new sparse matrix as a copy of the given two-dimensional array.
                 This new matrix will be independent from the provided array.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @param   {Array.<number>}                                        array
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}
                 */
                OfArray: function (array) {
                    return new MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(System.Double).OfArray(array));
                },
                /**
                 * Create a new sparse matrix as a copy of the given indexed enumerable.
                 Keys must be provided at most once, zero is assumed if a key is omitted.
                 This new matrix will be independent from the enumerable.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @param   {number}                                                rows          
                 * @param   {number}                                                columns       
                 * @param   {System.Collections.Generic.IEnumerable$1}              enumerable
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}
                 */
                OfIndexed: function (rows, columns, enumerable) {
                    return new MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(System.Double).OfIndexedEnumerable(rows, columns, enumerable));
                },
                /**
                 * Create a new sparse matrix as a copy of the given enumerable.
                 The enumerable is assumed to be in row-major order (row by row).
                 This new matrix will be independent from the enumerable.
                 A new memory block will be allocated for storing the vector.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @param   {number}                                                rows        
                 * @param   {number}                                                columns     
                 * @param   {System.Collections.Generic.IEnumerable$1}              rowMajor
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}
                 * @see {@link }
                 */
                OfRowMajor: function (rows, columns, rowMajor) {
                    return new MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(System.Double).OfRowMajorEnumerable(rows, columns, rowMajor));
                },
                /**
                 * Create a new sparse matrix with the given number of rows and columns as a copy of the given array.
                 The array is assumed to be in column-major order (column by column).
                 This new matrix will be independent from the provided array.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @param   {number}                                                rows           
                 * @param   {number}                                                columns        
                 * @param   {System.Collections.Generic.IList$1}                    columnMajor
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}
                 * @see {@link }
                 */
                OfColumnMajor: function (rows, columns, columnMajor) {
                    return new MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(System.Double).OfColumnMajorList(rows, columns, columnMajor));
                },
                /**
                 * Create a new sparse matrix as a copy of the given enumerable of enumerable columns.
                 Each enumerable in the master enumerable specifies a column.
                 This new matrix will be independent from the enumerables.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @param   {System.Collections.Generic.IEnumerable$1}              data
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}
                 */
                OfColumns: function (data) {
                    return MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.OfColumnArrays$1(System.Linq.Enumerable.from(data, System.Collections.Generic.IEnumerable$1(System.Double)).select(function (v) {
                            var $t;
                            return ($t = System.Double, System.Linq.Enumerable.from(v, $t).ToArray($t));
                        }).ToArray(System.Array.type(System.Double)));
                },
                /**
                 * Create a new sparse matrix as a copy of the given enumerable of enumerable columns.
                 Each enumerable in the master enumerable specifies a column.
                 This new matrix will be independent from the enumerables.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @param   {number}                                                rows       
                 * @param   {number}                                                columns    
                 * @param   {System.Collections.Generic.IEnumerable$1}              data
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}
                 */
                OfColumns$1: function (rows, columns, data) {
                    return new MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(System.Double).OfColumnEnumerables(rows, columns, data));
                },
                /**
                 * Create a new sparse matrix as a copy of the given column arrays.
                 This new matrix will be independent from the arrays.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @param   {Array.<Array.<number>>}                                columns
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}
                 */
                OfColumnArrays$1: function (columns) {
                    if (columns === void 0) { columns = []; }
                    return new MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(System.Double).OfColumnArrays(columns));
                },
                /**
                 * Create a new sparse matrix as a copy of the given column arrays.
                 This new matrix will be independent from the arrays.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @param   {System.Collections.Generic.IEnumerable$1}              columns
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}
                 */
                OfColumnArrays: function (columns) {
                    var $t;
                    return new MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(System.Double).OfColumnArrays((Bridge.as(columns, System.Array.type(System.Array.type(System.Double)))) || ($t = System.Array.type(System.Double), System.Linq.Enumerable.from(columns, $t).ToArray($t))));
                },
                /**
                 * Create a new sparse matrix as a copy of the given column vectors.
                 This new matrix will be independent from the vectors.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @param   {Array.<MathNet.Numerics.LinearAlgebra.Vector$1>}       columns
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}
                 */
                OfColumnVectors: function (columns) {
                    if (columns === void 0) { columns = []; }
                    var storage = System.Array.init(columns.length, null, MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(System.Double));
                    for (var i = 0; i < columns.length; i = (i + 1) | 0) {
                        storage[System.Array.index(i, storage)] = columns[System.Array.index(i, columns)].Storage;
                    }
                    return new MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(System.Double).OfColumnVectors(storage));
                },
                /**
                 * Create a new sparse matrix as a copy of the given column vectors.
                 This new matrix will be independent from the vectors.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @param   {System.Collections.Generic.IEnumerable$1}              columns
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}
                 */
                OfColumnVectors$1: function (columns) {
                    return new MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(System.Double).OfColumnVectors(System.Linq.Enumerable.from(columns, MathNet.Numerics.LinearAlgebra.Vector$1(System.Double)).select(function (c) {
                            return c.Storage;
                        }).ToArray(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(System.Double))));
                },
                /**
                 * Create a new sparse matrix as a copy of the given enumerable of enumerable rows.
                 Each enumerable in the master enumerable specifies a row.
                 This new matrix will be independent from the enumerables.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @param   {System.Collections.Generic.IEnumerable$1}              data
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}
                 */
                OfRows: function (data) {
                    return MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.OfRowArrays$1(System.Linq.Enumerable.from(data, System.Collections.Generic.IEnumerable$1(System.Double)).select(function (v) {
                            var $t;
                            return ($t = System.Double, System.Linq.Enumerable.from(v, $t).ToArray($t));
                        }).ToArray(System.Array.type(System.Double)));
                },
                /**
                 * Create a new sparse matrix as a copy of the given enumerable of enumerable rows.
                 Each enumerable in the master enumerable specifies a row.
                 This new matrix will be independent from the enumerables.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @param   {number}                                                rows       
                 * @param   {number}                                                columns    
                 * @param   {System.Collections.Generic.IEnumerable$1}              data
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}
                 */
                OfRows$1: function (rows, columns, data) {
                    return new MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(System.Double).OfRowEnumerables(rows, columns, data));
                },
                /**
                 * Create a new sparse matrix as a copy of the given row arrays.
                 This new matrix will be independent from the arrays.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @param   {Array.<Array.<number>>}                                rows
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}
                 */
                OfRowArrays$1: function (rows) {
                    if (rows === void 0) { rows = []; }
                    return new MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(System.Double).OfRowArrays(rows));
                },
                /**
                 * Create a new sparse matrix as a copy of the given row arrays.
                 This new matrix will be independent from the arrays.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @param   {System.Collections.Generic.IEnumerable$1}              rows
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}
                 */
                OfRowArrays: function (rows) {
                    var $t;
                    return new MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(System.Double).OfRowArrays((Bridge.as(rows, System.Array.type(System.Array.type(System.Double)))) || ($t = System.Array.type(System.Double), System.Linq.Enumerable.from(rows, $t).ToArray($t))));
                },
                /**
                 * Create a new sparse matrix as a copy of the given row vectors.
                 This new matrix will be independent from the vectors.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @param   {Array.<MathNet.Numerics.LinearAlgebra.Vector$1>}       rows
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}
                 */
                OfRowVectors: function (rows) {
                    if (rows === void 0) { rows = []; }
                    var storage = System.Array.init(rows.length, null, MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(System.Double));
                    for (var i = 0; i < rows.length; i = (i + 1) | 0) {
                        storage[System.Array.index(i, storage)] = rows[System.Array.index(i, rows)].Storage;
                    }
                    return new MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(System.Double).OfRowVectors(storage));
                },
                /**
                 * Create a new sparse matrix as a copy of the given row vectors.
                 This new matrix will be independent from the vectors.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @param   {System.Collections.Generic.IEnumerable$1}              rows
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}
                 */
                OfRowVectors$1: function (rows) {
                    return new MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(System.Double).OfRowVectors(System.Linq.Enumerable.from(rows, MathNet.Numerics.LinearAlgebra.Vector$1(System.Double)).select(function (r) {
                            return r.Storage;
                        }).ToArray(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage$1(System.Double))));
                },
                /**
                 * Create a new sparse matrix with the diagonal as a copy of the given vector.
                 This new matrix will be independent from the vector.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}               diagonal
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}
                 */
                OfDiagonalVector: function (diagonal) {
                    var m = new MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.$ctor2(diagonal.Count, diagonal.Count);
                    m.SetDiagonal$1(diagonal);
                    return m;
                },
                /**
                 * Create a new sparse matrix with the diagonal as a copy of the given vector.
                 This new matrix will be independent from the vector.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @param   {number}                                                rows        
                 * @param   {number}                                                columns     
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}               diagonal
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}
                 */
                OfDiagonalVector$1: function (rows, columns, diagonal) {
                    var m = new MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.$ctor2(rows, columns);
                    m.SetDiagonal$1(diagonal);
                    return m;
                },
                /**
                 * Create a new sparse matrix with the diagonal as a copy of the given array.
                 This new matrix will be independent from the array.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @param   {Array.<number>}                                        diagonal
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}
                 */
                OfDiagonalArray: function (diagonal) {
                    var m = new MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.$ctor2(diagonal.length, diagonal.length);
                    m.SetDiagonal(diagonal);
                    return m;
                },
                /**
                 * Create a new sparse matrix with the diagonal as a copy of the given array.
                 This new matrix will be independent from the array.
                 A new memory block will be allocated for storing the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @param   {number}                                                rows        
                 * @param   {number}                                                columns     
                 * @param   {Array.<number>}                                        diagonal
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}
                 */
                OfDiagonalArray$1: function (rows, columns, diagonal) {
                    var m = new MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.$ctor2(rows, columns);
                    m.SetDiagonal(diagonal);
                    return m;
                },
                /**
                 * Create a new sparse matrix and initialize each value to the same provided value.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @param   {number}                                                rows       
                 * @param   {number}                                                columns    
                 * @param   {number}                                                value
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}
                 */
                Create: function (rows, columns, value) {
                    if (value === 0.0) {
                        return new MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.$ctor2(rows, columns);
                    }
                    return new MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(System.Double).OfValue(rows, columns, value));
                },
                /**
                 * Create a new sparse matrix and initialize each value using the provided init function.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @param   {number}                                                rows       
                 * @param   {number}                                                columns    
                 * @param   {System.Func}                                           init
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}
                 */
                Create$1: function (rows, columns, init) {
                    return new MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(System.Double).OfInit(rows, columns, init));
                },
                /**
                 * Create a new diagonal sparse matrix and initialize each diagonal value to the same provided value.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @param   {number}                                                rows       
                 * @param   {number}                                                columns    
                 * @param   {number}                                                value
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}
                 */
                CreateDiagonal: function (rows, columns, value) {
                    if (value === 0.0) {
                        return new MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.$ctor2(rows, columns);
                    }
                    return new MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(System.Double).OfDiagonalInit(rows, columns, function (i) {
                        return value;
                    }));
                },
                /**
                 * Create a new diagonal sparse matrix and initialize each diagonal value using the provided init function.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @param   {number}                                                rows       
                 * @param   {number}                                                columns    
                 * @param   {System.Func}                                           init
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}
                 */
                CreateDiagonal$1: function (rows, columns, init) {
                    return new MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(System.Double).OfDiagonalInit(rows, columns, init));
                },
                /**
                 * Create a new square sparse identity matrix where each diagonal value is set to One.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @param   {number}                                                order
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}
                 */
                CreateIdentity: function (order) {
                    return new MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(System.Double).OfDiagonalInit(order, order, function (i) {
                        return MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double).One;
                    }));
                }/**
                 * Adds two matrices together and returns the results.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @throws If <b /> and <b /> don't have the same dimensions.
                 * @throws If <b /> or <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}    leftSide     The left matrix to add.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}    rightSide    The right matrix to add.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}                 The result of the addition.
                 */
                ,
                op_Addition: function (leftSide, rightSide) {
                    if (rightSide == null) {
                        throw new System.ArgumentNullException.$ctor1("rightSide");
                    }

                    if (leftSide == null) {
                        throw new System.ArgumentNullException.$ctor1("leftSide");
                    }

                    if (leftSide.RowCount !== rightSide.RowCount || leftSide.ColumnCount !== rightSide.ColumnCount) {
                        throw MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double).DimensionsDontMatch$2(System.ArgumentOutOfRangeException, leftSide, rightSide);
                    }

                    return Bridge.cast(leftSide.Add$1(rightSide), MathNet.Numerics.LinearAlgebra.Double.SparseMatrix);
                }/**
                 * Returns a <strong>Matrix</strong> containing the same values of <b />.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}    rightSide    The matrix to get the values from.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}                 A matrix containing a the same values as <b />.
                 */
                ,
                op_UnaryPlus: function (rightSide) {
                    if (rightSide == null) {
                        throw new System.ArgumentNullException.$ctor1("rightSide");
                    }

                    return Bridge.cast(rightSide.Clone(), MathNet.Numerics.LinearAlgebra.Double.SparseMatrix);
                }/**
                 * Subtracts two matrices together and returns the results.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @throws If <b /> and <b /> don't have the same dimensions.
                 * @throws If <b /> or <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}    leftSide     The left matrix to subtract.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}    rightSide    The right matrix to subtract.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}                 The result of the addition.
                 */
                ,
                op_Subtraction: function (leftSide, rightSide) {
                    if (rightSide == null) {
                        throw new System.ArgumentNullException.$ctor1("rightSide");
                    }

                    if (leftSide == null) {
                        throw new System.ArgumentNullException.$ctor1("leftSide");
                    }

                    if (leftSide.RowCount !== rightSide.RowCount || leftSide.ColumnCount !== rightSide.ColumnCount) {
                        throw MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double).DimensionsDontMatch$2(System.ArgumentException, leftSide, rightSide);
                    }

                    return Bridge.cast(leftSide.Subtract$1(rightSide), MathNet.Numerics.LinearAlgebra.Double.SparseMatrix);
                }/**
                 * Negates each element of the matrix.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}    rightSide    The matrix to negate.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}                 A matrix containing the negated values.
                 */
                ,
                op_UnaryNegation: function (rightSide) {
                    if (rightSide == null) {
                        throw new System.ArgumentNullException.$ctor1("rightSide");
                    }

                    return Bridge.cast(rightSide.Negate(), MathNet.Numerics.LinearAlgebra.Double.SparseMatrix);
                }/**
                 * Multiplies a <strong>Matrix</strong> by a constant and returns the result.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}    leftSide     The matrix to multiply.
                 * @param   {number}                                                rightSide    The constant to multiply the matrix by.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}                 The result of the multiplication.
                 */
                ,
                op_Multiply$1: function (leftSide, rightSide) {
                    if (leftSide == null) {
                        throw new System.ArgumentNullException.$ctor1("leftSide");
                    }

                    return Bridge.cast(leftSide.Multiply(rightSide), MathNet.Numerics.LinearAlgebra.Double.SparseMatrix);
                }/**
                 * Multiplies a <strong>Matrix</strong> by a constant and returns the result.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {number}                                                leftSide     The matrix to multiply.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}    rightSide    The constant to multiply the matrix by.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}                 The result of the multiplication.
                 */
                ,
                op_Multiply$2: function (leftSide, rightSide) {
                    if (rightSide == null) {
                        throw new System.ArgumentNullException.$ctor1("rightSide");
                    }

                    return Bridge.cast(rightSide.Multiply(leftSide), MathNet.Numerics.LinearAlgebra.Double.SparseMatrix);
                }/**
                 * Multiplies two matrices.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @throws If <b /> or <b /> is {@link ArgumentNullException}.
                 * @throws If the dimensions of <b /> or <b /> don't conform.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}    leftSide     The left matrix to multiply.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}    rightSide    The right matrix to multiply.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}                 The result of multiplication.
                 */
                ,
                op_Multiply: function (leftSide, rightSide) {
                    if (leftSide == null) {
                        throw new System.ArgumentNullException.$ctor1("leftSide");
                    }

                    if (rightSide == null) {
                        throw new System.ArgumentNullException.$ctor1("rightSide");
                    }

                    if (leftSide.ColumnCount !== rightSide.RowCount) {
                        throw MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double).DimensionsDontMatch$2(System.ArgumentException, leftSide, rightSide);
                    }

                    return Bridge.cast(leftSide.Multiply$1(rightSide), MathNet.Numerics.LinearAlgebra.Double.SparseMatrix);
                }/**
                 * Multiplies a <strong>Matrix</strong> and a Vector.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @throws If <b /> or <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}    leftSide     The matrix to multiply.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.SparseVector}    rightSide    The vector to multiply.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseVector}                 The result of multiplication.
                 */
                ,
                op_Multiply$3: function (leftSide, rightSide) {
                    if (leftSide == null) {
                        throw new System.ArgumentNullException.$ctor1("leftSide");
                    }

                    return Bridge.cast(leftSide.Multiply$2(rightSide), MathNet.Numerics.LinearAlgebra.Double.SparseVector);
                }/**
                 * Multiplies a Vector and a <strong>Matrix</strong>.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @throws If <b /> or <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.SparseVector}    leftSide     The vector to multiply.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}    rightSide    The matrix to multiply.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseVector}                 The result of multiplication.
                 */
                ,
                op_Multiply$4: function (leftSide, rightSide) {
                    if (rightSide == null) {
                        throw new System.ArgumentNullException.$ctor1("rightSide");
                    }

                    return Bridge.cast(rightSide.LeftMultiply(leftSide), MathNet.Numerics.LinearAlgebra.Double.SparseVector);
                }/**
                 * Multiplies a <strong>Matrix</strong> by a constant and returns the result.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}    leftSide     The matrix to multiply.
                 * @param   {number}                                                rightSide    The constant to multiply the matrix by.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseMatrix}                 The result of the multiplication.
                 */
                ,
                op_Modulus: function (leftSide, rightSide) {
                    if (leftSide == null) {
                        throw new System.ArgumentNullException.$ctor1("leftSide");
                    }

                    return Bridge.cast(leftSide.Remainder(rightSide), MathNet.Numerics.LinearAlgebra.Double.SparseMatrix);
                }
            }
        },
        fields: {
            _storage: null
        },
        props: {
            /**
             * Gets the number of non zero elements in the matrix.
             *
             * @instance
             * @public
             * @readonly
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @function NonZerosCount
             * @type number
             */
            NonZerosCount: {
                get: function () {
                    return this._storage.ValueCount;
                }
            }
        },
        ctors: {
            /**
             * Create a new sparse matrix straight from an initialized matrix storage instance.
             The storage is used directly without copying.
             Intended for advanced scenarios where you're working directly with
             storage for performance or interop reasons.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @param   {MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1}    storage
             * @return  {void}
             */
            ctor: function (storage) {
                this.$initialize();
                MathNet.Numerics.LinearAlgebra.Double.Matrix.ctor.call(this, storage);
                this._storage = storage;
            },
            /**
             * Create a new square sparse matrix with the given number of rows and columns.
             All cells of the matrix will be initialized to zero.
             Zero-length matrices are not supported.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @throws If the order is less than one.
             * @param   {number}    order
             * @return  {void}
             */
            $ctor1: function (order) {
                MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.$ctor2.call(this, order, order);
            },
            /**
             * Create a new sparse matrix with the given number of rows and columns.
             All cells of the matrix will be initialized to zero.
             Zero-length matrices are not supported.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @throws If the row or column count is less than one.
             * @param   {number}    rows       
             * @param   {number}    columns
             * @return  {void}
             */
            $ctor2: function (rows, columns) {
                MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.ctor.call(this, new (MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(System.Double))(rows, columns));
            }
        },
        methods: {
            /**
             * Returns a new matrix containing the lower triangle of this matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}        The lower triangle of this matrix.
             */
            LowerTriangle: function () {
                var result = this.m_builder$1.SameAs$3(System.Double, this);
                this.LowerTriangleImpl(result);
                return result;
            },
            /**
             * Puts the lower triangle of this matrix into the result matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @throws If <b /> is {@link ArgumentNullException}.
             * @throws If the result matrix's dimensions are not the same as this matrix.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    Where to store the lower triangle.
             * @return  {void}
             */
            LowerTriangle$1: function (result) {
                if (result == null) {
                    throw new System.ArgumentNullException.$ctor1("result");
                }

                if (result.RowCount !== this.RowCount || result.ColumnCount !== this.ColumnCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double).DimensionsDontMatch$2(System.ArgumentException, this, result, "result");
                }

                if (Bridge.referenceEquals(this, result)) {
                    var tmp = this.m_builder$1.SameAs$3(System.Double, result);
                    this.LowerTriangle$1(tmp);
                    tmp.CopyTo(result);
                } else {
                    result.Clear();
                    this.LowerTriangleImpl(result);
                }
            },
            /**
             * Puts the lower triangle of this matrix into the result matrix.
             *
             * @instance
             * @private
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    Where to store the lower triangle.
             * @return  {void}
             */
            LowerTriangleImpl: function (result) {
                var rowPointers = this._storage.RowPointers;
                var columnIndices = this._storage.ColumnIndices;
                var values = this._storage.Values;

                for (var row = 0; row < result.RowCount; row = (row + 1) | 0) {
                    var endIndex = rowPointers[System.Array.index(((row + 1) | 0), rowPointers)];
                    for (var j = rowPointers[System.Array.index(row, rowPointers)]; j < endIndex; j = (j + 1) | 0) {
                        if (row >= columnIndices[System.Array.index(j, columnIndices)]) {
                            result.At$1(row, columnIndices[System.Array.index(j, columnIndices)], values[System.Array.index(j, values)]);
                        }
                    }
                }
            },
            /**
             * Returns a new matrix containing the upper triangle of this matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}        The upper triangle of this matrix.
             */
            UpperTriangle: function () {
                var result = this.m_builder$1.SameAs$3(System.Double, this);
                this.UpperTriangleImpl(result);
                return result;
            },
            /**
             * Puts the upper triangle of this matrix into the result matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @throws If <b /> is {@link ArgumentNullException}.
             * @throws If the result matrix's dimensions are not the same as this matrix.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    Where to store the lower triangle.
             * @return  {void}
             */
            UpperTriangle$1: function (result) {
                if (result == null) {
                    throw new System.ArgumentNullException.$ctor1("result");
                }

                if (result.RowCount !== this.RowCount || result.ColumnCount !== this.ColumnCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double).DimensionsDontMatch$2(System.ArgumentException, this, result, "result");
                }

                if (Bridge.referenceEquals(this, result)) {
                    var tmp = this.m_builder$1.SameAs$3(System.Double, result);
                    this.UpperTriangle$1(tmp);
                    tmp.CopyTo(result);
                } else {
                    result.Clear();
                    this.UpperTriangleImpl(result);
                }
            },
            /**
             * Puts the upper triangle of this matrix into the result matrix.
             *
             * @instance
             * @private
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    Where to store the lower triangle.
             * @return  {void}
             */
            UpperTriangleImpl: function (result) {
                var rowPointers = this._storage.RowPointers;
                var columnIndices = this._storage.ColumnIndices;
                var values = this._storage.Values;

                for (var row = 0; row < result.RowCount; row = (row + 1) | 0) {
                    var endIndex = rowPointers[System.Array.index(((row + 1) | 0), rowPointers)];
                    for (var j = rowPointers[System.Array.index(row, rowPointers)]; j < endIndex; j = (j + 1) | 0) {
                        if (row <= columnIndices[System.Array.index(j, columnIndices)]) {
                            result.At$1(row, columnIndices[System.Array.index(j, columnIndices)], values[System.Array.index(j, values)]);
                        }
                    }
                }
            },
            /**
             * Returns a new matrix containing the lower triangle of this matrix. The new matrix
             does not contain the diagonal elements of this matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}        The lower triangle of this matrix.
             */
            StrictlyLowerTriangle: function () {
                var result = this.m_builder$1.SameAs$3(System.Double, this);
                this.StrictlyLowerTriangleImpl(result);
                return result;
            },
            /**
             * Puts the strictly lower triangle of this matrix into the result matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @throws If <b /> is {@link ArgumentNullException}.
             * @throws If the result matrix's dimensions are not the same as this matrix.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    Where to store the lower triangle.
             * @return  {void}
             */
            StrictlyLowerTriangle$1: function (result) {
                if (result == null) {
                    throw new System.ArgumentNullException.$ctor1("result");
                }

                if (result.RowCount !== this.RowCount || result.ColumnCount !== this.ColumnCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double).DimensionsDontMatch$2(System.ArgumentException, this, result, "result");
                }

                if (Bridge.referenceEquals(this, result)) {
                    var tmp = this.m_builder$1.SameAs$3(System.Double, result);
                    this.StrictlyLowerTriangle$1(tmp);
                    tmp.CopyTo(result);
                } else {
                    result.Clear();
                    this.StrictlyLowerTriangleImpl(result);
                }
            },
            /**
             * Puts the strictly lower triangle of this matrix into the result matrix.
             *
             * @instance
             * @private
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    Where to store the lower triangle.
             * @return  {void}
             */
            StrictlyLowerTriangleImpl: function (result) {
                var rowPointers = this._storage.RowPointers;
                var columnIndices = this._storage.ColumnIndices;
                var values = this._storage.Values;

                for (var row = 0; row < result.RowCount; row = (row + 1) | 0) {
                    var endIndex = rowPointers[System.Array.index(((row + 1) | 0), rowPointers)];
                    for (var j = rowPointers[System.Array.index(row, rowPointers)]; j < endIndex; j = (j + 1) | 0) {
                        if (row > columnIndices[System.Array.index(j, columnIndices)]) {
                            result.At$1(row, columnIndices[System.Array.index(j, columnIndices)], values[System.Array.index(j, values)]);
                        }
                    }
                }
            },
            /**
             * Returns a new matrix containing the upper triangle of this matrix. The new matrix
             does not contain the diagonal elements of this matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}        The upper triangle of this matrix.
             */
            StrictlyUpperTriangle: function () {
                var result = this.m_builder$1.SameAs$3(System.Double, this);
                this.StrictlyUpperTriangleImpl(result);
                return result;
            },
            /**
             * Puts the strictly upper triangle of this matrix into the result matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @throws If <b /> is {@link ArgumentNullException}.
             * @throws If the result matrix's dimensions are not the same as this matrix.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    Where to store the lower triangle.
             * @return  {void}
             */
            StrictlyUpperTriangle$1: function (result) {
                if (result == null) {
                    throw new System.ArgumentNullException.$ctor1("result");
                }

                if (result.RowCount !== this.RowCount || result.ColumnCount !== this.ColumnCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double).DimensionsDontMatch$2(System.ArgumentException, this, result, "result");
                }

                if (Bridge.referenceEquals(this, result)) {
                    var tmp = this.m_builder$1.SameAs$3(System.Double, result);
                    this.StrictlyUpperTriangle$1(tmp);
                    tmp.CopyTo(result);
                } else {
                    result.Clear();
                    this.StrictlyUpperTriangleImpl(result);
                }
            },
            /**
             * Puts the strictly upper triangle of this matrix into the result matrix.
             *
             * @instance
             * @private
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    Where to store the lower triangle.
             * @return  {void}
             */
            StrictlyUpperTriangleImpl: function (result) {
                var rowPointers = this._storage.RowPointers;
                var columnIndices = this._storage.ColumnIndices;
                var values = this._storage.Values;

                for (var row = 0; row < result.RowCount; row = (row + 1) | 0) {
                    var endIndex = rowPointers[System.Array.index(((row + 1) | 0), rowPointers)];
                    for (var j = rowPointers[System.Array.index(row, rowPointers)]; j < endIndex; j = (j + 1) | 0) {
                        if (row < columnIndices[System.Array.index(j, columnIndices)]) {
                            result.At$1(row, columnIndices[System.Array.index(j, columnIndices)], values[System.Array.index(j, values)]);
                        }
                    }
                }
            },
            /**
             * Negate each element of this matrix and place the results into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The result of the negation.
             * @return  {void}
             */
            DoNegate: function (result) {
                this.CopyTo(result);
                this.DoMultiply(-1, result);
            },
            /**
             * Calculates the induced infinity norm of this matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @return  {number}        The maximum absolute row sum of the matrix.
             */
            InfinityNorm: function () {
                var rowPointers = this._storage.RowPointers;
                var values = this._storage.Values;
                var norm = 0.0;
                for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                    var startIndex = rowPointers[System.Array.index(i, rowPointers)];
                    var endIndex = rowPointers[System.Array.index(((i + 1) | 0), rowPointers)];

                    if (startIndex === endIndex) {
                        continue;
                    }

                    var s = 0.0;
                    for (var j = startIndex; j < endIndex; j = (j + 1) | 0) {
                        s += Math.abs(values[System.Array.index(j, values)]);
                    }
                    norm = Math.max(norm, s);
                }
                return norm;
            },
            /**
             * Calculates the entry-wise Frobenius norm of this matrix.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @return  {number}        The square root of the sum of the squared values.
             */
            FrobeniusNorm: function () {
                var aat = Bridge.cast((MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double).op_Multiply$2(this, this.Transpose())).Storage, MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage$1(System.Double));
                var norm = 0.0;
                for (var i = 0; i < aat.RowCount; i = (i + 1) | 0) {
                    var startIndex = aat.RowPointers[System.Array.index(i, aat.RowPointers)];
                    var endIndex = aat.RowPointers[System.Array.index(((i + 1) | 0), aat.RowPointers)];

                    if (startIndex === endIndex) {
                        continue;
                    }

                    for (var j = startIndex; j < endIndex; j = (j + 1) | 0) {
                        if (i === aat.ColumnIndices[System.Array.index(j, aat.ColumnIndices)]) {
                            norm += Math.abs(aat.Values[System.Array.index(j, aat.Values)]);
                        }
                    }
                }
                return Math.sqrt(norm);
            },
            /**
             * Adds another matrix to this matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @throws If the other matrix is {@link ArgumentNullException}.
             * @throws If the two matrices don't have the same dimensions.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix to add to this matrix.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result of the addition.
             * @return  {void}
             */
            DoAdd$1: function (other, result) {
                var sparseOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Double.SparseMatrix);
                var sparseResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.SparseMatrix);
                if (sparseOther == null || sparseResult == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Matrix.prototype.DoAdd$1.call(this, other, result);
                    return;
                }

                if (Bridge.referenceEquals(this, other)) {
                    if (!Bridge.referenceEquals(this, result)) {
                        this.CopyTo(result);
                    }

                    this.Map2$1(function (x, y) {
                        return x + y;
                    }, other, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                    return;
                }

                var left;

                if (Bridge.referenceEquals(sparseOther, sparseResult)) {
                    left = this;
                } else if (Bridge.referenceEquals(this, sparseResult)) {
                    left = sparseOther;
                } else {
                    this.CopyTo(sparseResult);
                    left = sparseOther;
                }

                var leftStorage = left._storage;
                for (var i = 0; i < leftStorage.RowCount; i = (i + 1) | 0) {
                    var endIndex = leftStorage.RowPointers[System.Array.index(((i + 1) | 0), leftStorage.RowPointers)];
                    for (var j = leftStorage.RowPointers[System.Array.index(i, leftStorage.RowPointers)]; j < endIndex; j = (j + 1) | 0) {
                        var columnIndex = leftStorage.ColumnIndices[System.Array.index(j, leftStorage.ColumnIndices)];
                        var resVal = leftStorage.Values[System.Array.index(j, leftStorage.Values)] + result.At(i, columnIndex);
                        result.At$1(i, columnIndex, resVal);
                    }
                }
            },
            /**
             * Subtracts another matrix from this matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @throws If the other matrix is {@link ArgumentNullException}.
             * @throws If the two matrices don't have the same dimensions.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix to subtract to this matrix.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result of subtraction.
             * @return  {void}
             */
            DoSubtract$1: function (other, result) {
                var sparseOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Double.SparseMatrix);
                var sparseResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.SparseMatrix);

                if (sparseOther == null || sparseResult == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Matrix.prototype.DoSubtract$1.call(this, other, result);
                    return;
                }

                if (Bridge.referenceEquals(this, other)) {
                    result.Clear();
                    return;
                }

                var otherStorage = sparseOther._storage;

                if (Bridge.referenceEquals(this, sparseResult)) {
                    for (var i = 0; i < otherStorage.RowCount; i = (i + 1) | 0) {
                        var endIndex = otherStorage.RowPointers[System.Array.index(((i + 1) | 0), otherStorage.RowPointers)];
                        for (var j = otherStorage.RowPointers[System.Array.index(i, otherStorage.RowPointers)]; j < endIndex; j = (j + 1) | 0) {
                            var columnIndex = otherStorage.ColumnIndices[System.Array.index(j, otherStorage.ColumnIndices)];
                            var resVal = sparseResult.At(i, columnIndex) - otherStorage.Values[System.Array.index(j, otherStorage.Values)];
                            result.At$1(i, columnIndex, resVal);
                        }
                    }
                } else {
                    if (!Bridge.referenceEquals(sparseOther, sparseResult)) {
                        sparseOther.CopyTo(sparseResult);
                    }

                    sparseResult.Negate$1(sparseResult);

                    var rowPointers = this._storage.RowPointers;
                    var columnIndices = this._storage.ColumnIndices;
                    var values = this._storage.Values;

                    for (var i1 = 0; i1 < this.RowCount; i1 = (i1 + 1) | 0) {
                        var endIndex1 = rowPointers[System.Array.index(((i1 + 1) | 0), rowPointers)];
                        for (var j1 = rowPointers[System.Array.index(i1, rowPointers)]; j1 < endIndex1; j1 = (j1 + 1) | 0) {
                            var columnIndex1 = columnIndices[System.Array.index(j1, columnIndices)];
                            var resVal1 = sparseResult.At(i1, columnIndex1) + values[System.Array.index(j1, values)];
                            result.At$1(i1, columnIndex1, resVal1);
                        }
                    }
                }
            },
            /**
             * Multiplies each element of the matrix by a scalar and places results into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @param   {number}                                     scalar    The scalar to multiply the matrix with.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result of the multiplication.
             * @return  {void}
             */
            DoMultiply: function (scalar, result) {
                if (scalar === 1.0) {
                    this.CopyTo(result);
                    return;
                }

                if (scalar === 0.0 || this.NonZerosCount === 0) {
                    result.Clear();
                    return;
                }

                var sparseResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.SparseMatrix);
                if (sparseResult == null) {
                    result.Clear();

                    var rowPointers = this._storage.RowPointers;
                    var columnIndices = this._storage.ColumnIndices;
                    var values = this._storage.Values;

                    for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                        var start = rowPointers[System.Array.index(row, rowPointers)];
                        var end = rowPointers[System.Array.index(((row + 1) | 0), rowPointers)];

                        if (start === end) {
                            continue;
                        }

                        for (var index = start; index < end; index = (index + 1) | 0) {
                            var column = columnIndices[System.Array.index(index, columnIndices)];
                            result.At$1(row, column, values[System.Array.index(index, values)] * scalar);
                        }
                    }
                } else {
                    if (!Bridge.referenceEquals(this, result)) {
                        this.CopyTo(sparseResult);
                    }

                    this.Map$1(function (x) {
                        return x * scalar;
                    }, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                }
            },
            /**
             * Multiplies this matrix with another matrix and places the results into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix to multiply with.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The result of the multiplication.
             * @return  {void}
             */
            DoMultiply$1: function (other, result) {
                var sparseOther = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Double.SparseMatrix);
                var sparseResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.SparseMatrix);
                if (sparseOther != null && sparseResult != null) {
                    this.DoMultiplySparse(sparseOther, sparseResult);
                    return;
                }

                var diagonalOther = Bridge.as(other.Storage, MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage$1(System.Double));
                if (diagonalOther != null && sparseResult != null) {
                    var diagonal = diagonalOther.Data;
                    if (other.ColumnCount === other.RowCount) {
                        this.Storage.MapIndexedTo(System.Double, result.Storage, function (i, j, x) {
                            return x * diagonal[System.Array.index(j, diagonal)];
                        }, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip, MathNet.Numerics.LinearAlgebra.ExistingData.Clear);
                    } else {
                        result.Storage.Clear();
                        this.Storage.MapSubMatrixIndexedTo(System.Double, result.Storage, function (i, j, x) {
                            return x * diagonal[System.Array.index(j, diagonal)];
                        }, 0, 0, this.RowCount, 0, 0, this.ColumnCount, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip, MathNet.Numerics.LinearAlgebra.ExistingData.AssumeZeros);
                    }
                    return;
                }

                result.Clear();
                var rowPointers = this._storage.RowPointers;
                var columnIndices = this._storage.ColumnIndices;
                var values = this._storage.Values;

                var denseOther = Bridge.as(other.Storage, MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage$1(System.Double));
                if (denseOther != null) {
                    for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                        var startIndex = rowPointers[System.Array.index(row, rowPointers)];
                        var endIndex = rowPointers[System.Array.index(((row + 1) | 0), rowPointers)];

                        if (startIndex === endIndex) {
                            continue;
                        }

                        for (var column = 0; column < other.ColumnCount; column = (column + 1) | 0) {
                            var otherColumnStartPosition = Bridge.Int.mul(column, other.RowCount);
                            var sum = 0.0;
                            for (var index = startIndex; index < endIndex; index = (index + 1) | 0) {
                                sum += values[System.Array.index(index, values)] * denseOther.Data[System.Array.index(((otherColumnStartPosition + columnIndices[System.Array.index(index, columnIndices)]) | 0), denseOther.Data)];
                            }

                            result.At$1(row, column, sum);
                        }
                    }
                    return;
                }

                var columnVector = new MathNet.Numerics.LinearAlgebra.Double.DenseVector.$ctor2(other.RowCount);
                for (var row1 = 0; row1 < this.RowCount; row1 = (row1 + 1) | 0) {
                    var startIndex1 = rowPointers[System.Array.index(row1, rowPointers)];
                    var endIndex1 = rowPointers[System.Array.index(((row1 + 1) | 0), rowPointers)];

                    if (startIndex1 === endIndex1) {
                        continue;
                    }

                    for (var column1 = 0; column1 < other.ColumnCount; column1 = (column1 + 1) | 0) {
                        other.Column$2(column1, columnVector);

                        var sum1 = 0.0;
                        for (var index1 = startIndex1; index1 < endIndex1; index1 = (index1 + 1) | 0) {
                            sum1 += values[System.Array.index(index1, values)] * columnVector.getItem(columnIndices[System.Array.index(index1, columnIndices)]);
                        }

                        result.At$1(row1, column1, sum1);
                    }
                }
            },
            /**
             * Multiplies this matrix with a vector and places the results into the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    rightSide    The vector to multiply with.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result       The result of the multiplication.
             * @return  {void}
             */
            DoMultiply$2: function (rightSide, result) {
                var rowPointers = this._storage.RowPointers;
                var columnIndices = this._storage.ColumnIndices;
                var values = this._storage.Values;

                for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                    var startIndex = rowPointers[System.Array.index(row, rowPointers)];
                    var endIndex = rowPointers[System.Array.index(((row + 1) | 0), rowPointers)];

                    if (startIndex === endIndex) {
                        continue;
                    }

                    var sum = 0.0;
                    for (var index = startIndex; index < endIndex; index = (index + 1) | 0) {
                        sum += values[System.Array.index(index, values)] * rightSide.getItem(columnIndices[System.Array.index(index, columnIndices)]);
                    }

                    result.setItem(row, sum);
                }
            },
            DoMultiplySparse: function (other, result) {
                result.Clear();

                var ax = this._storage.Values;
                var ap = this._storage.RowPointers;
                var ai = this._storage.ColumnIndices;

                var bx = other._storage.Values;
                var bp = other._storage.RowPointers;
                var bi = other._storage.ColumnIndices;

                var rows = this.RowCount;
                var cols = other.ColumnCount;

                var cp = result._storage.RowPointers;

                var marker = System.Array.init(cols, 0, System.Int32);
                for (var ib = 0; ib < cols; ib = (ib + 1) | 0) {
                    marker[System.Array.index(ib, marker)] = -1;
                }

                var count = 0;
                for (var i = 0; i < rows; i = (i + 1) | 0) {
                    for (var j = ap[System.Array.index(i, ap)]; j < ap[System.Array.index(((i + 1) | 0), ap)]; j = (j + 1) | 0) {
                        var a = ai[System.Array.index(j, ai)];
                        for (var k = bp[System.Array.index(a, bp)]; k < bp[System.Array.index(((a + 1) | 0), bp)]; k = (k + 1) | 0) {
                            var b = bi[System.Array.index(k, bi)];
                            if (marker[System.Array.index(b, marker)] !== i) {
                                marker[System.Array.index(b, marker)] = i;
                                count = (count + 1) | 0;
                            }
                        }
                    }

                    cp[System.Array.index(((i + 1) | 0), cp)] = count;
                }

                var ci = System.Array.init(count, 0, System.Int32);
                var cx = System.Array.init(count, 0, System.Double);

                for (var ib1 = 0; ib1 < cols; ib1 = (ib1 + 1) | 0) {
                    marker[System.Array.index(ib1, marker)] = -1;
                }

                count = 0;
                for (var i1 = 0; i1 < rows; i1 = (i1 + 1) | 0) {
                    var rowStart = cp[System.Array.index(i1, cp)];
                    for (var j1 = ap[System.Array.index(i1, ap)]; j1 < ap[System.Array.index(((i1 + 1) | 0), ap)]; j1 = (j1 + 1) | 0) {
                        var a1 = ai[System.Array.index(j1, ai)];
                        var aEntry = ax[System.Array.index(j1, ax)];
                        for (var k1 = bp[System.Array.index(a1, bp)]; k1 < bp[System.Array.index(((a1 + 1) | 0), bp)]; k1 = (k1 + 1) | 0) {
                            var b1 = bi[System.Array.index(k1, bi)];
                            var bEntry = bx[System.Array.index(k1, bx)];
                            if (marker[System.Array.index(b1, marker)] < rowStart) {
                                marker[System.Array.index(b1, marker)] = count;
                                ci[System.Array.index(marker[System.Array.index(b1, marker)], ci)] = b1;
                                cx[System.Array.index(marker[System.Array.index(b1, marker)], cx)] = aEntry * bEntry;
                                count = (count + 1) | 0;
                            } else {
                                cx[System.Array.index(marker[System.Array.index(b1, marker)], cx)] += aEntry * bEntry;
                            }
                        }
                    }
                }

                result._storage.Values = cx;
                result._storage.ColumnIndices = ci;
                result._storage.Normalize();
            },
            /**
             * Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix to multiply with.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The result of the multiplication.
             * @return  {void}
             */
            DoTransposeAndMultiply: function (other, result) {
                var otherSparse = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Double.SparseMatrix);
                var resultSparse = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.SparseMatrix);

                if (otherSparse == null || resultSparse == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Matrix.prototype.DoTransposeAndMultiply.call(this, other, result);
                    return;
                }

                resultSparse.Clear();

                var rowPointers = this._storage.RowPointers;
                var values = this._storage.Values;

                var otherStorage = otherSparse._storage;

                for (var j = 0; j < this.RowCount; j = (j + 1) | 0) {
                    var startIndexOther = otherStorage.RowPointers[System.Array.index(j, otherStorage.RowPointers)];
                    var endIndexOther = otherStorage.RowPointers[System.Array.index(((j + 1) | 0), otherStorage.RowPointers)];

                    if (startIndexOther === endIndexOther) {
                        continue;
                    }

                    for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                        var startIndexThis = rowPointers[System.Array.index(i, rowPointers)];
                        var endIndexThis = rowPointers[System.Array.index(((i + 1) | 0), rowPointers)];

                        if (startIndexThis === endIndexThis) {
                            continue;
                        }

                        var sum = 0.0;
                        for (var index = startIndexOther; index < endIndexOther; index = (index + 1) | 0) {
                            var ind = this._storage.FindItem(i, otherStorage.ColumnIndices[System.Array.index(index, otherStorage.ColumnIndices)]);
                            if (ind >= 0) {
                                sum += otherStorage.Values[System.Array.index(index, otherStorage.Values)] * values[System.Array.index(ind, values)];
                            }
                        }

                        resultSparse._storage.At$1(i, j, sum + result.At(i, j));
                    }
                }
            },
            /**
             * Multiplies the transpose of this matrix with a vector and places the results into the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    rightSide    The vector to multiply with.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result       The result of the multiplication.
             * @return  {void}
             */
            DoTransposeThisAndMultiply$1: function (rightSide, result) {
                var rowPointers = this._storage.RowPointers;
                var columnIndices = this._storage.ColumnIndices;
                var values = this._storage.Values;

                for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                    var startIndex = rowPointers[System.Array.index(row, rowPointers)];
                    var endIndex = rowPointers[System.Array.index(((row + 1) | 0), rowPointers)];

                    if (startIndex === endIndex) {
                        continue;
                    }

                    var rightSideValue = rightSide.getItem(row);
                    for (var index = startIndex; index < endIndex; index = (index + 1) | 0) {
                        result.setItem(columnIndices[System.Array.index(index, columnIndices)], result.getItem(columnIndices[System.Array.index(index, columnIndices)]) +(values[System.Array.index(index, values)] * rightSideValue));
                    }
                }
            },
            /**
             * Pointwise multiplies this matrix with another matrix and stores the result into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    other     The matrix to pointwise multiply with this one.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The matrix to store the result of the pointwise multiplication.
             * @return  {void}
             */
            DoPointwiseMultiply: function (other, result) {
                result.Clear();

                var rowPointers = this._storage.RowPointers;
                var columnIndices = this._storage.ColumnIndices;
                var values = this._storage.Values;

                for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                    var endIndex = rowPointers[System.Array.index(((i + 1) | 0), rowPointers)];
                    for (var j = rowPointers[System.Array.index(i, rowPointers)]; j < endIndex; j = (j + 1) | 0) {
                        var resVal = values[System.Array.index(j, values)] * other.At(i, columnIndices[System.Array.index(j, columnIndices)]);
                        if (resVal !== 0.0) {
                            result.At$1(i, columnIndices[System.Array.index(j, columnIndices)], resVal);
                        }
                    }
                }
            },
            /**
             * Pointwise divide this matrix by another matrix and stores the result into the result matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    divisor    The matrix to pointwise divide this one by.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result     The matrix to store the result of the pointwise division.
             * @return  {void}
             */
            DoPointwiseDivide: function (divisor, result) {
                result.Clear();

                var rowPointers = this._storage.RowPointers;
                var columnIndices = this._storage.ColumnIndices;
                var values = this._storage.Values;

                for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                    var endIndex = rowPointers[System.Array.index(((i + 1) | 0), rowPointers)];
                    for (var j = rowPointers[System.Array.index(i, rowPointers)]; j < endIndex; j = (j + 1) | 0) {
                        if (values[System.Array.index(j, values)] !== 0.0) {
                            result.At$1(i, columnIndices[System.Array.index(j, columnIndices)], values[System.Array.index(j, values)] / divisor.At(i, columnIndices[System.Array.index(j, columnIndices)]));
                        }
                    }
                }
            },
            KroneckerProduct$1: function (other, result) {
                if (other == null) {
                    throw new System.ArgumentNullException.$ctor1("other");
                }

                if (result == null) {
                    throw new System.ArgumentNullException.$ctor1("result");
                }

                if (result.RowCount !== (Bridge.Int.mul(this.RowCount, other.RowCount)) || result.ColumnCount !== (Bridge.Int.mul(this.ColumnCount, other.ColumnCount))) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double).DimensionsDontMatch$1(System.ArgumentOutOfRangeException, this, other, result);
                }

                var rowPointers = this._storage.RowPointers;
                var columnIndices = this._storage.ColumnIndices;
                var values = this._storage.Values;

                for (var i = 0; i < this.RowCount; i = (i + 1) | 0) {
                    var endIndex = rowPointers[System.Array.index(((i + 1) | 0), rowPointers)];
                    for (var j = rowPointers[System.Array.index(i, rowPointers)]; j < endIndex; j = (j + 1) | 0) {
                        if (values[System.Array.index(j, values)] !== 0.0) {
                            result.SetSubMatrix$1(Bridge.Int.mul(i, other.RowCount), other.RowCount, Bridge.Int.mul(columnIndices[System.Array.index(j, columnIndices)], other.ColumnCount), other.ColumnCount, MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double).op_Multiply(values[System.Array.index(j, values)], other));
                        }
                    }
                }
            },
            /**
             * Computes the canonical modulus, where the result has the sign of the divisor,
             for the given divisor each element of the matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @param   {number}                                     divisor    The scalar denominator to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result     Matrix to store the results in.
             * @return  {void}
             */
            DoModulus: function (divisor, result) {
                var sparseResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.SparseMatrix);
                if (sparseResult == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Matrix.prototype.DoModulus.call(this, divisor, result);
                    return;
                }

                if (!Bridge.referenceEquals(this, result)) {
                    this.CopyTo(result);
                }

                var resultStorage = sparseResult._storage;
                for (var index = 0; index < resultStorage.Values.length; index = (index + 1) | 0) {
                    resultStorage.Values[System.Array.index(index, resultStorage.Values)] = MathNet.Numerics.Euclid.Modulus(resultStorage.Values[System.Array.index(index, resultStorage.Values)], divisor);
                }
            },
            /**
             * Computes the remainder (% operator), where the result has the sign of the dividend,
             for the given divisor each element of the matrix.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @param   {number}                                     divisor    The scalar denominator to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result     Matrix to store the results in.
             * @return  {void}
             */
            DoRemainder: function (divisor, result) {
                var sparseResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.SparseMatrix);
                if (sparseResult == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Matrix.prototype.DoRemainder.call(this, divisor, result);
                    return;
                }

                if (!Bridge.referenceEquals(this, result)) {
                    this.CopyTo(result);
                }

                var resultStorage = sparseResult._storage;
                for (var index = 0; index < resultStorage.Values.length; index = (index + 1) | 0) {
                    resultStorage.Values[System.Array.index(index, resultStorage.Values)] %= divisor;
                }
            },
            /**
             * Evaluates whether this matrix is symmetric.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
             * @return  {boolean}
             */
            IsSymmetric: function () {
                if (this.RowCount !== this.ColumnCount) {
                    return false;
                }

                var rowPointers = this._storage.RowPointers;
                var columnIndices = this._storage.ColumnIndices;
                var values = this._storage.Values;

                for (var row = 0; row < this.RowCount; row = (row + 1) | 0) {
                    var start = rowPointers[System.Array.index(row, rowPointers)];
                    var end = rowPointers[System.Array.index(((row + 1) | 0), rowPointers)];

                    if (start === end) {
                        continue;
                    }

                    for (var index = start; index < end; index = (index + 1) | 0) {
                        var column = columnIndices[System.Array.index(index, columnIndices)];
                        if (!values[System.Array.index(index, values)] === this.At(column, row)) {
                            return false;
                        }
                    }
                }

                return true;
            },
            ToTypeString: function () {
                return System.String.format("SparseMatrix {0}x{1}-Double {2:P2} Filled", Bridge.box(this.RowCount, System.Int32), Bridge.box(this.ColumnCount, System.Int32), Bridge.box(this.NonZerosCount / (this.RowCount * this.ColumnCount), System.Double, System.Double.format, System.Double.getHashCode));
            },
            LU: function () {
                throw new System.NotImplementedException.ctor();
            }
        }
    });

    /**
     * A vector with sparse storage, intended for very large vectors where most of the cells are zero.
     *
     * @public
     * @class MathNet.Numerics.LinearAlgebra.Double.SparseVector
     * @augments MathNet.Numerics.LinearAlgebra.Double.Vector
     */
    Bridge.define("MathNet.Numerics.LinearAlgebra.Double.SparseVector", {
        inherits: [MathNet.Numerics.LinearAlgebra.Double.Vector],
        statics: {
            methods: {
                /**
                 * Create a new sparse vector as a copy of the given other vector.
                 This new vector will be independent from the other vector.
                 A new memory block will be allocated for storing the vector.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
                 * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}               vector
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseVector}
                 */
                OfVector: function (vector) {
                    return new MathNet.Numerics.LinearAlgebra.Double.SparseVector.ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(System.Double).OfVector(vector.Storage));
                },
                /**
                 * Create a new sparse vector as a copy of the given enumerable.
                 This new vector will be independent from the enumerable.
                 A new memory block will be allocated for storing the vector.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
                 * @param   {System.Collections.Generic.IEnumerable$1}              enumerable
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseVector}
                 */
                OfEnumerable: function (enumerable) {
                    return new MathNet.Numerics.LinearAlgebra.Double.SparseVector.ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(System.Double).OfEnumerable(enumerable));
                },
                /**
                 * Create a new sparse vector as a copy of the given indexed enumerable.
                 Keys must be provided at most once, zero is assumed if a key is omitted.
                 This new vector will be independent from the enumerable.
                 A new memory block will be allocated for storing the vector.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
                 * @param   {number}                                                length        
                 * @param   {System.Collections.Generic.IEnumerable$1}              enumerable
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseVector}
                 */
                OfIndexedEnumerable: function (length, enumerable) {
                    return new MathNet.Numerics.LinearAlgebra.Double.SparseVector.ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(System.Double).OfIndexedEnumerable(length, enumerable));
                },
                /**
                 * Create a new sparse vector and initialize each value using the provided value.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
                 * @param   {number}                                                length    
                 * @param   {number}                                                value
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseVector}
                 */
                Create: function (length, value) {
                    return new MathNet.Numerics.LinearAlgebra.Double.SparseVector.ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(System.Double).OfValue(length, value));
                },
                /**
                 * Create a new sparse vector and initialize each value using the provided init function.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
                 * @param   {number}                                                length    
                 * @param   {System.Func}                                           init
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseVector}
                 */
                Create$1: function (length, init) {
                    return new MathNet.Numerics.LinearAlgebra.Double.SparseVector.ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(System.Double).OfInit(length, init));
                }/**
                 * Adds two <strong>Vectors</strong> together and returns the results.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
                 * @throws If <b /> and <b /> are not the same size.
                 * @throws If <b /> or <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.SparseVector}    leftSide     One of the vectors to add.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.SparseVector}    rightSide    The other vector to add.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseVector}                 The result of the addition.
                 */
                ,
                op_Addition: function (leftSide, rightSide) {
                    if (leftSide == null) {
                        throw new System.ArgumentNullException.$ctor1("leftSide");
                    }

                    return Bridge.cast(leftSide.Add$1(rightSide), MathNet.Numerics.LinearAlgebra.Double.SparseVector);
                }/**
                 * Returns a <strong>Vector</strong> containing the negated values of <b />.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.SparseVector}    rightSide    The vector to get the values from.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseVector}                 A vector containing the negated values as <b />.
                 */
                ,
                op_UnaryNegation: function (rightSide) {
                    if (rightSide == null) {
                        throw new System.ArgumentNullException.$ctor1("rightSide");
                    }

                    return Bridge.cast(rightSide.Negate(), MathNet.Numerics.LinearAlgebra.Double.SparseVector);
                }/**
                 * Subtracts two <strong>Vectors</strong> and returns the results.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
                 * @throws If <b /> and <b /> are not the same size.
                 * @throws If <b /> or <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.SparseVector}    leftSide     The vector to subtract from.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.SparseVector}    rightSide    The vector to subtract.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseVector}                 The result of the subtraction.
                 */
                ,
                op_Subtraction: function (leftSide, rightSide) {
                    if (leftSide == null) {
                        throw new System.ArgumentNullException.$ctor1("leftSide");
                    }

                    return Bridge.cast(leftSide.Subtract$1(rightSide), MathNet.Numerics.LinearAlgebra.Double.SparseVector);
                }/**
                 * Multiplies a vector with a scalar.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.SparseVector}    leftSide     The vector to scale.
                 * @param   {number}                                                rightSide    The scalar value.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseVector}                 The result of the multiplication.
                 */
                ,
                op_Multiply: function (leftSide, rightSide) {
                    if (leftSide == null) {
                        throw new System.ArgumentNullException.$ctor1("leftSide");
                    }

                    return Bridge.cast(leftSide.Multiply(rightSide), MathNet.Numerics.LinearAlgebra.Double.SparseVector);
                }/**
                 * Multiplies a vector with a scalar.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {number}                                                leftSide     The scalar value.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.SparseVector}    rightSide    The vector to scale.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseVector}                 The result of the multiplication.
                 */
                ,
                op_Multiply$1: function (leftSide, rightSide) {
                    if (rightSide == null) {
                        throw new System.ArgumentNullException.$ctor1("rightSide");
                    }

                    return Bridge.cast(rightSide.Multiply(leftSide), MathNet.Numerics.LinearAlgebra.Double.SparseVector);
                }/**
                 * Computes the dot product between two <strong>Vectors</strong>.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
                 * @throws If <b /> and <b /> are not the same size.
                 * @throws If <b /> or <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.SparseVector}    leftSide     The left row vector.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.SparseVector}    rightSide    The right column vector.
                 * @return  {number}                                                             The dot product between the two vectors.
                 */
                ,
                op_Multiply$2: function (leftSide, rightSide) {
                    if (leftSide == null) {
                        throw new System.ArgumentNullException.$ctor1("leftSide");
                    }

                    return leftSide.DotProduct(rightSide);
                }/**
                 * Divides a vector with a scalar.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.SparseVector}    leftSide     The vector to divide.
                 * @param   {number}                                                rightSide    The scalar value.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseVector}                 The result of the division.
                 */
                ,
                op_Division: function (leftSide, rightSide) {
                    if (leftSide == null) {
                        throw new System.ArgumentNullException.$ctor1("leftSide");
                    }

                    return Bridge.cast(leftSide.Divide(rightSide), MathNet.Numerics.LinearAlgebra.Double.SparseVector);
                }/**
                 * Computes the remainder (% operator), where the result has the sign of the dividend,
                 of each element of the vector of the given divisor.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
                 * @throws If <b /> is {@link ArgumentNullException}.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.SparseVector}    leftSide     The vector whose elements we want to compute the modulus of.
                 * @param   {number}                                                rightSide    The divisor to use,
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.SparseVector}                 The result of the calculation
                 */
                ,
                op_Modulus: function (leftSide, rightSide) {
                    if (leftSide == null) {
                        throw new System.ArgumentNullException.$ctor1("leftSide");
                    }

                    return Bridge.cast(leftSide.Remainder(rightSide), MathNet.Numerics.LinearAlgebra.Double.SparseVector);
                }
            }
        },
        fields: {
            _storage: null
        },
        props: {
            /**
             * Gets the number of non zero elements in the vector.
             *
             * @instance
             * @public
             * @readonly
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @function NonZerosCount
             * @type number
             */
            NonZerosCount: {
                get: function () {
                    return this._storage.ValueCount;
                }
            }
        },
        ctors: {
            /**
             * Create a new sparse vector straight from an initialized vector storage instance.
             The storage is used directly without copying.
             Intended for advanced scenarios where you're working directly with
             storage for performance or interop reasons.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @param   {MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1}    storage
             * @return  {void}
             */
            ctor: function (storage) {
                this.$initialize();
                MathNet.Numerics.LinearAlgebra.Double.Vector.ctor.call(this, storage);
                this._storage = storage;
            },
            /**
             * Create a new sparse vector with the given length.
             All cells of the vector will be initialized to zero.
             Zero-length vectors are not supported.
             *
             * @instance
             * @public
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @throws If length is less than one.
             * @param   {number}    length
             * @return  {void}
             */
            $ctor1: function (length) {
                MathNet.Numerics.LinearAlgebra.Double.SparseVector.ctor.call(this, new (MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage$1(System.Double))(length));
            }
        },
        methods: {
            /**
             * Adds a scalar to each element of the vector and stores the result in the result vector.
             Warning, the new 'sparse vector' with a non-zero scalar added to it will be a 100% filled
             sparse vector and very inefficient. Would be better to work with a dense vector instead.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @param   {number}                                     scalar    The scalar to add.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result of the addition.
             * @return  {void}
             */
            DoAdd: function (scalar, result) {
                if (scalar === 0.0) {
                    if (!Bridge.referenceEquals(this, result)) {
                        this.CopyTo(result);
                    }

                    return;
                }

                if (Bridge.referenceEquals(this, result)) {
                    var vnonZeroValues = System.Array.init(this.Count, 0, System.Double);
                    var vnonZeroIndices = System.Array.init(this.Count, 0, System.Int32);
                    for (var index = 0; index < this.Count; index = (index + 1) | 0) {
                        vnonZeroIndices[System.Array.index(index, vnonZeroIndices)] = index;
                        vnonZeroValues[System.Array.index(index, vnonZeroValues)] = scalar;
                    }

                    var indices = this._storage.Indices;
                    var values = this._storage.Values;
                    for (var j = 0; j < this._storage.ValueCount; j = (j + 1) | 0) {
                        vnonZeroValues[System.Array.index(indices[System.Array.index(j, indices)], vnonZeroValues)] = values[System.Array.index(j, values)] + scalar;
                    }

                    this._storage.Values = vnonZeroValues;
                    this._storage.Indices = vnonZeroIndices;
                    this._storage.ValueCount = this.Count;
                } else {
                    for (var index1 = 0; index1 < this.Count; index1 = (index1 + 1) | 0) {
                        result.At$1(index1, this.At(index1) + scalar);
                    }
                }
            },
            /**
             * Adds another vector to this vector and stores the result into the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other     The vector to add to this one.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result of the addition.
             * @return  {void}
             */
            DoAdd$1: function (other, result) {
                var $t, $t1, $t2, $t3, $t4, $t5;
                var otherSparse = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Double.SparseVector);
                if (otherSparse == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Vector.prototype.DoAdd$1.call(this, other, result);
                    return;
                }

                var resultSparse = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.SparseVector);
                if (resultSparse == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Vector.prototype.DoAdd$1.call(this, other, result);
                    return;
                }


                var otherStorage = otherSparse._storage;
                if (Bridge.referenceEquals(this, resultSparse)) {
                    var i = 0, j = 0;
                    while (j < otherStorage.ValueCount) {
                        if (i >= this._storage.ValueCount || ($t = this._storage.Indices)[System.Array.index(i, $t)] > otherStorage.Indices[System.Array.index(j, otherStorage.Indices)]) {
                            var otherValue = otherStorage.Values[System.Array.index(j, otherStorage.Values)];
                            if (otherValue !== 0.0) {
                                this._storage.InsertAtIndexUnchecked(Bridge.identity(i, ((i = (i + 1) | 0))), otherStorage.Indices[System.Array.index(j, otherStorage.Indices)], otherValue);
                            }
                            j = (j + 1) | 0;
                        } else if (($t1 = this._storage.Indices)[System.Array.index(i, $t1)] === otherStorage.Indices[System.Array.index(j, otherStorage.Indices)]) {
                            ($t2 = this._storage.Values)[System.Array.index(Bridge.identity(i, ((i = (i + 1) | 0))), $t2)] += otherStorage.Values[System.Array.index(Bridge.identity(j, ((j = (j + 1) | 0))), otherStorage.Values)];
                        } else {
                            i = (i + 1) | 0;
                        }
                    }
                } else {
                    result.clear();
                    var i1 = 0, j1 = 0, last = -1;
                    while (i1 < this._storage.ValueCount || j1 < otherStorage.ValueCount) {
                        if (j1 >= otherStorage.ValueCount || i1 < this._storage.ValueCount && ($t3 = this._storage.Indices)[System.Array.index(i1, $t3)] <= otherStorage.Indices[System.Array.index(j1, otherStorage.Indices)]) {
                            var next = ($t4 = this._storage.Indices)[System.Array.index(i1, $t4)];
                            if (next !== last) {
                                last = next;
                                result.At$1(next, ($t5 = this._storage.Values)[System.Array.index(i1, $t5)] + otherSparse.At(next));
                            }
                            i1 = (i1 + 1) | 0;
                        } else {
                            var next1 = otherStorage.Indices[System.Array.index(j1, otherStorage.Indices)];
                            if (next1 !== last) {
                                last = next1;
                                result.At$1(next1, this.At(next1) + otherStorage.Values[System.Array.index(j1, otherStorage.Values)]);
                            }
                            j1 = (j1 + 1) | 0;
                        }
                    }
                }
            },
            /**
             * Subtracts a scalar from each element of the vector and stores the result in the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @param   {number}                                     scalar    The scalar to subtract.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result of the subtraction.
             * @return  {void}
             */
            DoSubtract: function (scalar, result) {
                this.DoAdd(-scalar, result);
            },
            /**
             * Subtracts another vector to this vector and stores the result into the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other     The vector to subtract from this one.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result of the subtraction.
             * @return  {void}
             */
            DoSubtract$1: function (other, result) {
                var $t, $t1, $t2, $t3, $t4, $t5;
                if (Bridge.referenceEquals(this, other)) {
                    result.clear();
                    return;
                }

                var otherSparse = Bridge.as(other, MathNet.Numerics.LinearAlgebra.Double.SparseVector);
                if (otherSparse == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Vector.prototype.DoSubtract$1.call(this, other, result);
                    return;
                }

                var resultSparse = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.SparseVector);
                if (resultSparse == null) {
                    MathNet.Numerics.LinearAlgebra.Double.Vector.prototype.DoSubtract$1.call(this, other, result);
                    return;
                }


                var otherStorage = otherSparse._storage;
                if (Bridge.referenceEquals(this, resultSparse)) {
                    var i = 0, j = 0;
                    while (j < otherStorage.ValueCount) {
                        if (i >= this._storage.ValueCount || ($t = this._storage.Indices)[System.Array.index(i, $t)] > otherStorage.Indices[System.Array.index(j, otherStorage.Indices)]) {
                            var otherValue = otherStorage.Values[System.Array.index(j, otherStorage.Values)];
                            if (otherValue !== 0.0) {
                                this._storage.InsertAtIndexUnchecked(Bridge.identity(i, ((i = (i + 1) | 0))), otherStorage.Indices[System.Array.index(j, otherStorage.Indices)], -otherValue);
                            }
                            j = (j + 1) | 0;
                        } else if (($t1 = this._storage.Indices)[System.Array.index(i, $t1)] === otherStorage.Indices[System.Array.index(j, otherStorage.Indices)]) {
                            ($t2 = this._storage.Values)[System.Array.index(Bridge.identity(i, ((i = (i + 1) | 0))), $t2)] -= otherStorage.Values[System.Array.index(Bridge.identity(j, ((j = (j + 1) | 0))), otherStorage.Values)];
                        } else {
                            i = (i + 1) | 0;
                        }
                    }
                } else {
                    result.clear();
                    var i1 = 0, j1 = 0, last = -1;
                    while (i1 < this._storage.ValueCount || j1 < otherStorage.ValueCount) {
                        if (j1 >= otherStorage.ValueCount || i1 < this._storage.ValueCount && ($t3 = this._storage.Indices)[System.Array.index(i1, $t3)] <= otherStorage.Indices[System.Array.index(j1, otherStorage.Indices)]) {
                            var next = ($t4 = this._storage.Indices)[System.Array.index(i1, $t4)];
                            if (next !== last) {
                                last = next;
                                result.At$1(next, ($t5 = this._storage.Values)[System.Array.index(i1, $t5)] - otherSparse.At(next));
                            }
                            i1 = (i1 + 1) | 0;
                        } else {
                            var next1 = otherStorage.Indices[System.Array.index(j1, otherStorage.Indices)];
                            if (next1 !== last) {
                                last = next1;
                                result.At$1(next1, this.At(next1) - otherStorage.Values[System.Array.index(j1, otherStorage.Values)]);
                            }
                            j1 = (j1 + 1) | 0;
                        }
                    }
                }
            },
            /**
             * Negates vector and saves result to <b />
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    Target vector
             * @return  {void}
             */
            DoNegate: function (result) {
                var $t, $t1;
                var sparseResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.SparseVector);
                if (sparseResult == null) {
                    result.clear();
                    for (var index = 0; index < this._storage.ValueCount; index = (index + 1) | 0) {
                        result.At$1(($t = this._storage.Indices)[System.Array.index(index, $t)], -($t1 = this._storage.Values)[System.Array.index(index, $t1)]);
                    }
                    return;
                }

                if (!Bridge.referenceEquals(this, result)) {
                    sparseResult._storage.ValueCount = this._storage.ValueCount;
                    sparseResult._storage.Indices = System.Array.init(this._storage.ValueCount, 0, System.Int32);
                    var sourcebytes = System.Array.init(Bridge.Int.mul(this._storage.Indices.length, 8), 0, System.Byte);
                    sourcebytes = System.Linq.Enumerable.from(this._storage.Indices, System.Int32).selectMany(function (value) {
                            return System.BitConverter.getBytes$4(value);
                        }).ToArray(System.Byte);
                    System.Array.copy(this._storage.Indices, 0, sparseResult._storage.Indices, 0, this._storage.ValueCount);
                    sparseResult._storage.Values = System.Array.init(this._storage.ValueCount, 0, System.Double);
                    System.Array.copy(this._storage.Values, 0, sparseResult._storage.Values, 0, this._storage.ValueCount);
                }

                this.Map$1(function (x) {
                    return -x;
                }, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
            },
            /**
             * Multiplies a scalar to each element of the vector and stores the result in the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @param   {number}                                     scalar    The scalar to multiply.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result of the multiplication.
             * @return  {void}
             */
            DoMultiply: function (scalar, result) {
                var $t, $t1;
                var sparseResult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.SparseVector);
                if (sparseResult == null) {
                    result.clear();
                    for (var index = 0; index < this._storage.ValueCount; index = (index + 1) | 0) {
                        result.At$1(($t = this._storage.Indices)[System.Array.index(index, $t)], scalar * ($t1 = this._storage.Values)[System.Array.index(index, $t1)]);
                    }
                } else {
                    if (!Bridge.referenceEquals(this, result)) {
                        sparseResult._storage.ValueCount = this._storage.ValueCount;
                        sparseResult._storage.Indices = System.Array.init(this._storage.ValueCount, 0, System.Int32);

                        System.Array.copy(this._storage.Indices, 0, sparseResult._storage.Indices, 0, this._storage.ValueCount);
                        sparseResult._storage.Values = System.Array.init(this._storage.ValueCount, 0, System.Double);
                        System.Array.copy(this._storage.Values, 0, sparseResult._storage.Values, 0, this._storage.ValueCount);
                    }

                    this.Map$1(function (x) {
                        return x * scalar;
                    }, result, MathNet.Numerics.LinearAlgebra.Zeros.AllowSkip);
                }
            },
            /**
             * Computes the dot product between this vector and another vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other    The other vector.
             * @return  {number}                                              The sum of a[i]*b[i] for all i.
             */
            DoDotProduct: function (other) {
                var $t, $t1, $t2, $t3;
                var result = 0.0;
                if (Bridge.referenceEquals(this, other)) {
                    for (var i = 0; i < this._storage.ValueCount; i = (i + 1) | 0) {
                        result += ($t = this._storage.Values)[System.Array.index(i, $t)] * ($t1 = this._storage.Values)[System.Array.index(i, $t1)];
                    }
                } else {
                    for (var i1 = 0; i1 < this._storage.ValueCount; i1 = (i1 + 1) | 0) {
                        result += ($t2 = this._storage.Values)[System.Array.index(i1, $t2)] * other.At(($t3 = this._storage.Indices)[System.Array.index(i1, $t3)]);
                    }
                }
                return result;
            },
            /**
             * Computes the canonical modulus, where the result has the sign of the divisor,
             for each element of the vector for the given divisor.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @param   {number}                                     divisor    The scalar denominator to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result     A vector to store the results in.
             * @return  {void}
             */
            DoModulus: function (divisor, result) {
                var $t, $t1, $t2, $t3;
                if (Bridge.referenceEquals(this, result)) {
                    for (var index = 0; index < this._storage.ValueCount; index = (index + 1) | 0) {
                        ($t = this._storage.Values)[System.Array.index(index, $t)] = MathNet.Numerics.Euclid.Modulus(($t1 = this._storage.Values)[System.Array.index(index, $t1)], divisor);
                    }
                } else {
                    result.clear();
                    for (var index1 = 0; index1 < this._storage.ValueCount; index1 = (index1 + 1) | 0) {
                        result.At$1(($t2 = this._storage.Indices)[System.Array.index(index1, $t2)], MathNet.Numerics.Euclid.Modulus(($t3 = this._storage.Values)[System.Array.index(index1, $t3)], divisor));
                    }
                }
            },
            /**
             * Computes the remainder (% operator), where the result has the sign of the dividend,
             for each element of the vector for the given divisor.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @param   {number}                                     divisor    The scalar denominator to use.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result     A vector to store the results in.
             * @return  {void}
             */
            DoRemainder: function (divisor, result) {
                var $t, $t1, $t2;
                if (Bridge.referenceEquals(this, result)) {
                    for (var index = 0; index < this._storage.ValueCount; index = (index + 1) | 0) {
                        ($t = this._storage.Values)[System.Array.index(index, $t)] %= divisor;
                    }
                } else {
                    result.clear();
                    for (var index1 = 0; index1 < this._storage.ValueCount; index1 = (index1 + 1) | 0) {
                        result.At$1(($t1 = this._storage.Indices)[System.Array.index(index1, $t1)], ($t2 = this._storage.Values)[System.Array.index(index1, $t2)] % divisor);
                    }
                }
            },
            /**
             * Returns the index of the absolute minimum element.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @return  {number}        The index of absolute minimum element.
             */
            AbsoluteMinimumIndex: function () {
                var $t, $t1, $t2;
                if (this._storage.ValueCount === 0) {
                    return 0;
                }

                var index = 0;
                var min = Math.abs(($t = this._storage.Values)[System.Array.index(index, $t)]);
                for (var i = 1; i < this._storage.ValueCount; i = (i + 1) | 0) {
                    var test = Math.abs(($t1 = this._storage.Values)[System.Array.index(i, $t1)]);
                    if (test < min) {
                        index = i;
                        min = test;
                    }
                }

                return ($t2 = this._storage.Indices)[System.Array.index(index, $t2)];
            },
            /**
             * Returns the index of the absolute maximum element.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @return  {number}        The index of absolute maximum element.
             */
            AbsoluteMaximumIndex: function () {
                var $t, $t1, $t2;
                if (this._storage.ValueCount === 0) {
                    return 0;
                }

                var index = 0;
                var max = Math.abs(($t = this._storage.Values)[System.Array.index(index, $t)]);
                for (var i = 1; i < this._storage.ValueCount; i = (i + 1) | 0) {
                    var test = Math.abs(($t1 = this._storage.Values)[System.Array.index(i, $t1)]);
                    if (test > max) {
                        index = i;
                        max = test;
                    }
                }

                return ($t2 = this._storage.Indices)[System.Array.index(index, $t2)];
            },
            /**
             * Returns the index of the maximum element.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @return  {number}        The index of maximum element.
             */
            MaximumIndex: function () {
                var $t, $t1, $t2, $t3;
                if (this._storage.ValueCount === 0) {
                    return 0;
                }

                var index = 0;
                var max = ($t = this._storage.Values)[System.Array.index(0, $t)];
                for (var i = 1; i < this._storage.ValueCount; i = (i + 1) | 0) {
                    if (max < ($t1 = this._storage.Values)[System.Array.index(i, $t1)]) {
                        index = i;
                        max = ($t2 = this._storage.Values)[System.Array.index(i, $t2)];
                    }
                }

                return ($t3 = this._storage.Indices)[System.Array.index(index, $t3)];
            },
            /**
             * Returns the index of the minimum element.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @return  {number}        The index of minimum element.
             */
            MinimumIndex: function () {
                var $t, $t1, $t2, $t3;
                if (this._storage.ValueCount === 0) {
                    return 0;
                }

                var index = 0;
                var min = ($t = this._storage.Values)[System.Array.index(0, $t)];
                for (var i = 1; i < this._storage.ValueCount; i = (i + 1) | 0) {
                    if (min > ($t1 = this._storage.Values)[System.Array.index(i, $t1)]) {
                        index = i;
                        min = ($t2 = this._storage.Values)[System.Array.index(i, $t2)];
                    }
                }

                return ($t3 = this._storage.Indices)[System.Array.index(index, $t3)];
            },
            /**
             * Computes the sum of the vector's elements.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @return  {number}        The sum of the vector's elements.
             */
            Sum: function () {
                var $t;
                var result = 0;
                for (var i = 0; i < this._storage.ValueCount; i = (i + 1) | 0) {
                    result += ($t = this._storage.Values)[System.Array.index(i, $t)];
                }
                return result;
            },
            /**
             * Calculates the L1 norm of the vector, also known as Manhattan norm.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @return  {number}        The sum of the absolute values.
             */
            L1Norm: function () {
                var $t;
                var result = 0.0;
                for (var i = 0; i < this._storage.ValueCount; i = (i + 1) | 0) {
                    result += Math.abs(($t = this._storage.Values)[System.Array.index(i, $t)]);
                }
                return result;
            },
            /**
             * Calculates the infinity norm of the vector.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @return  {number}        The maximum absolute value.
             */
            InfinityNorm: function () {
                var max = 0.0;
                for (var i = 0; i < this.Count; i = (i + 1) | 0) {
                    if (Math.abs(this.At(i)) > max) {
                        max = this.At(i);
                    }
                }
                return max;
            },
            /**
             * Computes the p-Norm.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @param   {number}    p    The p value.
             * @return  {number}         Scalar <pre><code>ret = ( â|this[i]|^p )^(1/p)</code></pre>
             */
            Norm: function (p) {
                var $t;
                if (p < 0.0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("p");
                }

                if (this._storage.ValueCount === 0) {
                    return 0.0;
                }

                if (p === 1.0) {
                    return this.L1Norm();
                }
                if (p === 2.0) {
                    return this.L2Norm();
                }
                if ((p === Number.POSITIVE_INFINITY)) {
                    return this.InfinityNorm();
                }

                var sum = 0.0;
                for (var index = 0; index < this._storage.ValueCount; index = (index + 1) | 0) {
                    sum += Math.pow(Math.abs(($t = this._storage.Values)[System.Array.index(index, $t)]), p);
                }
                return Math.pow(sum, 1.0 / p);
            },
            /**
             * Pointwise multiplies this vector with another vector and stores the result into the result vector.
             *
             * @instance
             * @protected
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    other     The vector to pointwise multiply with this one.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The vector to store the result of the pointwise multiplication.
             * @return  {void}
             */
            DoPointwiseMultiply: function (other, result) {
                var $t, $t1;
                if (Bridge.referenceEquals(this, other) && Bridge.referenceEquals(this, result)) {
                    for (var i = 0; i < this._storage.ValueCount; i = (i + 1) | 0) {
                        ($t = this._storage.Values)[System.Array.index(i, $t)] *= ($t1 = this._storage.Values)[System.Array.index(i, $t1)];
                    }
                } else {
                    MathNet.Numerics.LinearAlgebra.Double.Vector.prototype.DoPointwiseMultiply.call(this, other, result);
                }
            },
            /**
             * Creates a double sparse vector based on a string. The string can be in the following formats (without the
             quotes): 'n', 'n,n,..', '(n,n,..)', '[n,n,...]', where n is a double.
             * Converts the string representation of a real sparse vector to double-precision sparse vector equivalent.
             A return value indicates whether the conversion succeeded or failed.
             * Converts the string representation of a real sparse vector to double-precision sparse vector equivalent.
             A return value indicates whether the conversion succeeded or failed.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @memberof MathNet.Numerics.LinearAlgebra.Double.SparseVector
             * @return  {string}        If the conversion succeeds, the result will contain a complex number equivalent to value.
             Otherwise the result will be <pre><code>null</code></pre>.
             */
            ToTypeString: function () {
                return System.String.format("SparseVector {0}-Double {1:P2} Filled", Bridge.box(this.Count, System.Int32), Bridge.box(this.NonZerosCount / this.Count, System.Double, System.Double.format, System.Double.getHashCode));
            }
        }
    });

    /**
     * <p>A class which encapsulates the functionality of an LU factorization.</p><p>For a matrix A, the LU factorization is a pair of lower triangular matrix L and
     upper triangular matrix U so that A = L*U.</p>
     *
     * @class MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseLU
     * @augments MathNet.Numerics.LinearAlgebra.Double.Factorization.LU
     */
    Bridge.define("MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseLU", {
        inherits: [MathNet.Numerics.LinearAlgebra.Double.Factorization.LU],
        statics: {
            methods: {
                /**
                 * Initializes a new instance of the {@link } class. This object will compute the
                 LU factorization when the constructor is called and cache it's factorization.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseLU
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseLU
                 * @throws If <b /> is <pre><code>null</code></pre>.
                 * @throws If <b /> is not a square matrix.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}              matrix    The matrix to factor.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseLU}
                 */
                Create: function (matrix) {
                    if (matrix == null) {
                        throw new System.ArgumentNullException.$ctor1("matrix");
                    }

                    if (matrix.RowCount !== matrix.ColumnCount) {
                        throw new System.ArgumentException.$ctor1("Resources.ArgumentMatrixSquare");
                    }

                    var pivots = System.Array.init(matrix.RowCount, 0, System.Int32);

                    var factors = Bridge.cast(matrix.Clone(), MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);

                    return new MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseLU(factors, pivots);
                }
            }
        },
        alias: [
            "Solve$1", "MathNet$Numerics$LinearAlgebra$Factorization$ISolver$1$System$Double$Solve$2",
            "Solve$3", "MathNet$Numerics$LinearAlgebra$Factorization$ISolver$1$System$Double$Solve$3"
        ],
        ctors: {
            ctor: function (factors, pivots) {
                this.$initialize();
                MathNet.Numerics.LinearAlgebra.Double.Factorization.LU.ctor.call(this, factors, pivots);
            }
        },
        methods: {
            /**
             * Solves a system of linear equations, <pre><code>AX = B</code></pre>, with A LU factorized.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseLU
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseLU
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    input     The right hand side {@link }, <pre><code>B</code></pre>.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The left hand side {@link }, <pre><code>X</code></pre>.
             * @return  {void}
             */
            Solve$1: function (input, result) {
                if (input == null) {
                    throw new System.ArgumentNullException.$ctor1("input");
                }

                if (result == null) {
                    throw new System.ArgumentNullException.$ctor1("result");
                }

                if (result.RowCount !== input.RowCount) {
                    throw new System.ArgumentException.$ctor1("Resources.ArgumentMatrixSameRowDimension");
                }

                if (result.ColumnCount !== input.ColumnCount) {
                    throw new System.ArgumentException.$ctor1("Resources.ArgumentMatrixSameColumnDimension");
                }

                if (input.RowCount !== this.Factors.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double).DimensionsDontMatch$2(System.ArgumentException, input, this.Factors);
                }

                var dinput = Bridge.as(input, MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
                if (dinput == null) {
                    throw new System.NotSupportedException.$ctor1("Can only do LU factorization for dense matrices at the moment.");
                }

                var dresult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
                if (dresult == null) {
                    throw new System.NotSupportedException.$ctor1("Can only do LU factorization for dense matrices at the moment.");
                }

                System.Array.copy(dinput.Values, 0, dresult.Values, 0, dinput.Values.length);

                var dfactors = Bridge.cast(this.Factors, MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
            },
            /**
             * Solves a system of linear equations, <pre><code>Ax = b</code></pre>, with A LU factorized.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseLU
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseLU
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    input     The right hand side vector, <pre><code>b</code></pre>.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The left hand side {@link }, <pre><code>x</code></pre>.
             * @return  {void}
             */
            Solve$3: function (input, result) {
                if (input == null) {
                    throw new System.ArgumentNullException.$ctor1("input");
                }

                if (result == null) {
                    throw new System.ArgumentNullException.$ctor1("result");
                }

                if (input.Count !== result.Count) {
                    throw new System.ArgumentException.$ctor1("Resources.ArgumentVectorsSameLength");
                }

                if (input.Count !== this.Factors.RowCount) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double).DimensionsDontMatch$5(System.ArgumentException, input, this.Factors);
                }

                var dinput = Bridge.as(input, MathNet.Numerics.LinearAlgebra.Double.DenseVector);
                if (dinput == null) {
                    throw new System.NotSupportedException.$ctor1("Can only do LU factorization for dense vectors at the moment.");
                }

                var dresult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DenseVector);
                if (dresult == null) {
                    throw new System.NotSupportedException.$ctor1("Can only do LU factorization for dense vectors at the moment.");
                }

                System.Array.copy(dinput.Values, 0, dresult.Values, 0, dinput.Values.length);

                var dfactors = Bridge.cast(this.Factors, MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
            },
            /**
             * Returns the inverse of this matrix. The inverse is calculated using LU decomposition.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseLU
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseLU
             * @return  {MathNet.Numerics.LinearAlgebra.Matrix$1}        The inverse of this matrix.
             */
            Inverse: function () {
                var result = Bridge.cast(this.Factors.Clone(), MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
                return result;
            }
        }
    });

    /**
     * <p>A class which encapsulates the functionality of the singular value decomposition (SVD) for {@link }.</p><p>Suppose M is an m-by-n matrix whose entries are real numbers.
     Then there exists a factorization of the form M = UÎ£VT where:
     - U is an m-by-m unitary matrix;
     - Î£ is m-by-n diagonal matrix with nonnegative real numbers on the diagonal;
     - VT denotes transpose of V, an n-by-n unitary matrix;
     Such a factorization is called a singular-value decomposition of M. A common convention is to order the diagonal
     entries Î£(i,i) in descending order. In this case, the diagonal matrix Î£ is uniquely determined
     by M (though the matrices U and V are not). The diagonal entries of Î£ are known as the singular values of M.</p>
     *
     * @class MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseSvd
     * @augments MathNet.Numerics.LinearAlgebra.Double.Factorization.Svd
     */
    Bridge.define("MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseSvd", {
        inherits: [MathNet.Numerics.LinearAlgebra.Double.Factorization.Svd],
        statics: {
            methods: {
                /**
                 * Initializes a new instance of the {@link } class. This object will compute the
                 the singular value decomposition when the constructor is called and cache it's decomposition.
                 *
                 * @static
                 * @public
                 * @this MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseSvd
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseSvd
                 * @throws If <b /> is <pre><code>null</code></pre>.
                 * @throws If SVD algorithm failed to converge with matrix <b />.
                 * @param   {MathNet.Numerics.LinearAlgebra.Double.DenseMatrix}               matrix            The matrix to factor.
                 * @param   {boolean}                                                         computeVectors    Compute the singular U and VT vectors or not.
                 * @return  {MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseSvd}
                 */
                Create: function (matrix, computeVectors) {
                    var nm = Math.min(matrix.RowCount, matrix.ColumnCount);
                    var s = new MathNet.Numerics.LinearAlgebra.Double.DenseVector.$ctor2(nm);
                    var u = new MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.$ctor1(matrix.RowCount);
                    var vt = new MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.$ctor1(matrix.ColumnCount);
                    var svder = new MathNetNumerics.ManagedLinearAlgebraProvider();
                    svder.SingularValueDecomposition(computeVectors, Bridge.cast(matrix.Clone(), MathNet.Numerics.LinearAlgebra.Double.DenseMatrix).Values, matrix.RowCount, matrix.ColumnCount, s.Values, u.Values, vt.Values);

                    return new MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseSvd(s, u, vt, computeVectors);
                }
            }
        },
        alias: [
            "Solve$1", "MathNet$Numerics$LinearAlgebra$Factorization$ISolver$1$System$Double$Solve$2",
            "Solve$3", "MathNet$Numerics$LinearAlgebra$Factorization$ISolver$1$System$Double$Solve$3"
        ],
        ctors: {
            ctor: function (s, u, vt, vectorsComputed) {
                this.$initialize();
                MathNet.Numerics.LinearAlgebra.Double.Factorization.Svd.ctor.call(this, s, u, vt, vectorsComputed);
            }
        },
        methods: {
            /**
             * Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseSvd
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseSvd
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    input     The right hand side {@link }, <b>B</b>.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The left hand side {@link }, <b>X</b>.
             * @return  {void}
             */
            Solve$1: function (input, result) {
                if (!this.VectorsComputed) {
                    throw new System.InvalidOperationException.$ctor1("Resources.SingularVectorsNotComputed");
                }

                if (input.ColumnCount !== result.ColumnCount) {
                    throw new System.ArgumentException.$ctor1("Resources.ArgumentMatrixSameColumnDimension");
                }

                if (this.U.RowCount !== input.RowCount) {
                    throw new System.ArgumentException.$ctor1("Resources.ArgumentMatrixSameRowDimension");
                }

                if (this.VT.ColumnCount !== result.RowCount) {
                    throw new System.ArgumentException.$ctor1("Resources.ArgumentMatrixSameColumnDimension");
                }

                var dinput = Bridge.as(input, MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
                if (dinput == null) {
                    throw new System.NotSupportedException.$ctor1("Can only do SVD factorization for dense matrices at the moment.");
                }

                var dresult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DenseMatrix);
                if (dresult == null) {
                    throw new System.NotSupportedException.$ctor1("Can only do SVD factorization for dense matrices at the moment.");
                }
                var svder = new MathNetNumerics.ManagedLinearAlgebraProvider();
                svder.SvdSolveFactored(this.U.RowCount, this.VT.ColumnCount, Bridge.cast(this.S, MathNet.Numerics.LinearAlgebra.Double.DenseVector).Values, Bridge.cast(this.U, MathNet.Numerics.LinearAlgebra.Double.DenseMatrix).Values, Bridge.cast(this.VT, MathNet.Numerics.LinearAlgebra.Double.DenseMatrix).Values, dinput.Values, input.ColumnCount, dresult.Values);
            },
            /**
             * Solves a system of linear equations, <b>Ax = b</b>, with A SVD factorized.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseSvd
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseSvd
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    input     The right hand side vector, <b>b</b>.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The left hand side {@link }, <b>x</b>.
             * @return  {void}
             */
            Solve$3: function (input, result) {
                if (!this.VectorsComputed) {
                    throw new System.InvalidOperationException.$ctor1("Resources.SingularVectorsNotComputed");
                }

                if (this.U.RowCount !== input.Count) {
                    throw new System.ArgumentException.$ctor1("Resources.ArgumentVectorsSameLength");
                }

                if (this.VT.ColumnCount !== result.Count) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double).DimensionsDontMatch$4(System.ArgumentException, this.VT, result);
                }

                var dinput = Bridge.as(input, MathNet.Numerics.LinearAlgebra.Double.DenseVector);
                if (dinput == null) {
                    throw new System.NotSupportedException.$ctor1("Can only do SVD factorization for dense vectors at the moment.");
                }

                var dresult = Bridge.as(result, MathNet.Numerics.LinearAlgebra.Double.DenseVector);
                if (dresult == null) {
                    throw new System.NotSupportedException.$ctor1("Can only do SVD factorization for dense vectors at the moment.");
                }
                var svder = new MathNetNumerics.ManagedLinearAlgebraProvider();
                svder.SvdSolveFactored(this.U.RowCount, this.VT.ColumnCount, Bridge.cast(this.S, MathNet.Numerics.LinearAlgebra.Double.DenseVector).Values, Bridge.cast(this.U, MathNet.Numerics.LinearAlgebra.Double.DenseMatrix).Values, Bridge.cast(this.VT, MathNet.Numerics.LinearAlgebra.Double.DenseMatrix).Values, dinput.Values, 1, dresult.Values);
            }
        }
    });

    /**
     * <p>A class which encapsulates the functionality of the singular value decomposition (SVD) for {@link }.</p><p>Suppose M is an m-by-n matrix whose entries are real numbers.
     Then there exists a factorization of the form M = UÎ£VT where:
     - U is an m-by-m unitary matrix;
     - Î£ is m-by-n diagonal matrix with nonnegative real numbers on the diagonal;
     - VT denotes transpose of V, an n-by-n unitary matrix;
     Such a factorization is called a singular-value decomposition of M. A common convention is to order the diagonal
     entries Î£(i,i) in descending order. In this case, the diagonal matrix Î£ is uniquely determined
     by M (though the matrices U and V are not). The diagonal entries of Î£ are known as the singular values of M.</p>
     *
     * @class MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd
     * @augments MathNet.Numerics.LinearAlgebra.Double.Factorization.Svd
     */
    Bridge.define("MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd", {
        inherits: [MathNet.Numerics.LinearAlgebra.Double.Factorization.Svd],
        statics: {
            fields: {
                /**
                 * Initializes a new instance of the {@link } class. This object will compute the
                 the singular value decomposition when the constructor is called and cache it's decomposition.
                 *
                 * @static
                 * @private
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd
                 * @type MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.VectorBuilder$1
                 * @throws If <b /> is <pre><code>null</code></pre>.
                 * @throws 
                 */
                v_builder: null,
                m_builder: null
            },
            ctors: {
                init: function () {
                    this.v_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(System.Double).Vector;
                    this.m_builder = MathNet.Numerics.LinearAlgebra.Double.MathNet.Numerics.LinearAlgebra.BuilderInstance$1(System.Double).Matrix;
                }
            },
            methods: {
                Create: function (matrix, computeVectors) {
                    var AlmostEquals = null;
                    var nm = Math.min(((matrix.RowCount + 1) | 0), matrix.ColumnCount);
                    var matrixCopy = matrix.Clone();

                    var s = MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.v_builder.SameAs$3(System.Double, matrixCopy, nm);
                    var u = MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.m_builder.SameAs$4(System.Double, matrixCopy, matrixCopy.RowCount, matrixCopy.RowCount, true);
                    var vt = MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.m_builder.SameAs$4(System.Double, matrixCopy, matrixCopy.ColumnCount, matrixCopy.ColumnCount, true);

                    var maxiter = 1000;
                    var e = System.Array.init(matrixCopy.ColumnCount, 0, System.Double);
                    var work = System.Array.init(matrixCopy.RowCount, 0, System.Double);
                    var i, j;
                    var l, lp1;
                    var t;

                    var ncu = matrixCopy.RowCount;

                    var nct = Math.min(((matrixCopy.RowCount - 1) | 0), matrixCopy.ColumnCount);
                    var nrt = Math.max(0, Math.min(((matrixCopy.ColumnCount - 2) | 0), matrixCopy.RowCount));
                    var lu = Math.max(nct, nrt);
                    for (l = 0; l < lu; l = (l + 1) | 0) {
                        lp1 = (l + 1) | 0;
                        if (l < nct) {
                            var xnorm = MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Dnrm2Column(matrixCopy, matrixCopy.RowCount, l, l);
                            s.setItem(l, xnorm);
                            if (s.getItem(l) !== 0.0) {
                                if (matrixCopy.At(l, l) !== 0.0) {
                                    s.setItem(l, MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Dsign(s.getItem(l), matrixCopy.At(l, l)));
                                }

                                MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.DscalColumn(matrixCopy, matrixCopy.RowCount, l, l, 1.0 / s.getItem(l));
                                matrixCopy.At$1(l, l, (1.0 + matrixCopy.At(l, l)));
                            }

                            s.setItem(l, -s.getItem(l));
                        }

                        for (j = lp1; j < matrixCopy.ColumnCount; j = (j + 1) | 0) {
                            if (l < nct) {
                                if (s.getItem(l) !== 0.0) {
                                    t = -MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Ddot(matrixCopy, matrixCopy.RowCount, l, j, l) / matrixCopy.At(l, l);
                                    for (var ii = l; ii < matrixCopy.RowCount; ii = (ii + 1) | 0) {
                                        matrixCopy.At$1(ii, j, matrixCopy.At(ii, j) + (t * matrixCopy.At(ii, l)));
                                    }
                                }
                            }

                            e[System.Array.index(j, e)] = matrixCopy.At(l, j);
                        }

                        if (computeVectors && l < nct) {
                            for (i = l; i < matrixCopy.RowCount; i = (i + 1) | 0) {
                                u.At$1(i, l, matrixCopy.At(i, l));
                            }
                        }

                        if (l >= nrt) {
                            continue;
                        }

                        var enorm = MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Dnrm2Vector(e, lp1);
                        e[System.Array.index(l, e)] = enorm;
                        if (e[System.Array.index(l, e)] !== 0.0) {
                            if (e[System.Array.index(lp1, e)] !== 0.0) {
                                e[System.Array.index(l, e)] = MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Dsign(e[System.Array.index(l, e)], e[System.Array.index(lp1, e)]);
                            }

                            MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.DscalVector(e, lp1, 1.0 / e[System.Array.index(l, e)]);
                            e[System.Array.index(lp1, e)] = 1.0 + e[System.Array.index(lp1, e)];
                        }

                        e[System.Array.index(l, e)] = -e[System.Array.index(l, e)];
                        if (lp1 < matrixCopy.RowCount && e[System.Array.index(l, e)] !== 0.0) {
                            for (i = lp1; i < matrixCopy.RowCount; i = (i + 1) | 0) {
                                work[System.Array.index(i, work)] = 0.0;
                            }

                            for (j = lp1; j < matrixCopy.ColumnCount; j = (j + 1) | 0) {
                                for (var ii1 = lp1; ii1 < matrixCopy.RowCount; ii1 = (ii1 + 1) | 0) {
                                    work[System.Array.index(ii1, work)] += e[System.Array.index(j, e)] * matrixCopy.At(ii1, j);
                                }
                            }

                            for (j = lp1; j < matrixCopy.ColumnCount; j = (j + 1) | 0) {
                                var ww = -e[System.Array.index(j, e)] / e[System.Array.index(lp1, e)];
                                for (var ii2 = lp1; ii2 < matrixCopy.RowCount; ii2 = (ii2 + 1) | 0) {
                                    matrixCopy.At$1(ii2, j, matrixCopy.At(ii2, j) + (ww * work[System.Array.index(ii2, work)]));
                                }
                            }
                        }

                        if (computeVectors) {
                            for (i = lp1; i < matrixCopy.ColumnCount; i = (i + 1) | 0) {
                                vt.At$1(i, l, e[System.Array.index(i, e)]);
                            }
                        }
                    }
                    var m = Math.min(matrixCopy.ColumnCount, ((matrixCopy.RowCount + 1) | 0));
                    var nctp1 = (nct + 1) | 0;
                    var nrtp1 = (nrt + 1) | 0;
                    if (nct < matrixCopy.ColumnCount) {
                        s.setItem(((nctp1 - 1) | 0), matrixCopy.At((((nctp1 - 1) | 0)), (((nctp1 - 1) | 0))));
                    }

                    if (matrixCopy.RowCount < m) {
                        s.setItem(((m - 1) | 0), 0.0);
                    }

                    if (nrtp1 < m) {
                        e[System.Array.index(((nrtp1 - 1) | 0), e)] = matrixCopy.At((((nrtp1 - 1) | 0)), (((m - 1) | 0)));
                    }

                    e[System.Array.index(((m - 1) | 0), e)] = 0.0;

                    if (computeVectors) {
                        for (j = (nctp1 - 1) | 0; j < ncu; j = (j + 1) | 0) {
                            for (i = 0; i < matrixCopy.RowCount; i = (i + 1) | 0) {
                                u.At$1(i, j, 0.0);
                            }

                            u.At$1(j, j, 1.0);
                        }

                        for (l = (nct - 1) | 0; l >= 0; l = (l - 1) | 0) {
                            if (s.getItem(l) !== 0.0) {
                                for (j = (l + 1) | 0; j < ncu; j = (j + 1) | 0) {
                                    t = -MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Ddot(u, matrixCopy.RowCount, l, j, l) / u.At(l, l);
                                    for (var ii3 = l; ii3 < matrixCopy.RowCount; ii3 = (ii3 + 1) | 0) {
                                        u.At$1(ii3, j, u.At(ii3, j) + (t * u.At(ii3, l)));
                                    }
                                }

                                MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.DscalColumn(u, matrixCopy.RowCount, l, l, -1.0);
                                u.At$1(l, l, 1.0 + u.At(l, l));
                                for (i = 0; i < l; i = (i + 1) | 0) {
                                    u.At$1(i, l, 0.0);
                                }
                            } else {
                                for (i = 0; i < matrixCopy.RowCount; i = (i + 1) | 0) {
                                    u.At$1(i, l, 0.0);
                                }

                                u.At$1(l, l, 1.0);
                            }
                        }
                    }

                    if (computeVectors) {
                        for (l = (matrixCopy.ColumnCount - 1) | 0; l >= 0; l = (l - 1) | 0) {
                            lp1 = (l + 1) | 0;
                            if (l < nrt) {
                                if (e[System.Array.index(l, e)] !== 0.0) {
                                    for (j = lp1; j < matrixCopy.ColumnCount; j = (j + 1) | 0) {
                                        t = -MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Ddot(vt, matrixCopy.ColumnCount, l, j, lp1) / vt.At(lp1, l);
                                        for (var ii4 = l; ii4 < matrixCopy.ColumnCount; ii4 = (ii4 + 1) | 0) {
                                            vt.At$1(ii4, j, vt.At(ii4, j) + (t * vt.At(ii4, l)));
                                        }
                                    }
                                }
                            }

                            for (i = 0; i < matrixCopy.ColumnCount; i = (i + 1) | 0) {
                                vt.At$1(i, l, 0.0);
                            }

                            vt.At$1(l, l, 1.0);
                        }
                    }

                    for (i = 0; i < m; i = (i + 1) | 0) {
                        var r;
                        if (s.getItem(i) !== 0.0) {
                            t = s.getItem(i);
                            r = s.getItem(i) / t;
                            s.setItem(i, t);
                            if (i < ((m - 1) | 0)) {
                                e[System.Array.index(i, e)] = e[System.Array.index(i, e)] / r;
                            }

                            if (computeVectors) {
                                MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.DscalColumn(u, matrixCopy.RowCount, i, 0, r);
                            }
                        }

                        if (i === ((m - 1) | 0)) {
                            break;
                        }

                        if (e[System.Array.index(i, e)] !== 0.0) {
                            t = e[System.Array.index(i, e)];
                            r = t / e[System.Array.index(i, e)];
                            e[System.Array.index(i, e)] = t;
                            s.setItem(((i + 1) | 0), s.getItem(((i + 1) | 0)) * r);
                            if (computeVectors) {
                                MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.DscalColumn(vt, matrixCopy.ColumnCount, ((i + 1) | 0), 0, r);
                            }
                        }
                    }

                    var mn = m;
                    var iter = 0;

                    AlmostEquals = function (val1, val2) {
                        if (Math.abs(val1 - val2) < 1E-08) {
                            return true;
                        }
                        return false;
                    };

                    while (m > 0) {
                        if (iter >= maxiter) {
                            throw new System.ArgumentException.$ctor1("NonConvergenceException()");
                        }

                        var ztest;
                        var test;
                        for (l = (m - 2) | 0; l >= 0; l = (l - 1) | 0) {
                            test = Math.abs(s.getItem(l)) + Math.abs(s.getItem(((l + 1) | 0)));
                            ztest = test + Math.abs(e[System.Array.index(l, e)]);
                            if (AlmostEquals(test, ztest)) {
                                e[System.Array.index(l, e)] = 0.0;
                                break;
                            }
                        }

                        var kase;
                        if (l === ((m - 2) | 0)) {
                            kase = 4;
                        } else {
                            var ls;
                            for (ls = (m - 1) | 0; ls > l; ls = (ls - 1) | 0) {
                                test = 0.0;
                                if (ls !== ((m - 1) | 0)) {
                                    test = test + Math.abs(e[System.Array.index(ls, e)]);
                                }

                                if (ls !== ((l + 1) | 0)) {
                                    test = test + Math.abs(e[System.Array.index(((ls - 1) | 0), e)]);
                                }

                                ztest = test + Math.abs(s.getItem(ls));
                                if (AlmostEquals(test, ztest)) {
                                    s.setItem(ls, 0.0);
                                    break;
                                }
                            }

                            if (ls === l) {
                                kase = 3;
                            } else if (ls === ((m - 1) | 0)) {
                                kase = 1;
                            } else {
                                kase = 2;
                                l = ls;
                            }
                        }

                        l = (l + 1) | 0;

                        var k;
                        var f = { };
                        var sn = { };
                        var cs = { };
                        var t1 = { };
                        switch (kase) {
                            case 1: 
                                f.v = e[System.Array.index(((m - 2) | 0), e)];
                                e[System.Array.index(((m - 2) | 0), e)] = 0.0;
                                for (var kk = l; kk < ((m - 1) | 0); kk = (kk + 1) | 0) {
                                    k = (((((m - 2) | 0) - kk) | 0) + l) | 0;
                                    t1.v = s.getItem(k);
                                    MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Drotg(t1, f, cs, sn);
                                    s.setItem(k, t1.v);
                                    if (k !== l) {
                                        f.v = -sn.v * e[System.Array.index(((k - 1) | 0), e)];
                                        e[System.Array.index(((k - 1) | 0), e)] = cs.v * e[System.Array.index(((k - 1) | 0), e)];
                                    }

                                    if (computeVectors) {
                                        MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Drot(vt, matrixCopy.ColumnCount, k, ((m - 1) | 0), cs.v, sn.v);
                                    }
                                }
                                break;
                            case 2: 
                                f.v = e[System.Array.index(((l - 1) | 0), e)];
                                e[System.Array.index(((l - 1) | 0), e)] = 0.0;
                                for (k = l; k < m; k = (k + 1) | 0) {
                                    t1.v = s.getItem(k);
                                    MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Drotg(t1, f, cs, sn);
                                    s.setItem(k, t1.v);
                                    f.v = -sn.v * e[System.Array.index(k, e)];
                                    e[System.Array.index(k, e)] = cs.v * e[System.Array.index(k, e)];
                                    if (computeVectors) {
                                        MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Drot(u, matrixCopy.RowCount, k, ((l - 1) | 0), cs.v, sn.v);
                                    }
                                }
                                break;
                            case 3: 
                                var scale = 0.0;
                                scale = Math.max(scale, Math.abs(s.getItem(((m - 1) | 0))));
                                scale = Math.max(scale, Math.abs(s.getItem(((m - 2) | 0))));
                                scale = Math.max(scale, Math.abs(e[System.Array.index(((m - 2) | 0), e)]));
                                scale = Math.max(scale, Math.abs(s.getItem(l)));
                                scale = Math.max(scale, Math.abs(e[System.Array.index(l, e)]));
                                var sm = s.getItem(((m - 1) | 0)) / scale;
                                var smm1 = s.getItem(((m - 2) | 0)) / scale;
                                var emm1 = e[System.Array.index(((m - 2) | 0), e)] / scale;
                                var sl = s.getItem(l) / scale;
                                var el = e[System.Array.index(l, e)] / scale;
                                var b = (((smm1 + sm) * (smm1 - sm)) + (emm1 * emm1)) / 2.0;
                                var c = (sm * emm1) * (sm * emm1);
                                var shift = 0.0;
                                if (b !== 0.0 || c !== 0.0) {
                                    shift = Math.sqrt((b * b) + c);
                                    if (b < 0.0) {
                                        shift = -shift;
                                    }

                                    shift = c / (b + shift);
                                }
                                f.v = ((sl + sm) * (sl - sm)) + shift;
                                var g = { v : sl * el };
                                for (k = l; k < ((m - 1) | 0); k = (k + 1) | 0) {
                                    MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Drotg(f, g, cs, sn);
                                    if (k !== l) {
                                        e[System.Array.index(((k - 1) | 0), e)] = f.v;
                                    }

                                    f.v = (cs.v * s.getItem(k)) + (sn.v * e[System.Array.index(k, e)]);
                                    e[System.Array.index(k, e)] = (cs.v * e[System.Array.index(k, e)]) - (sn.v * s.getItem(k));
                                    g.v = sn.v * s.getItem(((k + 1) | 0));
                                    s.setItem(((k + 1) | 0), cs.v * s.getItem(((k + 1) | 0)));
                                    if (computeVectors) {
                                        MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Drot(vt, matrixCopy.ColumnCount, k, ((k + 1) | 0), cs.v, sn.v);
                                    }

                                    MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Drotg(f, g, cs, sn);
                                    s.setItem(k, f.v);
                                    f.v = (cs.v * e[System.Array.index(k, e)]) + (sn.v * s.getItem(((k + 1) | 0)));
                                    s.setItem(((k + 1) | 0), (-sn.v * e[System.Array.index(k, e)]) + (cs.v * s.getItem(((k + 1) | 0))));
                                    g.v = sn.v * e[System.Array.index(((k + 1) | 0), e)];
                                    e[System.Array.index(((k + 1) | 0), e)] = cs.v * e[System.Array.index(((k + 1) | 0), e)];
                                    if (computeVectors && k < matrixCopy.RowCount) {
                                        MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Drot(u, matrixCopy.RowCount, k, ((k + 1) | 0), cs.v, sn.v);
                                    }
                                }
                                e[System.Array.index(((m - 2) | 0), e)] = f.v;
                                iter = (iter + 1) | 0;
                                break;
                            case 4: 
                                if (s.getItem(l) < 0.0) {
                                    s.setItem(l, -s.getItem(l));
                                    if (computeVectors) {
                                        MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.DscalColumn(vt, matrixCopy.ColumnCount, l, 0, -1.0);
                                    }
                                }
                                while (l !== ((mn - 1) | 0)) {
                                    if (s.getItem(l) >= s.getItem(((l + 1) | 0))) {
                                        break;
                                    }

                                    t = s.getItem(l);
                                    s.setItem(l, s.getItem(((l + 1) | 0)));
                                    s.setItem(((l + 1) | 0), t);
                                    if (computeVectors && l < matrixCopy.ColumnCount) {
                                        MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Dswap(vt, matrixCopy.ColumnCount, l, ((l + 1) | 0));
                                    }

                                    if (computeVectors && l < matrixCopy.RowCount) {
                                        MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Dswap(u, matrixCopy.RowCount, l, ((l + 1) | 0));
                                    }

                                    l = (l + 1) | 0;
                                }
                                iter = 0;
                                m = (m - 1) | 0;
                                break;
                        }
                    }


                    if (computeVectors) {
                        vt = vt.Transpose();
                    }

                    if (matrixCopy.RowCount < matrixCopy.ColumnCount) {
                        nm = (nm - 1) | 0;
                        var tmp = MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.v_builder.SameAs$3(System.Double, matrixCopy, nm);
                        for (i = 0; i < nm; i = (i + 1) | 0) {
                            tmp.setItem(i, s.getItem(i));
                        }

                        s = tmp;
                    }

                    return new MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd(s, u, vt, computeVectors);
                },
                /**
                 * Calculates absolute value of <b /> multiplied on signum function of <b />
                 *
                 * @static
                 * @private
                 * @this MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd
                 * @param   {number}    z1    Double value z1
                 * @param   {number}    z2    Double value z2
                 * @return  {number}          Result multiplication of signum function and absolute value
                 */
                Dsign: function (z1, z2) {
                    return Math.abs(z1) * (z2 / Math.abs(z2));
                },
                /**
                 * Swap column  <b />  and  <b />
                 *
                 * @static
                 * @private
                 * @this MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    a           Source matrix
                 * @param   {number}                                     rowCount    The number of rows in <b>rowCount</b>
                 * @param   {number}                                     columnA     Column A index to swap
                 * @param   {number}                                     columnB     Column B index to swap
                 * @return  {void}
                 */
                Dswap: function (a, rowCount, columnA, columnB) {
                    for (var i = 0; i < rowCount; i = (i + 1) | 0) {
                        var z = a.At(i, columnA);
                        a.At$1(i, columnA, a.At(i, columnB));
                        a.At$1(i, columnB, z);
                    }
                },
                /**
                 * Scale column <b /> by <b /> starting from row <b />
                 *
                 * @static
                 * @private
                 * @this MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    a           Source matrix
                 * @param   {number}                                     rowCount    The number of rows in <b>rowCount</b>
                 * @param   {number}                                     column      Column to scale
                 * @param   {number}                                     rowStart    Row to scale from
                 * @param   {number}                                     z           Scale value
                 * @return  {void}
                 */
                DscalColumn: function (a, rowCount, column, rowStart, z) {
                    for (var i = rowStart; i < rowCount; i = (i + 1) | 0) {
                        a.At$1(i, column, a.At(i, column) * z);
                    }
                },
                /**
                 * Scale vector <b /> by <b /> starting from index <b />
                 *
                 * @static
                 * @private
                 * @this MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd
                 * @param   {Array.<number>}    a        Source vector
                 * @param   {number}            start    Row to scale from
                 * @param   {number}            z        Scale value
                 * @return  {void}
                 */
                DscalVector: function (a, start, z) {
                    for (var i = start; i < a.length; i = (i + 1) | 0) {
                        a[System.Array.index(i, a)] = a[System.Array.index(i, a)] * z;
                    }
                },
                /**
                 * Given the Cartesian coordinates (da, db) of a point p, these function return the parameters da, db, c, and s
                 associated with the Givens rotation that zeros the y-coordinate of the point.
                 *
                 * @static
                 * @private
                 * @this MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd
                 * @param   {System.Double}    da    Provides the x-coordinate of the point p. On exit contains the parameter r associated with the Givens rotation
                 * @param   {System.Double}    db    Provides the y-coordinate of the point p. On exit contains the parameter z associated with the Givens rotation
                 * @param   {System.Double}    c     Contains the parameter c associated with the Givens rotation
                 * @param   {System.Double}    s     Contains the parameter s associated with the Givens rotation
                 * @return  {void}
                 */
                Drotg: function (da, db, c, s) {
                    var r, z;
                    var roe = db.v;
                    var absda = Math.abs(da.v);
                    var absdb = Math.abs(db.v);
                    if (absda > absdb) {
                        roe = da.v;
                    }

                    var scale = absda + absdb;
                    if (scale === 0.0) {
                        c.v = 1.0;
                        s.v = 0.0;
                        r = 0.0;
                        z = 0.0;
                    } else {
                        var sda = da.v / scale;
                        var sdb = db.v / scale;
                        r = scale * Math.sqrt((sda * sda) + (sdb * sdb));
                        if (roe < 0.0) {
                            r = -r;
                        }

                        c.v = da.v / r;
                        s.v = db.v / r;
                        z = 1.0;
                        if (absda > absdb) {
                            z = s.v;
                        }

                        if (absdb >= absda && c.v !== 0.0) {
                            z = 1.0 / c.v;
                        }
                    }

                    da.v = r;
                    db.v = z;
                },
                /**
                 * Calculate Norm 2 of the column <b /> in matrix <b /> starting from row <b />
                 *
                 * @static
                 * @private
                 * @this MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    a           Source matrix
                 * @param   {number}                                     rowCount    The number of rows in <b>rowCount</b>
                 * @param   {number}                                     column      Column index
                 * @param   {number}                                     rowStart    Start row index
                 * @return  {number}                                                 Norm2 (Euclidean norm) of the column
                 */
                Dnrm2Column: function (a, rowCount, column, rowStart) {
                    var s = 0;
                    for (var i = rowStart; i < rowCount; i = (i + 1) | 0) {
                        s += a.At(i, column) * a.At(i, column);
                    }

                    return Math.sqrt(s);
                },
                /**
                 * Calculate Norm 2 of the vector <b /> starting from index <b />
                 *
                 * @static
                 * @private
                 * @this MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd
                 * @param   {Array.<number>}    a           Source vector
                 * @param   {number}            rowStart    Start index
                 * @return  {number}                        Norm2 (Euclidean norm) of the vector
                 */
                Dnrm2Vector: function (a, rowStart) {
                    var s = 0;
                    for (var i = rowStart; i < a.length; i = (i + 1) | 0) {
                        s += a[System.Array.index(i, a)] * a[System.Array.index(i, a)];
                    }

                    return Math.sqrt(s);
                },
                /**
                 * Calculate dot product of <b /> and <b />
                 *
                 * @static
                 * @private
                 * @this MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    a           Source matrix
                 * @param   {number}                                     rowCount    The number of rows in <b>rowCount</b>
                 * @param   {number}                                     columnA     Index of column A
                 * @param   {number}                                     columnB     Index of column B
                 * @param   {number}                                     rowStart    Starting row index
                 * @return  {number}                                                 Dot product value
                 */
                Ddot: function (a, rowCount, columnA, columnB, rowStart) {
                    var z = 0.0;
                    for (var i = rowStart; i < rowCount; i = (i + 1) | 0) {
                        z += a.At(i, columnB) * a.At(i, columnA);
                    }

                    return z;
                },
                /**
                 * Performs rotation of points in the plane. Given two vectors x <b /> and y <b />,
                 each vector element of these vectors is replaced as follows: x(i) = c*x(i) + s*y(i); y(i) = c*y(i) - s*x(i)
                 *
                 * @static
                 * @private
                 * @this MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd
                 * @memberof MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd
                 * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    a           Source matrix
                 * @param   {number}                                     rowCount    The number of rows in <b>rowCount</b>
                 * @param   {number}                                     columnA     Index of column A
                 * @param   {number}                                     columnB     Index of column B
                 * @param   {number}                                     c           Scalar "c" value
                 * @param   {number}                                     s           Scalar "s" value
                 * @return  {void}
                 */
                Drot: function (a, rowCount, columnA, columnB, c, s) {
                    for (var i = 0; i < rowCount; i = (i + 1) | 0) {
                        var z = (c * a.At(i, columnA)) + (s * a.At(i, columnB));
                        var tmp = (c * a.At(i, columnB)) - (s * a.At(i, columnA));
                        a.At$1(i, columnB, tmp);
                        a.At$1(i, columnA, z);
                    }
                }
            }
        },
        alias: [
            "Solve$1", "MathNet$Numerics$LinearAlgebra$Factorization$ISolver$1$System$Double$Solve$2",
            "Solve$3", "MathNet$Numerics$LinearAlgebra$Factorization$ISolver$1$System$Double$Solve$3"
        ],
        ctors: {
            ctor: function (s, u, vt, vectorsComputed) {
                this.$initialize();
                MathNet.Numerics.LinearAlgebra.Double.Factorization.Svd.ctor.call(this, s, u, vt, vectorsComputed);
            }
        },
        methods: {
            /**
             * Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    input     The right hand side {@link }, <b>B</b>.
             * @param   {MathNet.Numerics.LinearAlgebra.Matrix$1}    result    The left hand side {@link }, <b>X</b>.
             * @return  {void}
             */
            Solve$1: function (input, result) {
                if (!this.VectorsComputed) {
                    throw new System.InvalidOperationException.$ctor1("Resources.SingularVectorsNotComputed");
                }

                if (input.ColumnCount !== result.ColumnCount) {
                    throw new System.ArgumentException.$ctor1("Resources.ArgumentMatrixSameColumnDimension");
                }

                if (this.U.RowCount !== input.RowCount) {
                    throw new System.ArgumentException.$ctor1("Resources.ArgumentMatrixSameRowDimension");


                }

                if (this.VT.ColumnCount !== result.RowCount) {
                    throw new System.ArgumentException.$ctor1("Resources.ArgumentMatrixSameColumnDimension");

                }

                var mn = Math.min(this.U.RowCount, this.VT.ColumnCount);
                var bn = input.ColumnCount;

                var tmp = System.Array.init(this.VT.ColumnCount, 0, System.Double);

                for (var k = 0; k < bn; k = (k + 1) | 0) {
                    for (var j = 0; j < this.VT.ColumnCount; j = (j + 1) | 0) {
                        var value = 0;
                        if (j < mn) {
                            for (var i = 0; i < this.U.RowCount; i = (i + 1) | 0) {
                                value += this.U.At(i, j) * input.At(i, k);
                            }

                            value /= this.S.getItem(j);
                        }

                        tmp[System.Array.index(j, tmp)] = value;
                    }

                    for (var j1 = 0; j1 < this.VT.ColumnCount; j1 = (j1 + 1) | 0) {
                        var value1 = 0;
                        for (var i1 = 0; i1 < this.VT.ColumnCount; i1 = (i1 + 1) | 0) {
                            value1 += this.VT.At(i1, j1) * tmp[System.Array.index(i1, tmp)];
                        }

                        result.At$1(j1, k, value1);
                    }
                }
            },
            /**
             * Solves a system of linear equations, <b>Ax = b</b>, with A SVD factorized.
             *
             * @instance
             * @public
             * @override
             * @this MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd
             * @memberof MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    input     The right hand side vector, <b>b</b>.
             * @param   {MathNet.Numerics.LinearAlgebra.Vector$1}    result    The left hand side {@link }, <b>x</b>.
             * @return  {void}
             */
            Solve$3: function (input, result) {
                if (!this.VectorsComputed) {
                    throw new System.InvalidOperationException.$ctor1("Resources.SingularVectorsNotComputed");
                }

                if (this.U.RowCount !== input.Count) {
                    throw new System.ArgumentException.$ctor1("Resources.ArgumentVectorsSameLength");
                }

                if (this.VT.ColumnCount !== result.Count) {
                    throw MathNet.Numerics.LinearAlgebra.Matrix$1(System.Double).DimensionsDontMatch$4(System.ArgumentException, this.VT, result);
                }

                var mn = Math.min(this.U.RowCount, this.VT.ColumnCount);
                var tmp = System.Array.init(this.VT.ColumnCount, 0, System.Double);
                var value;
                for (var j = 0; j < this.VT.ColumnCount; j = (j + 1) | 0) {
                    value = 0;
                    if (j < mn) {
                        for (var i = 0; i < this.U.RowCount; i = (i + 1) | 0) {
                            value += this.U.At(i, j) * input.getItem(i);
                        }

                        value /= this.S.getItem(j);
                    }

                    tmp[System.Array.index(j, tmp)] = value;
                }

                for (var j1 = 0; j1 < this.VT.ColumnCount; j1 = (j1 + 1) | 0) {
                    value = 0;
                    for (var i1 = 0; i1 < this.VT.ColumnCount; i1 = (i1 + 1) | 0) {
                        value += this.VT.At(i1, j1) * tmp[System.Array.index(i1, tmp)];
                    }

                    result.setItem(j1, value);
                }
            }
        }
    });
});

//# sourceMappingURL=data:application/json;base64,
